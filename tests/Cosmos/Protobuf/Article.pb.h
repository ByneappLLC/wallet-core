// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Article.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Article_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Article_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Article_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Article_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Article_2eproto;
namespace blog {
class Article;
struct ArticleDefaultTypeInternal;
extern ArticleDefaultTypeInternal _Article_default_instance_;
}  // namespace blog
PROTOBUF_NAMESPACE_OPEN
template<> ::blog::Article* Arena::CreateMaybeMessage<::blog::Article>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blog {

enum Type : int {
  TYPE_UNSPECIFIED = 0,
  IMAGES = 1,
  NEWS = 2,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = TYPE_UNSPECIFIED;
constexpr Type Type_MAX = NEWS;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum Review : int {
  REVIEW_UNSPECIFIED = 0,
  ACCEPTED = 1,
  REJECTED = 2,
  Review_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Review_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Review_IsValid(int value);
constexpr Review Review_MIN = REVIEW_UNSPECIFIED;
constexpr Review Review_MAX = REJECTED;
constexpr int Review_ARRAYSIZE = Review_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Review_descriptor();
template<typename T>
inline const std::string& Review_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Review>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Review_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Review_descriptor(), enum_t_value);
}
inline bool Review_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Review* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Review>(
    Review_descriptor(), name, value);
}
// ===================================================================

class Article final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blog.Article) */ {
 public:
  inline Article() : Article(nullptr) {}
  ~Article() override;
  explicit constexpr Article(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Article(const Article& from);
  Article(Article&& from) noexcept
    : Article() {
    *this = ::std::move(from);
  }

  inline Article& operator=(const Article& from) {
    CopyFrom(from);
    return *this;
  }
  inline Article& operator=(Article&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Article& default_instance() {
    return *internal_default_instance();
  }
  static inline const Article* internal_default_instance() {
    return reinterpret_cast<const Article*>(
               &_Article_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Article& a, Article& b) {
    a.Swap(&b);
  }
  inline void Swap(Article* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Article* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Article* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Article>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Article& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Article& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Article* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blog.Article";
  }
  protected:
  explicit Article(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentsFieldNumber = 9,
    kBacklinksFieldNumber = 10,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kCreatedFieldNumber = 3,
    kUpdatedFieldNumber = 4,
    kPublicFieldNumber = 5,
    kPromotedFieldNumber = 6,
    kTypeFieldNumber = 7,
    kReviewFieldNumber = 8,
  };
  // repeated string comments = 9;
  int comments_size() const;
  private:
  int _internal_comments_size() const;
  public:
  void clear_comments();
  const std::string& comments(int index) const;
  std::string* mutable_comments(int index);
  void set_comments(int index, const std::string& value);
  void set_comments(int index, std::string&& value);
  void set_comments(int index, const char* value);
  void set_comments(int index, const char* value, size_t size);
  std::string* add_comments();
  void add_comments(const std::string& value);
  void add_comments(std::string&& value);
  void add_comments(const char* value);
  void add_comments(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& comments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_comments();
  private:
  const std::string& _internal_comments(int index) const;
  std::string* _internal_add_comments();
  public:

  // repeated string backlinks = 10;
  int backlinks_size() const;
  private:
  int _internal_backlinks_size() const;
  public:
  void clear_backlinks();
  const std::string& backlinks(int index) const;
  std::string* mutable_backlinks(int index);
  void set_backlinks(int index, const std::string& value);
  void set_backlinks(int index, std::string&& value);
  void set_backlinks(int index, const char* value);
  void set_backlinks(int index, const char* value, size_t size);
  std::string* add_backlinks();
  void add_backlinks(const std::string& value);
  void add_backlinks(std::string&& value);
  void add_backlinks(const char* value);
  void add_backlinks(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& backlinks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_backlinks();
  private:
  const std::string& _internal_backlinks(int index) const;
  std::string* _internal_add_backlinks();
  public:

  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint64 created = 3;
  void clear_created();
  uint64_t created() const;
  void set_created(uint64_t value);
  private:
  uint64_t _internal_created() const;
  void _internal_set_created(uint64_t value);
  public:

  // uint64 updated = 4;
  void clear_updated();
  uint64_t updated() const;
  void set_updated(uint64_t value);
  private:
  uint64_t _internal_updated() const;
  void _internal_set_updated(uint64_t value);
  public:

  // bool public = 5;
  void clear_public_();
  bool public_() const;
  void set_public_(bool value);
  private:
  bool _internal_public_() const;
  void _internal_set_public_(bool value);
  public:

  // bool promoted = 6;
  void clear_promoted();
  bool promoted() const;
  void set_promoted(bool value);
  private:
  bool _internal_promoted() const;
  void _internal_set_promoted(bool value);
  public:

  // .blog.Type type = 7;
  void clear_type();
  ::blog::Type type() const;
  void set_type(::blog::Type value);
  private:
  ::blog::Type _internal_type() const;
  void _internal_set_type(::blog::Type value);
  public:

  // .blog.Review review = 8;
  void clear_review();
  ::blog::Review review() const;
  void set_review(::blog::Review value);
  private:
  ::blog::Review _internal_review() const;
  void _internal_set_review(::blog::Review value);
  public:

  // @@protoc_insertion_point(class_scope:blog.Article)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> comments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> backlinks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  uint64_t created_;
  uint64_t updated_;
  bool public__;
  bool promoted_;
  int type_;
  int review_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Article_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Article

// string title = 1;
inline void Article::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& Article::title() const {
  // @@protoc_insertion_point(field_get:blog.Article.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Article::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blog.Article.title)
}
inline std::string* Article::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:blog.Article.title)
  return _s;
}
inline const std::string& Article::_internal_title() const {
  return title_.Get();
}
inline void Article::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Article::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Article::release_title() {
  // @@protoc_insertion_point(field_release:blog.Article.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Article::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blog.Article.title)
}

// string description = 2;
inline void Article::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Article::description() const {
  // @@protoc_insertion_point(field_get:blog.Article.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Article::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blog.Article.description)
}
inline std::string* Article::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:blog.Article.description)
  return _s;
}
inline const std::string& Article::_internal_description() const {
  return description_.Get();
}
inline void Article::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Article::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Article::release_description() {
  // @@protoc_insertion_point(field_release:blog.Article.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Article::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blog.Article.description)
}

// uint64 created = 3;
inline void Article::clear_created() {
  created_ = uint64_t{0u};
}
inline uint64_t Article::_internal_created() const {
  return created_;
}
inline uint64_t Article::created() const {
  // @@protoc_insertion_point(field_get:blog.Article.created)
  return _internal_created();
}
inline void Article::_internal_set_created(uint64_t value) {
  
  created_ = value;
}
inline void Article::set_created(uint64_t value) {
  _internal_set_created(value);
  // @@protoc_insertion_point(field_set:blog.Article.created)
}

// uint64 updated = 4;
inline void Article::clear_updated() {
  updated_ = uint64_t{0u};
}
inline uint64_t Article::_internal_updated() const {
  return updated_;
}
inline uint64_t Article::updated() const {
  // @@protoc_insertion_point(field_get:blog.Article.updated)
  return _internal_updated();
}
inline void Article::_internal_set_updated(uint64_t value) {
  
  updated_ = value;
}
inline void Article::set_updated(uint64_t value) {
  _internal_set_updated(value);
  // @@protoc_insertion_point(field_set:blog.Article.updated)
}

// bool public = 5;
inline void Article::clear_public_() {
  public__ = false;
}
inline bool Article::_internal_public_() const {
  return public__;
}
inline bool Article::public_() const {
  // @@protoc_insertion_point(field_get:blog.Article.public)
  return _internal_public_();
}
inline void Article::_internal_set_public_(bool value) {
  
  public__ = value;
}
inline void Article::set_public_(bool value) {
  _internal_set_public_(value);
  // @@protoc_insertion_point(field_set:blog.Article.public)
}

// bool promoted = 6;
inline void Article::clear_promoted() {
  promoted_ = false;
}
inline bool Article::_internal_promoted() const {
  return promoted_;
}
inline bool Article::promoted() const {
  // @@protoc_insertion_point(field_get:blog.Article.promoted)
  return _internal_promoted();
}
inline void Article::_internal_set_promoted(bool value) {
  
  promoted_ = value;
}
inline void Article::set_promoted(bool value) {
  _internal_set_promoted(value);
  // @@protoc_insertion_point(field_set:blog.Article.promoted)
}

// .blog.Type type = 7;
inline void Article::clear_type() {
  type_ = 0;
}
inline ::blog::Type Article::_internal_type() const {
  return static_cast< ::blog::Type >(type_);
}
inline ::blog::Type Article::type() const {
  // @@protoc_insertion_point(field_get:blog.Article.type)
  return _internal_type();
}
inline void Article::_internal_set_type(::blog::Type value) {
  
  type_ = value;
}
inline void Article::set_type(::blog::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:blog.Article.type)
}

// .blog.Review review = 8;
inline void Article::clear_review() {
  review_ = 0;
}
inline ::blog::Review Article::_internal_review() const {
  return static_cast< ::blog::Review >(review_);
}
inline ::blog::Review Article::review() const {
  // @@protoc_insertion_point(field_get:blog.Article.review)
  return _internal_review();
}
inline void Article::_internal_set_review(::blog::Review value) {
  
  review_ = value;
}
inline void Article::set_review(::blog::Review value) {
  _internal_set_review(value);
  // @@protoc_insertion_point(field_set:blog.Article.review)
}

// repeated string comments = 9;
inline int Article::_internal_comments_size() const {
  return comments_.size();
}
inline int Article::comments_size() const {
  return _internal_comments_size();
}
inline void Article::clear_comments() {
  comments_.Clear();
}
inline std::string* Article::add_comments() {
  std::string* _s = _internal_add_comments();
  // @@protoc_insertion_point(field_add_mutable:blog.Article.comments)
  return _s;
}
inline const std::string& Article::_internal_comments(int index) const {
  return comments_.Get(index);
}
inline const std::string& Article::comments(int index) const {
  // @@protoc_insertion_point(field_get:blog.Article.comments)
  return _internal_comments(index);
}
inline std::string* Article::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:blog.Article.comments)
  return comments_.Mutable(index);
}
inline void Article::set_comments(int index, const std::string& value) {
  comments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:blog.Article.comments)
}
inline void Article::set_comments(int index, std::string&& value) {
  comments_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:blog.Article.comments)
}
inline void Article::set_comments(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  comments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:blog.Article.comments)
}
inline void Article::set_comments(int index, const char* value, size_t size) {
  comments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:blog.Article.comments)
}
inline std::string* Article::_internal_add_comments() {
  return comments_.Add();
}
inline void Article::add_comments(const std::string& value) {
  comments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:blog.Article.comments)
}
inline void Article::add_comments(std::string&& value) {
  comments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:blog.Article.comments)
}
inline void Article::add_comments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  comments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:blog.Article.comments)
}
inline void Article::add_comments(const char* value, size_t size) {
  comments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:blog.Article.comments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Article::comments() const {
  // @@protoc_insertion_point(field_list:blog.Article.comments)
  return comments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Article::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:blog.Article.comments)
  return &comments_;
}

// repeated string backlinks = 10;
inline int Article::_internal_backlinks_size() const {
  return backlinks_.size();
}
inline int Article::backlinks_size() const {
  return _internal_backlinks_size();
}
inline void Article::clear_backlinks() {
  backlinks_.Clear();
}
inline std::string* Article::add_backlinks() {
  std::string* _s = _internal_add_backlinks();
  // @@protoc_insertion_point(field_add_mutable:blog.Article.backlinks)
  return _s;
}
inline const std::string& Article::_internal_backlinks(int index) const {
  return backlinks_.Get(index);
}
inline const std::string& Article::backlinks(int index) const {
  // @@protoc_insertion_point(field_get:blog.Article.backlinks)
  return _internal_backlinks(index);
}
inline std::string* Article::mutable_backlinks(int index) {
  // @@protoc_insertion_point(field_mutable:blog.Article.backlinks)
  return backlinks_.Mutable(index);
}
inline void Article::set_backlinks(int index, const std::string& value) {
  backlinks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:blog.Article.backlinks)
}
inline void Article::set_backlinks(int index, std::string&& value) {
  backlinks_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:blog.Article.backlinks)
}
inline void Article::set_backlinks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  backlinks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:blog.Article.backlinks)
}
inline void Article::set_backlinks(int index, const char* value, size_t size) {
  backlinks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:blog.Article.backlinks)
}
inline std::string* Article::_internal_add_backlinks() {
  return backlinks_.Add();
}
inline void Article::add_backlinks(const std::string& value) {
  backlinks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:blog.Article.backlinks)
}
inline void Article::add_backlinks(std::string&& value) {
  backlinks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:blog.Article.backlinks)
}
inline void Article::add_backlinks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  backlinks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:blog.Article.backlinks)
}
inline void Article::add_backlinks(const char* value, size_t size) {
  backlinks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:blog.Article.backlinks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Article::backlinks() const {
  // @@protoc_insertion_point(field_list:blog.Article.backlinks)
  return backlinks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Article::mutable_backlinks() {
  // @@protoc_insertion_point(field_mutable_list:blog.Article.backlinks)
  return &backlinks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace blog

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blog::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blog::Type>() {
  return ::blog::Type_descriptor();
}
template <> struct is_proto_enum< ::blog::Review> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blog::Review>() {
  return ::blog::Review_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Article_2eproto
