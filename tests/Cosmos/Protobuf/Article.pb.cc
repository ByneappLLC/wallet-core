// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Article.proto

#include "Article.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blog {
constexpr Article::Article(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : comments_()
  , backlinks_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_(uint64_t{0u})
  , updated_(uint64_t{0u})
  , public__(false)
  , promoted_(false)
  , type_(0)

  , review_(0)
{}
struct ArticleDefaultTypeInternal {
  constexpr ArticleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArticleDefaultTypeInternal() {}
  union {
    Article _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArticleDefaultTypeInternal _Article_default_instance_;
}  // namespace blog
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Article_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Article_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Article_2eproto = nullptr;

const uint32_t TableStruct_Article_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::blog::Article, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blog::Article, title_),
  PROTOBUF_FIELD_OFFSET(::blog::Article, description_),
  PROTOBUF_FIELD_OFFSET(::blog::Article, created_),
  PROTOBUF_FIELD_OFFSET(::blog::Article, updated_),
  PROTOBUF_FIELD_OFFSET(::blog::Article, public__),
  PROTOBUF_FIELD_OFFSET(::blog::Article, promoted_),
  PROTOBUF_FIELD_OFFSET(::blog::Article, type_),
  PROTOBUF_FIELD_OFFSET(::blog::Article, review_),
  PROTOBUF_FIELD_OFFSET(::blog::Article, comments_),
  PROTOBUF_FIELD_OFFSET(::blog::Article, backlinks_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::blog::Article)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blog::_Article_default_instance_),
};

const char descriptor_table_protodef_Article_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rArticle.proto\022\004blog\"\316\001\n\007Article\022\r\n\005tit"
  "le\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\017\n\007created"
  "\030\003 \001(\004\022\017\n\007updated\030\004 \001(\004\022\016\n\006public\030\005 \001(\010\022"
  "\020\n\010promoted\030\006 \001(\010\022\030\n\004type\030\007 \001(\0162\n.blog.T"
  "ype\022\034\n\006review\030\010 \001(\0162\014.blog.Review\022\020\n\010com"
  "ments\030\t \003(\t\022\021\n\tbacklinks\030\n \003(\t*2\n\004Type\022\024"
  "\n\020TYPE_UNSPECIFIED\020\000\022\n\n\006IMAGES\020\001\022\010\n\004NEWS"
  "\020\002*<\n\006Review\022\026\n\022REVIEW_UNSPECIFIED\020\000\022\014\n\010"
  "ACCEPTED\020\001\022\014\n\010REJECTED\020\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Article_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Article_2eproto = {
  false, false, 352, descriptor_table_protodef_Article_2eproto, "Article.proto", 
  &descriptor_table_Article_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_Article_2eproto::offsets,
  file_level_metadata_Article_2eproto, file_level_enum_descriptors_Article_2eproto, file_level_service_descriptors_Article_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Article_2eproto_getter() {
  return &descriptor_table_Article_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Article_2eproto(&descriptor_table_Article_2eproto);
namespace blog {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Article_2eproto);
  return file_level_enum_descriptors_Article_2eproto[0];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Review_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Article_2eproto);
  return file_level_enum_descriptors_Article_2eproto[1];
}
bool Review_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Article::_Internal {
 public:
};

Article::Article(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  comments_(arena),
  backlinks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blog.Article)
}
Article::Article(const Article& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      comments_(from.comments_),
      backlinks_(from.backlinks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&created_, &from.created_,
    static_cast<size_t>(reinterpret_cast<char*>(&review_) -
    reinterpret_cast<char*>(&created_)) + sizeof(review_));
  // @@protoc_insertion_point(copy_constructor:blog.Article)
}

inline void Article::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&review_) -
    reinterpret_cast<char*>(&created_)) + sizeof(review_));
}

Article::~Article() {
  // @@protoc_insertion_point(destructor:blog.Article)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Article::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Article::ArenaDtor(void* object) {
  Article* _this = reinterpret_cast< Article* >(object);
  (void)_this;
}
void Article::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Article::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Article::Clear() {
// @@protoc_insertion_point(message_clear_start:blog.Article)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comments_.Clear();
  backlinks_.Clear();
  title_.ClearToEmpty();
  description_.ClearToEmpty();
  ::memset(&created_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&review_) -
      reinterpret_cast<char*>(&created_)) + sizeof(review_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Article::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blog.Article.title"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blog.Article.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 created = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 updated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool public = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          public__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool promoted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          promoted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .blog.Type type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::blog::Type>(val));
        } else
          goto handle_unusual;
        continue;
      // .blog.Review review = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_review(static_cast<::blog::Review>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string comments = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_comments();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blog.Article.comments"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string backlinks = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_backlinks();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "blog.Article.backlinks"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Article::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blog.Article)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blog.Article.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blog.Article.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // uint64 created = 3;
  if (this->_internal_created() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_created(), target);
  }

  // uint64 updated = 4;
  if (this->_internal_updated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_updated(), target);
  }

  // bool public = 5;
  if (this->_internal_public_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_public_(), target);
  }

  // bool promoted = 6;
  if (this->_internal_promoted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_promoted(), target);
  }

  // .blog.Type type = 7;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  // .blog.Review review = 8;
  if (this->_internal_review() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_review(), target);
  }

  // repeated string comments = 9;
  for (int i = 0, n = this->_internal_comments_size(); i < n; i++) {
    const auto& s = this->_internal_comments(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blog.Article.comments");
    target = stream->WriteString(9, s, target);
  }

  // repeated string backlinks = 10;
  for (int i = 0, n = this->_internal_backlinks_size(); i < n; i++) {
    const auto& s = this->_internal_backlinks(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "blog.Article.backlinks");
    target = stream->WriteString(10, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blog.Article)
  return target;
}

size_t Article::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blog.Article)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string comments = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(comments_.size());
  for (int i = 0, n = comments_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      comments_.Get(i));
  }

  // repeated string backlinks = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(backlinks_.size());
  for (int i = 0, n = backlinks_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      backlinks_.Get(i));
  }

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // uint64 created = 3;
  if (this->_internal_created() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_created());
  }

  // uint64 updated = 4;
  if (this->_internal_updated() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_updated());
  }

  // bool public = 5;
  if (this->_internal_public_() != 0) {
    total_size += 1 + 1;
  }

  // bool promoted = 6;
  if (this->_internal_promoted() != 0) {
    total_size += 1 + 1;
  }

  // .blog.Type type = 7;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .blog.Review review = 8;
  if (this->_internal_review() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_review());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Article::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Article::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Article::GetClassData() const { return &_class_data_; }

void Article::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Article *>(to)->MergeFrom(
      static_cast<const Article &>(from));
}


void Article::MergeFrom(const Article& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blog.Article)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  comments_.MergeFrom(from.comments_);
  backlinks_.MergeFrom(from.backlinks_);
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_created() != 0) {
    _internal_set_created(from._internal_created());
  }
  if (from._internal_updated() != 0) {
    _internal_set_updated(from._internal_updated());
  }
  if (from._internal_public_() != 0) {
    _internal_set_public_(from._internal_public_());
  }
  if (from._internal_promoted() != 0) {
    _internal_set_promoted(from._internal_promoted());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_review() != 0) {
    _internal_set_review(from._internal_review());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Article::CopyFrom(const Article& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blog.Article)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Article::IsInitialized() const {
  return true;
}

void Article::InternalSwap(Article* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  comments_.InternalSwap(&other->comments_);
  backlinks_.InternalSwap(&other->backlinks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Article, review_)
      + sizeof(Article::review_)
      - PROTOBUF_FIELD_OFFSET(Article, created_)>(
          reinterpret_cast<char*>(&created_),
          reinterpret_cast<char*>(&other->created_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Article::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Article_2eproto_getter, &descriptor_table_Article_2eproto_once,
      file_level_metadata_Article_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blog
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blog::Article* Arena::CreateMaybeMessage< ::blog::Article >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blog::Article >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
