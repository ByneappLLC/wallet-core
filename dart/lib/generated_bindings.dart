// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `HDWallet.h`.
class TrustWallet {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TrustWallet(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TrustWallet.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signal_ptr = _lookup<ffi.NativeFunction<_c_signal>>('signal');
  late final _dart_signal _signal = _signal_ptr.asFunction<_dart_signal>();

  int getpriority(
    int arg0,
    int arg1,
  ) {
    return _getpriority(
      arg0,
      arg1,
    );
  }

  late final _getpriority_ptr =
      _lookup<ffi.NativeFunction<_c_getpriority>>('getpriority');
  late final _dart_getpriority _getpriority =
      _getpriority_ptr.asFunction<_dart_getpriority>();

  int getiopolicy_np(
    int arg0,
    int arg1,
  ) {
    return _getiopolicy_np(
      arg0,
      arg1,
    );
  }

  late final _getiopolicy_np_ptr =
      _lookup<ffi.NativeFunction<_c_getiopolicy_np>>('getiopolicy_np');
  late final _dart_getiopolicy_np _getiopolicy_np =
      _getiopolicy_np_ptr.asFunction<_dart_getiopolicy_np>();

  int getrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  late final _getrlimit_ptr =
      _lookup<ffi.NativeFunction<_c_getrlimit>>('getrlimit');
  late final _dart_getrlimit _getrlimit =
      _getrlimit_ptr.asFunction<_dart_getrlimit>();

  int getrusage(
    int arg0,
    ffi.Pointer<rusage> arg1,
  ) {
    return _getrusage(
      arg0,
      arg1,
    );
  }

  late final _getrusage_ptr =
      _lookup<ffi.NativeFunction<_c_getrusage>>('getrusage');
  late final _dart_getrusage _getrusage =
      _getrusage_ptr.asFunction<_dart_getrusage>();

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setpriority_ptr =
      _lookup<ffi.NativeFunction<_c_setpriority>>('setpriority');
  late final _dart_setpriority _setpriority =
      _setpriority_ptr.asFunction<_dart_setpriority>();

  int setiopolicy_np(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setiopolicy_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setiopolicy_np_ptr =
      _lookup<ffi.NativeFunction<_c_setiopolicy_np>>('setiopolicy_np');
  late final _dart_setiopolicy_np _setiopolicy_np =
      _setiopolicy_np_ptr.asFunction<_dart_setiopolicy_np>();

  int setrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  late final _setrlimit_ptr =
      _lookup<ffi.NativeFunction<_c_setrlimit>>('setrlimit');
  late final _dart_setrlimit _setrlimit =
      _setrlimit_ptr.asFunction<_dart_setrlimit>();

  int wait(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return _wait(
      arg0,
    );
  }

  late final _wait_ptr = _lookup<ffi.NativeFunction<_c_wait>>('wait');
  late final _dart_wait _wait = _wait_ptr.asFunction<_dart_wait>();

  int waitpid(
    int arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
  ) {
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waitpid_ptr = _lookup<ffi.NativeFunction<_c_waitpid>>('waitpid');
  late final _dart_waitpid _waitpid = _waitpid_ptr.asFunction<_dart_waitpid>();

  int waitid(
    int arg0,
    int arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    return _waitid(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _waitid_ptr = _lookup<ffi.NativeFunction<_c_waitid>>('waitid');
  late final _dart_waitid _waitid = _waitid_ptr.asFunction<_dart_waitid>();

  int wait3(
    ffi.Pointer<ffi.Int32> arg0,
    int arg1,
    ffi.Pointer<rusage> arg2,
  ) {
    return _wait3(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wait3_ptr = _lookup<ffi.NativeFunction<_c_wait3>>('wait3');
  late final _dart_wait3 _wait3 = _wait3_ptr.asFunction<_dart_wait3>();

  int wait4(
    int arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
    ffi.Pointer<rusage> arg3,
  ) {
    return _wait4(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wait4_ptr = _lookup<ffi.NativeFunction<_c_wait4>>('wait4');
  late final _dart_wait4 _wait4 = _wait4_ptr.asFunction<_dart_wait4>();

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    return _alloca(
      arg0,
    );
  }

  late final _alloca_ptr = _lookup<ffi.NativeFunction<_c_alloca>>('alloca');
  late final _dart_alloca _alloca = _alloca_ptr.asFunction<_dart_alloca>();

  late final ffi.Pointer<ffi.Int32> ___mb_cur_max =
      _lookup<ffi.Int32>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _malloc_ptr = _lookup<ffi.NativeFunction<_c_malloc>>('malloc');
  late final _dart_malloc _malloc = _malloc_ptr.asFunction<_dart_malloc>();

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _calloc_ptr = _lookup<ffi.NativeFunction<_c_calloc>>('calloc');
  late final _dart_calloc _calloc = _calloc_ptr.asFunction<_dart_calloc>();

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _free_ptr = _lookup<ffi.NativeFunction<_c_free>>('free');
  late final _dart_free _free = _free_ptr.asFunction<_dart_free>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _realloc_ptr = _lookup<ffi.NativeFunction<_c_realloc>>('realloc');
  late final _dart_realloc _realloc = _realloc_ptr.asFunction<_dart_realloc>();

  ffi.Pointer<ffi.Void> valloc(
    int arg0,
  ) {
    return _valloc(
      arg0,
    );
  }

  late final _valloc_ptr = _lookup<ffi.NativeFunction<_c_valloc>>('valloc');
  late final _dart_valloc _valloc = _valloc_ptr.asFunction<_dart_valloc>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc_ptr =
      _lookup<ffi.NativeFunction<_c_aligned_alloc>>('aligned_alloc');
  late final _dart_aligned_alloc _aligned_alloc =
      _aligned_alloc_ptr.asFunction<_dart_aligned_alloc>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign_ptr =
      _lookup<ffi.NativeFunction<_c_posix_memalign>>('posix_memalign');
  late final _dart_posix_memalign _posix_memalign =
      _posix_memalign_ptr.asFunction<_dart_posix_memalign>();

  void abort() {
    return _abort();
  }

  late final _abort_ptr = _lookup<ffi.NativeFunction<_c_abort>>('abort');
  late final _dart_abort _abort = _abort_ptr.asFunction<_dart_abort>();

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _abs_ptr = _lookup<ffi.NativeFunction<_c_abs>>('abs');
  late final _dart_abs _abs = _abs_ptr.asFunction<_dart_abs>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexit_ptr = _lookup<ffi.NativeFunction<_c_atexit>>('atexit');
  late final _dart_atexit _atexit = _atexit_ptr.asFunction<_dart_atexit>();

  double atof(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atof_ptr = _lookup<ffi.NativeFunction<_c_atof>>('atof');
  late final _dart_atof _atof = _atof_ptr.asFunction<_dart_atof>();

  int atoi(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoi_ptr = _lookup<ffi.NativeFunction<_c_atoi>>('atoi');
  late final _dart_atoi _atoi = _atoi_ptr.asFunction<_dart_atoi>();

  int atol(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atol_ptr = _lookup<ffi.NativeFunction<_c_atol>>('atol');
  late final _dart_atol _atol = _atol_ptr.asFunction<_dart_atol>();

  int atoll(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atoll_ptr = _lookup<ffi.NativeFunction<_c_atoll>>('atoll');
  late final _dart_atoll _atoll = _atoll_ptr.asFunction<_dart_atoll>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_7>> __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearch_ptr = _lookup<ffi.NativeFunction<_c_bsearch>>('bsearch');
  late final _dart_bsearch _bsearch = _bsearch_ptr.asFunction<_dart_bsearch>();

  div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _div_ptr = _lookup<ffi.NativeFunction<_c_div>>('div');
  late final _dart_div _div = _div_ptr.asFunction<_dart_div>();

  void exit(
    int arg0,
  ) {
    return _exit(
      arg0,
    );
  }

  late final _exit_ptr = _lookup<ffi.NativeFunction<_c_exit>>('exit');
  late final _dart_exit _exit = _exit_ptr.asFunction<_dart_exit>();

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenv_ptr = _lookup<ffi.NativeFunction<_c_getenv>>('getenv');
  late final _dart_getenv _getenv = _getenv_ptr.asFunction<_dart_getenv>();

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labs_ptr = _lookup<ffi.NativeFunction<_c_labs>>('labs');
  late final _dart_labs _labs = _labs_ptr.asFunction<_dart_labs>();

  ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldiv_ptr = _lookup<ffi.NativeFunction<_c_ldiv>>('ldiv');
  late final _dart_ldiv _ldiv = _ldiv_ptr.asFunction<_dart_ldiv>();

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabs_ptr = _lookup<ffi.NativeFunction<_c_llabs>>('llabs');
  late final _dart_llabs _llabs = _llabs_ptr.asFunction<_dart_llabs>();

  lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldiv_ptr = _lookup<ffi.NativeFunction<_c_lldiv>>('lldiv');
  late final _dart_lldiv _lldiv = _lldiv_ptr.asFunction<_dart_lldiv>();

  int mblen(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblen_ptr = _lookup<ffi.NativeFunction<_c_mblen>>('mblen');
  late final _dart_mblen _mblen = _mblen_ptr.asFunction<_dart_mblen>();

  int mbstowcs(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcs_ptr =
      _lookup<ffi.NativeFunction<_c_mbstowcs>>('mbstowcs');
  late final _dart_mbstowcs _mbstowcs =
      _mbstowcs_ptr.asFunction<_dart_mbstowcs>();

  int mbtowc(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowc_ptr = _lookup<ffi.NativeFunction<_c_mbtowc>>('mbtowc');
  late final _dart_mbtowc _mbtowc = _mbtowc_ptr.asFunction<_dart_mbtowc>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_8>> __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsort_ptr = _lookup<ffi.NativeFunction<_c_qsort>>('qsort');
  late final _dart_qsort _qsort = _qsort_ptr.asFunction<_dart_qsort>();

  int rand() {
    return _rand();
  }

  late final _rand_ptr = _lookup<ffi.NativeFunction<_c_rand>>('rand');
  late final _dart_rand _rand = _rand_ptr.asFunction<_dart_rand>();

  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srand_ptr = _lookup<ffi.NativeFunction<_c_srand>>('srand');
  late final _dart_srand _srand = _srand_ptr.asFunction<_dart_srand>();

  double strtod(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtod_ptr = _lookup<ffi.NativeFunction<_c_strtod>>('strtod');
  late final _dart_strtod _strtod = _strtod_ptr.asFunction<_dart_strtod>();

  double strtof(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtof_ptr = _lookup<ffi.NativeFunction<_c_strtof>>('strtof');
  late final _dart_strtof _strtof = _strtof_ptr.asFunction<_dart_strtof>();

  int strtol(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtol_ptr = _lookup<ffi.NativeFunction<_c_strtol>>('strtol');
  late final _dart_strtol _strtol = _strtol_ptr.asFunction<_dart_strtol>();

  int strtoll(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoll_ptr = _lookup<ffi.NativeFunction<_c_strtoll>>('strtoll');
  late final _dart_strtoll _strtoll = _strtoll_ptr.asFunction<_dart_strtoll>();

  int strtoul(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoul_ptr = _lookup<ffi.NativeFunction<_c_strtoul>>('strtoul');
  late final _dart_strtoul _strtoul = _strtoul_ptr.asFunction<_dart_strtoul>();

  int strtoull(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoull_ptr =
      _lookup<ffi.NativeFunction<_c_strtoull>>('strtoull');
  late final _dart_strtoull _strtoull =
      _strtoull_ptr.asFunction<_dart_strtoull>();

  int system(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _system_ptr = _lookup<ffi.NativeFunction<_c_system>>('system');
  late final _dart_system _system = _system_ptr.asFunction<_dart_system>();

  int wcstombs(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombs_ptr =
      _lookup<ffi.NativeFunction<_c_wcstombs>>('wcstombs');
  late final _dart_wcstombs _wcstombs =
      _wcstombs_ptr.asFunction<_dart_wcstombs>();

  int wctomb(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctomb_ptr = _lookup<ffi.NativeFunction<_c_wctomb>>('wctomb');
  late final _dart_wctomb _wctomb = _wctomb_ptr.asFunction<_dart_wctomb>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __Exit_ptr = _lookup<ffi.NativeFunction<_c__Exit>>('_Exit');
  late final _dart__Exit __Exit = __Exit_ptr.asFunction<_dart__Exit>();

  int a64l(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64l_ptr = _lookup<ffi.NativeFunction<_c_a64l>>('a64l');
  late final _dart_a64l _a64l = _a64l_ptr.asFunction<_dart_a64l>();

  double drand48() {
    return _drand48();
  }

  late final _drand48_ptr = _lookup<ffi.NativeFunction<_c_drand48>>('drand48');
  late final _dart_drand48 _drand48 = _drand48_ptr.asFunction<_dart_drand48>();

  ffi.Pointer<ffi.Int8> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvt_ptr = _lookup<ffi.NativeFunction<_c_ecvt>>('ecvt');
  late final _dart_ecvt _ecvt = _ecvt_ptr.asFunction<_dart_ecvt>();

  double erand48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48_ptr = _lookup<ffi.NativeFunction<_c_erand48>>('erand48');
  late final _dart_erand48 _erand48 = _erand48_ptr.asFunction<_dart_erand48>();

  ffi.Pointer<ffi.Int8> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvt_ptr = _lookup<ffi.NativeFunction<_c_fcvt>>('fcvt');
  late final _dart_fcvt _fcvt = _fcvt_ptr.asFunction<_dart_fcvt>();

  ffi.Pointer<ffi.Int8> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvt_ptr = _lookup<ffi.NativeFunction<_c_gcvt>>('gcvt');
  late final _dart_gcvt _gcvt = _gcvt_ptr.asFunction<_dart_gcvt>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsubopt_ptr =
      _lookup<ffi.NativeFunction<_c_getsubopt>>('getsubopt');
  late final _dart_getsubopt _getsubopt =
      _getsubopt_ptr.asFunction<_dart_getsubopt>();

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantpt_ptr = _lookup<ffi.NativeFunction<_c_grantpt>>('grantpt');
  late final _dart_grantpt _grantpt = _grantpt_ptr.asFunction<_dart_grantpt>();

  ffi.Pointer<ffi.Int8> initstate(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstate_ptr =
      _lookup<ffi.NativeFunction<_c_initstate>>('initstate');
  late final _dart_initstate _initstate =
      _initstate_ptr.asFunction<_dart_initstate>();

  int jrand48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48_ptr = _lookup<ffi.NativeFunction<_c_jrand48>>('jrand48');
  late final _dart_jrand48 _jrand48 = _jrand48_ptr.asFunction<_dart_jrand48>();

  ffi.Pointer<ffi.Int8> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64a_ptr = _lookup<ffi.NativeFunction<_c_l64a>>('l64a');
  late final _dart_l64a _l64a = _l64a_ptr.asFunction<_dart_l64a>();

  void lcong48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48_ptr = _lookup<ffi.NativeFunction<_c_lcong48>>('lcong48');
  late final _dart_lcong48 _lcong48 = _lcong48_ptr.asFunction<_dart_lcong48>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48_ptr = _lookup<ffi.NativeFunction<_c_lrand48>>('lrand48');
  late final _dart_lrand48 _lrand48 = _lrand48_ptr.asFunction<_dart_lrand48>();

  ffi.Pointer<ffi.Int8> mktemp(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktemp_ptr = _lookup<ffi.NativeFunction<_c_mktemp>>('mktemp');
  late final _dart_mktemp _mktemp = _mktemp_ptr.asFunction<_dart_mktemp>();

  int mkstemp(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstemp_ptr = _lookup<ffi.NativeFunction<_c_mkstemp>>('mkstemp');
  late final _dart_mkstemp _mkstemp = _mkstemp_ptr.asFunction<_dart_mkstemp>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48_ptr = _lookup<ffi.NativeFunction<_c_mrand48>>('mrand48');
  late final _dart_mrand48 _mrand48 = _mrand48_ptr.asFunction<_dart_mrand48>();

  int nrand48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48_ptr = _lookup<ffi.NativeFunction<_c_nrand48>>('nrand48');
  late final _dart_nrand48 _nrand48 = _nrand48_ptr.asFunction<_dart_nrand48>();

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openpt_ptr =
      _lookup<ffi.NativeFunction<_c_posix_openpt>>('posix_openpt');
  late final _dart_posix_openpt _posix_openpt =
      _posix_openpt_ptr.asFunction<_dart_posix_openpt>();

  ffi.Pointer<ffi.Int8> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsname_ptr = _lookup<ffi.NativeFunction<_c_ptsname>>('ptsname');
  late final _dart_ptsname _ptsname = _ptsname_ptr.asFunction<_dart_ptsname>();

  int ptsname_r(
    int fildes,
    ffi.Pointer<ffi.Int8> buffer,
    int buflen,
  ) {
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  late final _ptsname_r_ptr =
      _lookup<ffi.NativeFunction<_c_ptsname_r>>('ptsname_r');
  late final _dart_ptsname_r _ptsname_r =
      _ptsname_r_ptr.asFunction<_dart_ptsname_r>();

  int putenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenv_ptr = _lookup<ffi.NativeFunction<_c_putenv>>('putenv');
  late final _dart_putenv _putenv = _putenv_ptr.asFunction<_dart_putenv>();

  int random() {
    return _random();
  }

  late final _random_ptr = _lookup<ffi.NativeFunction<_c_random>>('random');
  late final _dart_random _random = _random_ptr.asFunction<_dart_random>();

  int rand_r(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_r_ptr = _lookup<ffi.NativeFunction<_c_rand_r>>('rand_r');
  late final _dart_rand_r _rand_r = _rand_r_ptr.asFunction<_dart_rand_r>();

  ffi.Pointer<ffi.Int8> realpath(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpath_ptr =
      _lookup<ffi.NativeFunction<_c_realpath>>('realpath');
  late final _dart_realpath _realpath =
      _realpath_ptr.asFunction<_dart_realpath>();

  ffi.Pointer<ffi.Uint16> seed48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48_ptr = _lookup<ffi.NativeFunction<_c_seed48>>('seed48');
  late final _dart_seed48 _seed48 = _seed48_ptr.asFunction<_dart_seed48>();

  int setenv(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenv_ptr = _lookup<ffi.NativeFunction<_c_setenv>>('setenv');
  late final _dart_setenv _setenv = _setenv_ptr.asFunction<_dart_setenv>();

  void setkey(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkey_ptr = _lookup<ffi.NativeFunction<_c_setkey>>('setkey');
  late final _dart_setkey _setkey = _setkey_ptr.asFunction<_dart_setkey>();

  ffi.Pointer<ffi.Int8> setstate(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstate_ptr =
      _lookup<ffi.NativeFunction<_c_setstate>>('setstate');
  late final _dart_setstate _setstate =
      _setstate_ptr.asFunction<_dart_setstate>();

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48_ptr = _lookup<ffi.NativeFunction<_c_srand48>>('srand48');
  late final _dart_srand48 _srand48 = _srand48_ptr.asFunction<_dart_srand48>();

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandom_ptr = _lookup<ffi.NativeFunction<_c_srandom>>('srandom');
  late final _dart_srandom _srandom = _srandom_ptr.asFunction<_dart_srandom>();

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockpt_ptr =
      _lookup<ffi.NativeFunction<_c_unlockpt>>('unlockpt');
  late final _dart_unlockpt _unlockpt =
      _unlockpt_ptr.asFunction<_dart_unlockpt>();

  int unsetenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenv_ptr =
      _lookup<ffi.NativeFunction<_c_unsetenv>>('unsetenv');
  late final _dart_unsetenv _unsetenv =
      _unsetenv_ptr.asFunction<_dart_unsetenv>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4random_ptr =
      _lookup<ffi.NativeFunction<_c_arc4random>>('arc4random');
  late final _dart_arc4random _arc4random =
      _arc4random_ptr.asFunction<_dart_arc4random>();

  void arc4random_addrandom(
    ffi.Pointer<ffi.Uint8> arg0,
    int arg1,
  ) {
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  late final _arc4random_addrandom_ptr =
      _lookup<ffi.NativeFunction<_c_arc4random_addrandom>>(
          'arc4random_addrandom');
  late final _dart_arc4random_addrandom _arc4random_addrandom =
      _arc4random_addrandom_ptr.asFunction<_dart_arc4random_addrandom>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  late final _arc4random_buf_ptr =
      _lookup<ffi.NativeFunction<_c_arc4random_buf>>('arc4random_buf');
  late final _dart_arc4random_buf _arc4random_buf =
      _arc4random_buf_ptr.asFunction<_dart_arc4random_buf>();

  void arc4random_stir() {
    return _arc4random_stir();
  }

  late final _arc4random_stir_ptr =
      _lookup<ffi.NativeFunction<_c_arc4random_stir>>('arc4random_stir');
  late final _dart_arc4random_stir _arc4random_stir =
      _arc4random_stir_ptr.asFunction<_dart_arc4random_stir>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniform_ptr =
      _lookup<ffi.NativeFunction<_c_arc4random_uniform>>('arc4random_uniform');
  late final _dart_arc4random_uniform _arc4random_uniform =
      _arc4random_uniform_ptr.asFunction<_dart_arc4random_uniform>();

  ffi.Pointer<ffi.Int8> cgetcap(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetcap_ptr = _lookup<ffi.NativeFunction<_c_cgetcap>>('cgetcap');
  late final _dart_cgetcap _cgetcap = _cgetcap_ptr.asFunction<_dart_cgetcap>();

  int cgetclose() {
    return _cgetclose();
  }

  late final _cgetclose_ptr =
      _lookup<ffi.NativeFunction<_c_cgetclose>>('cgetclose');
  late final _dart_cgetclose _cgetclose =
      _cgetclose_ptr.asFunction<_dart_cgetclose>();

  int cgetent(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetent_ptr = _lookup<ffi.NativeFunction<_c_cgetent>>('cgetent');
  late final _dart_cgetent _cgetent = _cgetent_ptr.asFunction<_dart_cgetent>();

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  late final _cgetfirst_ptr =
      _lookup<ffi.NativeFunction<_c_cgetfirst>>('cgetfirst');
  late final _dart_cgetfirst _cgetfirst =
      _cgetfirst_ptr.asFunction<_dart_cgetfirst>();

  int cgetmatch(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  late final _cgetmatch_ptr =
      _lookup<ffi.NativeFunction<_c_cgetmatch>>('cgetmatch');
  late final _dart_cgetmatch _cgetmatch =
      _cgetmatch_ptr.asFunction<_dart_cgetmatch>();

  int cgetnext(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  late final _cgetnext_ptr =
      _lookup<ffi.NativeFunction<_c_cgetnext>>('cgetnext');
  late final _dart_cgetnext _cgetnext =
      _cgetnext_ptr.asFunction<_dart_cgetnext>();

  int cgetnum(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int64> arg2,
  ) {
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetnum_ptr = _lookup<ffi.NativeFunction<_c_cgetnum>>('cgetnum');
  late final _dart_cgetnum _cgetnum = _cgetnum_ptr.asFunction<_dart_cgetnum>();

  int cgetset(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _cgetset(
      arg0,
    );
  }

  late final _cgetset_ptr = _lookup<ffi.NativeFunction<_c_cgetset>>('cgetset');
  late final _dart_cgetset _cgetset = _cgetset_ptr.asFunction<_dart_cgetset>();

  int cgetstr(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetstr_ptr = _lookup<ffi.NativeFunction<_c_cgetstr>>('cgetstr');
  late final _dart_cgetstr _cgetstr = _cgetstr_ptr.asFunction<_dart_cgetstr>();

  int cgetustr(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetustr_ptr =
      _lookup<ffi.NativeFunction<_c_cgetustr>>('cgetustr');
  late final _dart_cgetustr _cgetustr =
      _cgetustr_ptr.asFunction<_dart_cgetustr>();

  int daemon(
    int arg0,
    int arg1,
  ) {
    return _daemon(
      arg0,
      arg1,
    );
  }

  late final _daemon_ptr = _lookup<ffi.NativeFunction<_c_daemon>>('daemon');
  late final _dart_daemon _daemon = _daemon_ptr.asFunction<_dart_daemon>();

  ffi.Pointer<ffi.Int8> devname(
    int arg0,
    int arg1,
  ) {
    return _devname(
      arg0,
      arg1,
    );
  }

  late final _devname_ptr = _lookup<ffi.NativeFunction<_c_devname>>('devname');
  late final _dart_devname _devname = _devname_ptr.asFunction<_dart_devname>();

  ffi.Pointer<ffi.Int8> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> buf,
    int len,
  ) {
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  late final _devname_r_ptr =
      _lookup<ffi.NativeFunction<_c_devname_r>>('devname_r');
  late final _dart_devname_r _devname_r =
      _devname_r_ptr.asFunction<_dart_devname_r>();

  ffi.Pointer<ffi.Int8> getbsize(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    return _getbsize(
      arg0,
      arg1,
    );
  }

  late final _getbsize_ptr =
      _lookup<ffi.NativeFunction<_c_getbsize>>('getbsize');
  late final _dart_getbsize _getbsize =
      _getbsize_ptr.asFunction<_dart_getbsize>();

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  late final _getloadavg_ptr =
      _lookup<ffi.NativeFunction<_c_getloadavg>>('getloadavg');
  late final _dart_getloadavg _getloadavg =
      _getloadavg_ptr.asFunction<_dart_getloadavg>();

  ffi.Pointer<ffi.Int8> getprogname() {
    return _getprogname();
  }

  late final _getprogname_ptr =
      _lookup<ffi.NativeFunction<_c_getprogname>>('getprogname');
  late final _dart_getprogname _getprogname =
      _getprogname_ptr.asFunction<_dart_getprogname>();

  void setprogname(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _setprogname(
      arg0,
    );
  }

  late final _setprogname_ptr =
      _lookup<ffi.NativeFunction<_c_setprogname>>('setprogname');
  late final _dart_setprogname _setprogname =
      _setprogname_ptr.asFunction<_dart_setprogname>();

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_9>> __compar,
  ) {
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _heapsort_ptr =
      _lookup<ffi.NativeFunction<_c_heapsort>>('heapsort');
  late final _dart_heapsort _heapsort =
      _heapsort_ptr.asFunction<_dart_heapsort>();

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_10>> __compar,
  ) {
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _mergesort_ptr =
      _lookup<ffi.NativeFunction<_c_mergesort>>('mergesort');
  late final _dart_mergesort _mergesort =
      _mergesort_ptr.asFunction<_dart_mergesort>();

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_11>> __compar,
  ) {
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _psort_ptr = _lookup<ffi.NativeFunction<_c_psort>>('psort');
  late final _dart_psort _psort = _psort_ptr.asFunction<_dart_psort>();

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.NativeFunction<_typedefC_12>> __compar,
  ) {
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _psort_r_ptr = _lookup<ffi.NativeFunction<_c_psort_r>>('psort_r');
  late final _dart_psort_r _psort_r = _psort_r_ptr.asFunction<_dart_psort_r>();

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.NativeFunction<_typedefC_13>> __compar,
  ) {
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _qsort_r_ptr = _lookup<ffi.NativeFunction<_c_qsort_r>>('qsort_r');
  late final _dart_qsort_r _qsort_r = _qsort_r_ptr.asFunction<_dart_qsort_r>();

  int radixsort(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
    int __nel,
    ffi.Pointer<ffi.Uint8> __table,
    int __endbyte,
  ) {
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _radixsort_ptr =
      _lookup<ffi.NativeFunction<_c_radixsort>>('radixsort');
  late final _dart_radixsort _radixsort =
      _radixsort_ptr.asFunction<_dart_radixsort>();

  int rpmatch(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _rpmatch(
      arg0,
    );
  }

  late final _rpmatch_ptr = _lookup<ffi.NativeFunction<_c_rpmatch>>('rpmatch');
  late final _dart_rpmatch _rpmatch = _rpmatch_ptr.asFunction<_dart_rpmatch>();

  int sradixsort(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
    int __nel,
    ffi.Pointer<ffi.Uint8> __table,
    int __endbyte,
  ) {
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _sradixsort_ptr =
      _lookup<ffi.NativeFunction<_c_sradixsort>>('sradixsort');
  late final _dart_sradixsort _sradixsort =
      _sradixsort_ptr.asFunction<_dart_sradixsort>();

  void sranddev() {
    return _sranddev();
  }

  late final _sranddev_ptr =
      _lookup<ffi.NativeFunction<_c_sranddev>>('sranddev');
  late final _dart_sranddev _sranddev =
      _sranddev_ptr.asFunction<_dart_sranddev>();

  void srandomdev() {
    return _srandomdev();
  }

  late final _srandomdev_ptr =
      _lookup<ffi.NativeFunction<_c_srandomdev>>('srandomdev');
  late final _dart_srandomdev _srandomdev =
      _srandomdev_ptr.asFunction<_dart_srandomdev>();

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocf_ptr =
      _lookup<ffi.NativeFunction<_c_reallocf>>('reallocf');
  late final _dart_reallocf _reallocf =
      _reallocf_ptr.asFunction<_dart_reallocf>();

  int strtonum(
    ffi.Pointer<ffi.Int8> __numstr,
    int __minval,
    int __maxval,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __errstrp,
  ) {
    return _strtonum(
      __numstr,
      __minval,
      __maxval,
      __errstrp,
    );
  }

  late final _strtonum_ptr =
      _lookup<ffi.NativeFunction<_c_strtonum>>('strtonum');
  late final _dart_strtonum _strtonum =
      _strtonum_ptr.asFunction<_dart_strtonum>();

  int strtoq(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoq_ptr = _lookup<ffi.NativeFunction<_c_strtoq>>('strtoq');
  late final _dart_strtoq _strtoq = _strtoq_ptr.asFunction<_dart_strtoq>();

  int strtouq(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtouq_ptr = _lookup<ffi.NativeFunction<_c_strtouq>>('strtouq');
  late final _dart_strtouq _strtouq = _strtouq_ptr.asFunction<_dart_strtouq>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Int8>>('suboptarg');

  ffi.Pointer<ffi.Int8> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Int8> value) => _suboptarg.value = value;

  /// Creates a block of data from a byte array.
  ffi.Pointer<ffi.Void> TWDataCreateWithBytes(
    ffi.Pointer<ffi.Uint8> bytes,
    int size,
  ) {
    return _TWDataCreateWithBytes(
      bytes,
      size,
    );
  }

  late final _TWDataCreateWithBytes_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataCreateWithBytes>>(
          'TWDataCreateWithBytes');
  late final _dart_TWDataCreateWithBytes _TWDataCreateWithBytes =
      _TWDataCreateWithBytes_ptr.asFunction<_dart_TWDataCreateWithBytes>();

  /// Creates an uninitialized block of data with the provided size.
  ffi.Pointer<ffi.Void> TWDataCreateWithSize(
    int size,
  ) {
    return _TWDataCreateWithSize(
      size,
    );
  }

  late final _TWDataCreateWithSize_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataCreateWithSize>>(
          'TWDataCreateWithSize');
  late final _dart_TWDataCreateWithSize _TWDataCreateWithSize =
      _TWDataCreateWithSize_ptr.asFunction<_dart_TWDataCreateWithSize>();

  /// Creates a block of data by copying another block of data.
  ffi.Pointer<ffi.Void> TWDataCreateWithData(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWDataCreateWithData(
      data,
    );
  }

  late final _TWDataCreateWithData_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataCreateWithData>>(
          'TWDataCreateWithData');
  late final _dart_TWDataCreateWithData _TWDataCreateWithData =
      _TWDataCreateWithData_ptr.asFunction<_dart_TWDataCreateWithData>();

  /// Creates a block of data from a hexadecimal string.  Odd length is invalid (intended grouping to bytes is not obvious).
  ffi.Pointer<ffi.Void> TWDataCreateWithHexString(
    ffi.Pointer<ffi.Void> hex,
  ) {
    return _TWDataCreateWithHexString(
      hex,
    );
  }

  late final _TWDataCreateWithHexString_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataCreateWithHexString>>(
          'TWDataCreateWithHexString');
  late final _dart_TWDataCreateWithHexString _TWDataCreateWithHexString =
      _TWDataCreateWithHexString_ptr.asFunction<
          _dart_TWDataCreateWithHexString>();

  /// Returns the size in bytes.
  int TWDataSize(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWDataSize(
      data,
    );
  }

  late final _TWDataSize_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataSize>>('TWDataSize');
  late final _dart_TWDataSize _TWDataSize =
      _TWDataSize_ptr.asFunction<_dart_TWDataSize>();

  /// Returns the raw pointer to the contents of data.
  ffi.Pointer<ffi.Uint8> TWDataBytes(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWDataBytes(
      data,
    );
  }

  late final _TWDataBytes_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataBytes>>('TWDataBytes');
  late final _dart_TWDataBytes _TWDataBytes =
      _TWDataBytes_ptr.asFunction<_dart_TWDataBytes>();

  /// Returns the byte at the provided index.
  int TWDataGet(
    ffi.Pointer<ffi.Void> data,
    int index,
  ) {
    return _TWDataGet(
      data,
      index,
    );
  }

  late final _TWDataGet_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataGet>>('TWDataGet');
  late final _dart_TWDataGet _TWDataGet =
      _TWDataGet_ptr.asFunction<_dart_TWDataGet>();

  /// Sets the byte at the provided index.
  void TWDataSet(
    ffi.Pointer<ffi.Void> data,
    int index,
    int byte,
  ) {
    return _TWDataSet(
      data,
      index,
      byte,
    );
  }

  late final _TWDataSet_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataSet>>('TWDataSet');
  late final _dart_TWDataSet _TWDataSet =
      _TWDataSet_ptr.asFunction<_dart_TWDataSet>();

  /// Copies a range of bytes into the provided buffer.
  void TWDataCopyBytes(
    ffi.Pointer<ffi.Void> data,
    int start,
    int size,
    ffi.Pointer<ffi.Uint8> output,
  ) {
    return _TWDataCopyBytes(
      data,
      start,
      size,
      output,
    );
  }

  late final _TWDataCopyBytes_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataCopyBytes>>('TWDataCopyBytes');
  late final _dart_TWDataCopyBytes _TWDataCopyBytes =
      _TWDataCopyBytes_ptr.asFunction<_dart_TWDataCopyBytes>();

  /// Replaces a range of bytes with the contents of the provided buffer.
  void TWDataReplaceBytes(
    ffi.Pointer<ffi.Void> data,
    int start,
    int size,
    ffi.Pointer<ffi.Uint8> bytes,
  ) {
    return _TWDataReplaceBytes(
      data,
      start,
      size,
      bytes,
    );
  }

  late final _TWDataReplaceBytes_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataReplaceBytes>>('TWDataReplaceBytes');
  late final _dart_TWDataReplaceBytes _TWDataReplaceBytes =
      _TWDataReplaceBytes_ptr.asFunction<_dart_TWDataReplaceBytes>();

  /// Appends data from a byte array.
  void TWDataAppendBytes(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Uint8> bytes,
    int size,
  ) {
    return _TWDataAppendBytes(
      data,
      bytes,
      size,
    );
  }

  late final _TWDataAppendBytes_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataAppendBytes>>('TWDataAppendBytes');
  late final _dart_TWDataAppendBytes _TWDataAppendBytes =
      _TWDataAppendBytes_ptr.asFunction<_dart_TWDataAppendBytes>();

  /// Appends a single byte.
  void TWDataAppendByte(
    ffi.Pointer<ffi.Void> data,
    int byte,
  ) {
    return _TWDataAppendByte(
      data,
      byte,
    );
  }

  late final _TWDataAppendByte_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataAppendByte>>('TWDataAppendByte');
  late final _dart_TWDataAppendByte _TWDataAppendByte =
      _TWDataAppendByte_ptr.asFunction<_dart_TWDataAppendByte>();

  /// Appends a block of data.
  void TWDataAppendData(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> append,
  ) {
    return _TWDataAppendData(
      data,
      append,
    );
  }

  late final _TWDataAppendData_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataAppendData>>('TWDataAppendData');
  late final _dart_TWDataAppendData _TWDataAppendData =
      _TWDataAppendData_ptr.asFunction<_dart_TWDataAppendData>();

  /// Revereses the bytes.
  void TWDataReverse(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWDataReverse(
      data,
    );
  }

  late final _TWDataReverse_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataReverse>>('TWDataReverse');
  late final _dart_TWDataReverse _TWDataReverse =
      _TWDataReverse_ptr.asFunction<_dart_TWDataReverse>();

  /// Sets all bytes to the given value.
  void TWDataReset(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWDataReset(
      data,
    );
  }

  late final _TWDataReset_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataReset>>('TWDataReset');
  late final _dart_TWDataReset _TWDataReset =
      _TWDataReset_ptr.asFunction<_dart_TWDataReset>();

  /// Deletes a block of data created with a `TWDataCreate*` method.
  void TWDataDelete(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWDataDelete(
      data,
    );
  }

  late final _TWDataDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataDelete>>('TWDataDelete');
  late final _dart_TWDataDelete _TWDataDelete =
      _TWDataDelete_ptr.asFunction<_dart_TWDataDelete>();

  /// Determines whether two data blocks are equal.
  bool TWDataEqual(
    ffi.Pointer<ffi.Void> lhs,
    ffi.Pointer<ffi.Void> rhs,
  ) {
    return _TWDataEqual(
          lhs,
          rhs,
        ) !=
        0;
  }

  late final _TWDataEqual_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataEqual>>('TWDataEqual');
  late final _dart_TWDataEqual _TWDataEqual =
      _TWDataEqual_ptr.asFunction<_dart_TWDataEqual>();

  bool TWHDVersionIsPublic(
    int version,
  ) {
    return _TWHDVersionIsPublic(
          version,
        ) !=
        0;
  }

  late final _TWHDVersionIsPublic_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDVersionIsPublic>>(
          'TWHDVersionIsPublic');
  late final _dart_TWHDVersionIsPublic _TWHDVersionIsPublic =
      _TWHDVersionIsPublic_ptr.asFunction<_dart_TWHDVersionIsPublic>();

  bool TWHDVersionIsPrivate(
    int version,
  ) {
    return _TWHDVersionIsPrivate(
          version,
        ) !=
        0;
  }

  late final _TWHDVersionIsPrivate_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDVersionIsPrivate>>(
          'TWHDVersionIsPrivate');
  late final _dart_TWHDVersionIsPrivate _TWHDVersionIsPrivate =
      _TWHDVersionIsPrivate_ptr.asFunction<_dart_TWHDVersionIsPrivate>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_BITCOIN =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_BITCOIN');

  ffi.Pointer<ffi.Int8> get HRP_BITCOIN => _HRP_BITCOIN.value;

  set HRP_BITCOIN(ffi.Pointer<ffi.Int8> value) => _HRP_BITCOIN.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_LITECOIN =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_LITECOIN');

  ffi.Pointer<ffi.Int8> get HRP_LITECOIN => _HRP_LITECOIN.value;

  set HRP_LITECOIN(ffi.Pointer<ffi.Int8> value) => _HRP_LITECOIN.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_VIACOIN =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_VIACOIN');

  ffi.Pointer<ffi.Int8> get HRP_VIACOIN => _HRP_VIACOIN.value;

  set HRP_VIACOIN(ffi.Pointer<ffi.Int8> value) => _HRP_VIACOIN.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_GROESTLCOIN =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_GROESTLCOIN');

  ffi.Pointer<ffi.Int8> get HRP_GROESTLCOIN => _HRP_GROESTLCOIN.value;

  set HRP_GROESTLCOIN(ffi.Pointer<ffi.Int8> value) =>
      _HRP_GROESTLCOIN.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_DIGIBYTE =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_DIGIBYTE');

  ffi.Pointer<ffi.Int8> get HRP_DIGIBYTE => _HRP_DIGIBYTE.value;

  set HRP_DIGIBYTE(ffi.Pointer<ffi.Int8> value) => _HRP_DIGIBYTE.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_MONACOIN =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_MONACOIN');

  ffi.Pointer<ffi.Int8> get HRP_MONACOIN => _HRP_MONACOIN.value;

  set HRP_MONACOIN(ffi.Pointer<ffi.Int8> value) => _HRP_MONACOIN.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_COSMOS =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_COSMOS');

  ffi.Pointer<ffi.Int8> get HRP_COSMOS => _HRP_COSMOS.value;

  set HRP_COSMOS(ffi.Pointer<ffi.Int8> value) => _HRP_COSMOS.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_BITCOINCASH =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_BITCOINCASH');

  ffi.Pointer<ffi.Int8> get HRP_BITCOINCASH => _HRP_BITCOINCASH.value;

  set HRP_BITCOINCASH(ffi.Pointer<ffi.Int8> value) =>
      _HRP_BITCOINCASH.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_BITCOINGOLD =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_BITCOINGOLD');

  ffi.Pointer<ffi.Int8> get HRP_BITCOINGOLD => _HRP_BITCOINGOLD.value;

  set HRP_BITCOINGOLD(ffi.Pointer<ffi.Int8> value) =>
      _HRP_BITCOINGOLD.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_IOTEX =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_IOTEX');

  ffi.Pointer<ffi.Int8> get HRP_IOTEX => _HRP_IOTEX.value;

  set HRP_IOTEX(ffi.Pointer<ffi.Int8> value) => _HRP_IOTEX.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_ZILLIQA =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_ZILLIQA');

  ffi.Pointer<ffi.Int8> get HRP_ZILLIQA => _HRP_ZILLIQA.value;

  set HRP_ZILLIQA(ffi.Pointer<ffi.Int8> value) => _HRP_ZILLIQA.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_TERRA =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_TERRA');

  ffi.Pointer<ffi.Int8> get HRP_TERRA => _HRP_TERRA.value;

  set HRP_TERRA(ffi.Pointer<ffi.Int8> value) => _HRP_TERRA.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_CRYPTOORG =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_CRYPTOORG');

  ffi.Pointer<ffi.Int8> get HRP_CRYPTOORG => _HRP_CRYPTOORG.value;

  set HRP_CRYPTOORG(ffi.Pointer<ffi.Int8> value) =>
      _HRP_CRYPTOORG.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_KAVA =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_KAVA');

  ffi.Pointer<ffi.Int8> get HRP_KAVA => _HRP_KAVA.value;

  set HRP_KAVA(ffi.Pointer<ffi.Int8> value) => _HRP_KAVA.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_OASIS =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_OASIS');

  ffi.Pointer<ffi.Int8> get HRP_OASIS => _HRP_OASIS.value;

  set HRP_OASIS(ffi.Pointer<ffi.Int8> value) => _HRP_OASIS.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_BLUZELLE =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_BLUZELLE');

  ffi.Pointer<ffi.Int8> get HRP_BLUZELLE => _HRP_BLUZELLE.value;

  set HRP_BLUZELLE(ffi.Pointer<ffi.Int8> value) => _HRP_BLUZELLE.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_BAND =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_BAND');

  ffi.Pointer<ffi.Int8> get HRP_BAND => _HRP_BAND.value;

  set HRP_BAND(ffi.Pointer<ffi.Int8> value) => _HRP_BAND.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_ELROND =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_ELROND');

  ffi.Pointer<ffi.Int8> get HRP_ELROND => _HRP_ELROND.value;

  set HRP_ELROND(ffi.Pointer<ffi.Int8> value) => _HRP_ELROND.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_BINANCE =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_BINANCE');

  ffi.Pointer<ffi.Int8> get HRP_BINANCE => _HRP_BINANCE.value;

  set HRP_BINANCE(ffi.Pointer<ffi.Int8> value) => _HRP_BINANCE.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_ECASH =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_ECASH');

  ffi.Pointer<ffi.Int8> get HRP_ECASH => _HRP_ECASH.value;

  set HRP_ECASH(ffi.Pointer<ffi.Int8> value) => _HRP_ECASH.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_THORCHAIN =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_THORCHAIN');

  ffi.Pointer<ffi.Int8> get HRP_THORCHAIN => _HRP_THORCHAIN.value;

  set HRP_THORCHAIN(ffi.Pointer<ffi.Int8> value) =>
      _HRP_THORCHAIN.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_HARMONY =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_HARMONY');

  ffi.Pointer<ffi.Int8> get HRP_HARMONY => _HRP_HARMONY.value;

  set HRP_HARMONY(ffi.Pointer<ffi.Int8> value) => _HRP_HARMONY.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_CARDANO =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_CARDANO');

  ffi.Pointer<ffi.Int8> get HRP_CARDANO => _HRP_CARDANO.value;

  set HRP_CARDANO(ffi.Pointer<ffi.Int8> value) => _HRP_CARDANO.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_QTUM =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_QTUM');

  ffi.Pointer<ffi.Int8> get HRP_QTUM => _HRP_QTUM.value;

  set HRP_QTUM(ffi.Pointer<ffi.Int8> value) => _HRP_QTUM.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _HRP_OSMOSIS =
      _lookup<ffi.Pointer<ffi.Int8>>('HRP_OSMOSIS');

  ffi.Pointer<ffi.Int8> get HRP_OSMOSIS => _HRP_OSMOSIS.value;

  set HRP_OSMOSIS(ffi.Pointer<ffi.Int8> value) => _HRP_OSMOSIS.value = value;

  ffi.Pointer<ffi.Int8> stringForHRP(
    int hrp,
  ) {
    return _stringForHRP(
      hrp,
    );
  }

  late final _stringForHRP_ptr =
      _lookup<ffi.NativeFunction<_c_stringForHRP>>('stringForHRP');
  late final _dart_stringForHRP _stringForHRP =
      _stringForHRP_ptr.asFunction<_dart_stringForHRP>();

  int hrpForString(
    ffi.Pointer<ffi.Int8> string,
  ) {
    return _hrpForString(
      string,
    );
  }

  late final _hrpForString_ptr =
      _lookup<ffi.NativeFunction<_c_hrpForString>>('hrpForString');
  late final _dart_hrpForString _hrpForString =
      _hrpForString_ptr.asFunction<_dart_hrpForString>();

  /// Creates a string from a null-terminated UTF8 byte array. It must be deleted at the end.
  ffi.Pointer<ffi.Void> TWStringCreateWithUTF8Bytes(
    ffi.Pointer<ffi.Int8> bytes,
  ) {
    return _TWStringCreateWithUTF8Bytes(
      bytes,
    );
  }

  late final _TWStringCreateWithUTF8Bytes_ptr =
      _lookup<ffi.NativeFunction<_c_TWStringCreateWithUTF8Bytes>>(
          'TWStringCreateWithUTF8Bytes');
  late final _dart_TWStringCreateWithUTF8Bytes _TWStringCreateWithUTF8Bytes =
      _TWStringCreateWithUTF8Bytes_ptr.asFunction<
          _dart_TWStringCreateWithUTF8Bytes>();

  /// Creates a string from a raw byte array and size.
  ffi.Pointer<ffi.Void> TWStringCreateWithRawBytes(
    ffi.Pointer<ffi.Uint8> bytes,
    int size,
  ) {
    return _TWStringCreateWithRawBytes(
      bytes,
      size,
    );
  }

  late final _TWStringCreateWithRawBytes_ptr =
      _lookup<ffi.NativeFunction<_c_TWStringCreateWithRawBytes>>(
          'TWStringCreateWithRawBytes');
  late final _dart_TWStringCreateWithRawBytes _TWStringCreateWithRawBytes =
      _TWStringCreateWithRawBytes_ptr.asFunction<
          _dart_TWStringCreateWithRawBytes>();

  /// Creates a hexadecimal string from a block of data. It must be deleted at the end.
  ffi.Pointer<ffi.Void> TWStringCreateWithHexData(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWStringCreateWithHexData(
      data,
    );
  }

  late final _TWStringCreateWithHexData_ptr =
      _lookup<ffi.NativeFunction<_c_TWStringCreateWithHexData>>(
          'TWStringCreateWithHexData');
  late final _dart_TWStringCreateWithHexData _TWStringCreateWithHexData =
      _TWStringCreateWithHexData_ptr.asFunction<
          _dart_TWStringCreateWithHexData>();

  /// Returns the string size in bytes.
  int TWStringSize(
    ffi.Pointer<ffi.Void> string,
  ) {
    return _TWStringSize(
      string,
    );
  }

  late final _TWStringSize_ptr =
      _lookup<ffi.NativeFunction<_c_TWStringSize>>('TWStringSize');
  late final _dart_TWStringSize _TWStringSize =
      _TWStringSize_ptr.asFunction<_dart_TWStringSize>();

  /// Returns the byte at the provided index.
  int TWStringGet(
    ffi.Pointer<ffi.Void> string,
    int index,
  ) {
    return _TWStringGet(
      string,
      index,
    );
  }

  late final _TWStringGet_ptr =
      _lookup<ffi.NativeFunction<_c_TWStringGet>>('TWStringGet');
  late final _dart_TWStringGet _TWStringGet =
      _TWStringGet_ptr.asFunction<_dart_TWStringGet>();

  /// Returns the raw pointer to the string's UTF8 bytes (null-terminated).
  ffi.Pointer<ffi.Int8> TWStringUTF8Bytes(
    ffi.Pointer<ffi.Void> string,
  ) {
    return _TWStringUTF8Bytes(
      string,
    );
  }

  late final _TWStringUTF8Bytes_ptr =
      _lookup<ffi.NativeFunction<_c_TWStringUTF8Bytes>>('TWStringUTF8Bytes');
  late final _dart_TWStringUTF8Bytes _TWStringUTF8Bytes =
      _TWStringUTF8Bytes_ptr.asFunction<_dart_TWStringUTF8Bytes>();

  /// Deletes a string created with a `TWStringCreate*` method.  After delete it must not be used (can segfault)!
  void TWStringDelete(
    ffi.Pointer<ffi.Void> string,
  ) {
    return _TWStringDelete(
      string,
    );
  }

  late final _TWStringDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWStringDelete>>('TWStringDelete');
  late final _dart_TWStringDelete _TWStringDelete =
      _TWStringDelete_ptr.asFunction<_dart_TWStringDelete>();

  /// Determines whether two string blocks are equal.
  bool TWStringEqual(
    ffi.Pointer<ffi.Void> lhs,
    ffi.Pointer<ffi.Void> rhs,
  ) {
    return _TWStringEqual(
          lhs,
          rhs,
        ) !=
        0;
  }

  late final _TWStringEqual_ptr =
      _lookup<ffi.NativeFunction<_c_TWStringEqual>>('TWStringEqual');
  late final _dart_TWStringEqual _TWStringEqual =
      _TWStringEqual_ptr.asFunction<_dart_TWStringEqual>();

  late final ffi.Pointer<ffi.Uint64> _TWPublicKeyCompressedSize =
      _lookup<ffi.Uint64>('TWPublicKeyCompressedSize');

  int get TWPublicKeyCompressedSize => _TWPublicKeyCompressedSize.value;

  set TWPublicKeyCompressedSize(int value) =>
      _TWPublicKeyCompressedSize.value = value;

  late final ffi.Pointer<ffi.Uint64> _TWPublicKeyUncompressedSize =
      _lookup<ffi.Uint64>('TWPublicKeyUncompressedSize');

  int get TWPublicKeyUncompressedSize => _TWPublicKeyUncompressedSize.value;

  set TWPublicKeyUncompressedSize(int value) =>
      _TWPublicKeyUncompressedSize.value = value;

  ffi.Pointer<TWPublicKey> TWPublicKeyCreateWithData(
    ffi.Pointer<ffi.Void> data,
    int type,
  ) {
    return _TWPublicKeyCreateWithData(
      data,
      type,
    );
  }

  late final _TWPublicKeyCreateWithData_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyCreateWithData>>(
          'TWPublicKeyCreateWithData');
  late final _dart_TWPublicKeyCreateWithData _TWPublicKeyCreateWithData =
      _TWPublicKeyCreateWithData_ptr.asFunction<
          _dart_TWPublicKeyCreateWithData>();

  void TWPublicKeyDelete(
    ffi.Pointer<TWPublicKey> pk,
  ) {
    return _TWPublicKeyDelete(
      pk,
    );
  }

  late final _TWPublicKeyDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyDelete>>('TWPublicKeyDelete');
  late final _dart_TWPublicKeyDelete _TWPublicKeyDelete =
      _TWPublicKeyDelete_ptr.asFunction<_dart_TWPublicKeyDelete>();

  bool TWPublicKeyIsValid(
    ffi.Pointer<ffi.Void> data,
    int type,
  ) {
    return _TWPublicKeyIsValid(
          data,
          type,
        ) !=
        0;
  }

  late final _TWPublicKeyIsValid_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyIsValid>>('TWPublicKeyIsValid');
  late final _dart_TWPublicKeyIsValid _TWPublicKeyIsValid =
      _TWPublicKeyIsValid_ptr.asFunction<_dart_TWPublicKeyIsValid>();

  bool TWPublicKeyIsCompressed(
    ffi.Pointer<TWPublicKey> pk,
  ) {
    return _TWPublicKeyIsCompressed(
          pk,
        ) !=
        0;
  }

  late final _TWPublicKeyIsCompressed_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyIsCompressed>>(
          'TWPublicKeyIsCompressed');
  late final _dart_TWPublicKeyIsCompressed _TWPublicKeyIsCompressed =
      _TWPublicKeyIsCompressed_ptr.asFunction<_dart_TWPublicKeyIsCompressed>();

  ffi.Pointer<TWPublicKey> TWPublicKeyCompressed(
    ffi.Pointer<TWPublicKey> from,
  ) {
    return _TWPublicKeyCompressed(
      from,
    );
  }

  late final _TWPublicKeyCompressed_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyCompressed>>(
          'TWPublicKeyCompressed');
  late final _dart_TWPublicKeyCompressed _TWPublicKeyCompressed =
      _TWPublicKeyCompressed_ptr.asFunction<_dart_TWPublicKeyCompressed>();

  ffi.Pointer<TWPublicKey> TWPublicKeyUncompressed(
    ffi.Pointer<TWPublicKey> from,
  ) {
    return _TWPublicKeyUncompressed(
      from,
    );
  }

  late final _TWPublicKeyUncompressed_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyUncompressed>>(
          'TWPublicKeyUncompressed');
  late final _dart_TWPublicKeyUncompressed _TWPublicKeyUncompressed =
      _TWPublicKeyUncompressed_ptr.asFunction<_dart_TWPublicKeyUncompressed>();

  ffi.Pointer<ffi.Void> TWPublicKeyData(
    ffi.Pointer<TWPublicKey> pk,
  ) {
    return _TWPublicKeyData(
      pk,
    );
  }

  late final _TWPublicKeyData_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyData>>('TWPublicKeyData');
  late final _dart_TWPublicKeyData _TWPublicKeyData =
      _TWPublicKeyData_ptr.asFunction<_dart_TWPublicKeyData>();

  bool TWPublicKeyVerify(
    ffi.Pointer<TWPublicKey> pk,
    ffi.Pointer<ffi.Void> signature,
    ffi.Pointer<ffi.Void> message,
  ) {
    return _TWPublicKeyVerify(
          pk,
          signature,
          message,
        ) !=
        0;
  }

  late final _TWPublicKeyVerify_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyVerify>>('TWPublicKeyVerify');
  late final _dart_TWPublicKeyVerify _TWPublicKeyVerify =
      _TWPublicKeyVerify_ptr.asFunction<_dart_TWPublicKeyVerify>();

  bool TWPublicKeyVerifyAsDER(
    ffi.Pointer<TWPublicKey> pk,
    ffi.Pointer<ffi.Void> signature,
    ffi.Pointer<ffi.Void> message,
  ) {
    return _TWPublicKeyVerifyAsDER(
          pk,
          signature,
          message,
        ) !=
        0;
  }

  late final _TWPublicKeyVerifyAsDER_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyVerifyAsDER>>(
          'TWPublicKeyVerifyAsDER');
  late final _dart_TWPublicKeyVerifyAsDER _TWPublicKeyVerifyAsDER =
      _TWPublicKeyVerifyAsDER_ptr.asFunction<_dart_TWPublicKeyVerifyAsDER>();

  bool TWPublicKeyVerifySchnorr(
    ffi.Pointer<TWPublicKey> pk,
    ffi.Pointer<ffi.Void> signature,
    ffi.Pointer<ffi.Void> message,
  ) {
    return _TWPublicKeyVerifySchnorr(
          pk,
          signature,
          message,
        ) !=
        0;
  }

  late final _TWPublicKeyVerifySchnorr_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyVerifySchnorr>>(
          'TWPublicKeyVerifySchnorr');
  late final _dart_TWPublicKeyVerifySchnorr _TWPublicKeyVerifySchnorr =
      _TWPublicKeyVerifySchnorr_ptr.asFunction<
          _dart_TWPublicKeyVerifySchnorr>();

  int TWPublicKeyKeyType(
    ffi.Pointer<TWPublicKey> publicKey,
  ) {
    return _TWPublicKeyKeyType(
      publicKey,
    );
  }

  late final _TWPublicKeyKeyType_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyKeyType>>('TWPublicKeyKeyType');
  late final _dart_TWPublicKeyKeyType _TWPublicKeyKeyType =
      _TWPublicKeyKeyType_ptr.asFunction<_dart_TWPublicKeyKeyType>();

  ffi.Pointer<ffi.Void> TWPublicKeyDescription(
    ffi.Pointer<TWPublicKey> publicKey,
  ) {
    return _TWPublicKeyDescription(
      publicKey,
    );
  }

  late final _TWPublicKeyDescription_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyDescription>>(
          'TWPublicKeyDescription');
  late final _dart_TWPublicKeyDescription _TWPublicKeyDescription =
      _TWPublicKeyDescription_ptr.asFunction<_dart_TWPublicKeyDescription>();

  ffi.Pointer<TWPublicKey> TWPublicKeyRecover(
    ffi.Pointer<ffi.Void> signature,
    ffi.Pointer<ffi.Void> message,
  ) {
    return _TWPublicKeyRecover(
      signature,
      message,
    );
  }

  late final _TWPublicKeyRecover_ptr =
      _lookup<ffi.NativeFunction<_c_TWPublicKeyRecover>>('TWPublicKeyRecover');
  late final _dart_TWPublicKeyRecover _TWPublicKeyRecover =
      _TWPublicKeyRecover_ptr.asFunction<_dart_TWPublicKeyRecover>();

  late final ffi.Pointer<ffi.Uint64> _TWPrivateKeySize =
      _lookup<ffi.Uint64>('TWPrivateKeySize');

  int get TWPrivateKeySize => _TWPrivateKeySize.value;

  set TWPrivateKeySize(int value) => _TWPrivateKeySize.value = value;

  ffi.Pointer<TWPrivateKey> TWPrivateKeyCreate() {
    return _TWPrivateKeyCreate();
  }

  late final _TWPrivateKeyCreate_ptr =
      _lookup<ffi.NativeFunction<_c_TWPrivateKeyCreate>>('TWPrivateKeyCreate');
  late final _dart_TWPrivateKeyCreate _TWPrivateKeyCreate =
      _TWPrivateKeyCreate_ptr.asFunction<_dart_TWPrivateKeyCreate>();

  ffi.Pointer<TWPrivateKey> TWPrivateKeyCreateWithData(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWPrivateKeyCreateWithData(
      data,
    );
  }

  late final _TWPrivateKeyCreateWithData_ptr =
      _lookup<ffi.NativeFunction<_c_TWPrivateKeyCreateWithData>>(
          'TWPrivateKeyCreateWithData');
  late final _dart_TWPrivateKeyCreateWithData _TWPrivateKeyCreateWithData =
      _TWPrivateKeyCreateWithData_ptr.asFunction<
          _dart_TWPrivateKeyCreateWithData>();

  ffi.Pointer<TWPrivateKey> TWPrivateKeyCreateCopy(
    ffi.Pointer<TWPrivateKey> key,
  ) {
    return _TWPrivateKeyCreateCopy(
      key,
    );
  }

  late final _TWPrivateKeyCreateCopy_ptr =
      _lookup<ffi.NativeFunction<_c_TWPrivateKeyCreateCopy>>(
          'TWPrivateKeyCreateCopy');
  late final _dart_TWPrivateKeyCreateCopy _TWPrivateKeyCreateCopy =
      _TWPrivateKeyCreateCopy_ptr.asFunction<_dart_TWPrivateKeyCreateCopy>();

  void TWPrivateKeyDelete(
    ffi.Pointer<TWPrivateKey> pk,
  ) {
    return _TWPrivateKeyDelete(
      pk,
    );
  }

  late final _TWPrivateKeyDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWPrivateKeyDelete>>('TWPrivateKeyDelete');
  late final _dart_TWPrivateKeyDelete _TWPrivateKeyDelete =
      _TWPrivateKeyDelete_ptr.asFunction<_dart_TWPrivateKeyDelete>();

  bool TWPrivateKeyIsValid(
    ffi.Pointer<ffi.Void> data,
    int curve,
  ) {
    return _TWPrivateKeyIsValid(
          data,
          curve,
        ) !=
        0;
  }

  late final _TWPrivateKeyIsValid_ptr =
      _lookup<ffi.NativeFunction<_c_TWPrivateKeyIsValid>>(
          'TWPrivateKeyIsValid');
  late final _dart_TWPrivateKeyIsValid _TWPrivateKeyIsValid =
      _TWPrivateKeyIsValid_ptr.asFunction<_dart_TWPrivateKeyIsValid>();

  ffi.Pointer<ffi.Void> TWPrivateKeyData(
    ffi.Pointer<TWPrivateKey> pk,
  ) {
    return _TWPrivateKeyData(
      pk,
    );
  }

  late final _TWPrivateKeyData_ptr =
      _lookup<ffi.NativeFunction<_c_TWPrivateKeyData>>('TWPrivateKeyData');
  late final _dart_TWPrivateKeyData _TWPrivateKeyData =
      _TWPrivateKeyData_ptr.asFunction<_dart_TWPrivateKeyData>();

  /// Returns the public key associated with this private key.
  ffi.Pointer<TWPublicKey> TWPrivateKeyGetPublicKeySecp256k1(
    ffi.Pointer<TWPrivateKey> pk,
    bool compressed,
  ) {
    return _TWPrivateKeyGetPublicKeySecp256k1(
      pk,
      compressed ? 1 : 0,
    );
  }

  late final _TWPrivateKeyGetPublicKeySecp256k1_ptr =
      _lookup<ffi.NativeFunction<_c_TWPrivateKeyGetPublicKeySecp256k1>>(
          'TWPrivateKeyGetPublicKeySecp256k1');
  late final _dart_TWPrivateKeyGetPublicKeySecp256k1
      _TWPrivateKeyGetPublicKeySecp256k1 =
      _TWPrivateKeyGetPublicKeySecp256k1_ptr.asFunction<
          _dart_TWPrivateKeyGetPublicKeySecp256k1>();

  /// Returns the public key associated with this private key.
  ffi.Pointer<TWPublicKey> TWPrivateKeyGetPublicKeyNist256p1(
    ffi.Pointer<TWPrivateKey> pk,
  ) {
    return _TWPrivateKeyGetPublicKeyNist256p1(
      pk,
    );
  }

  late final _TWPrivateKeyGetPublicKeyNist256p1_ptr =
      _lookup<ffi.NativeFunction<_c_TWPrivateKeyGetPublicKeyNist256p1>>(
          'TWPrivateKeyGetPublicKeyNist256p1');
  late final _dart_TWPrivateKeyGetPublicKeyNist256p1
      _TWPrivateKeyGetPublicKeyNist256p1 =
      _TWPrivateKeyGetPublicKeyNist256p1_ptr.asFunction<
          _dart_TWPrivateKeyGetPublicKeyNist256p1>();

  /// Returns the public key associated with this private key.
  ffi.Pointer<TWPublicKey> TWPrivateKeyGetPublicKeyEd25519(
    ffi.Pointer<TWPrivateKey> pk,
  ) {
    return _TWPrivateKeyGetPublicKeyEd25519(
      pk,
    );
  }

  late final _TWPrivateKeyGetPublicKeyEd25519_ptr =
      _lookup<ffi.NativeFunction<_c_TWPrivateKeyGetPublicKeyEd25519>>(
          'TWPrivateKeyGetPublicKeyEd25519');
  late final _dart_TWPrivateKeyGetPublicKeyEd25519
      _TWPrivateKeyGetPublicKeyEd25519 = _TWPrivateKeyGetPublicKeyEd25519_ptr
          .asFunction<_dart_TWPrivateKeyGetPublicKeyEd25519>();

  /// Returns the public key associated with this private key.
  ffi.Pointer<TWPublicKey> TWPrivateKeyGetPublicKeyEd25519Blake2b(
    ffi.Pointer<TWPrivateKey> pk,
  ) {
    return _TWPrivateKeyGetPublicKeyEd25519Blake2b(
      pk,
    );
  }

  late final _TWPrivateKeyGetPublicKeyEd25519Blake2b_ptr =
      _lookup<ffi.NativeFunction<_c_TWPrivateKeyGetPublicKeyEd25519Blake2b>>(
          'TWPrivateKeyGetPublicKeyEd25519Blake2b');
  late final _dart_TWPrivateKeyGetPublicKeyEd25519Blake2b
      _TWPrivateKeyGetPublicKeyEd25519Blake2b =
      _TWPrivateKeyGetPublicKeyEd25519Blake2b_ptr.asFunction<
          _dart_TWPrivateKeyGetPublicKeyEd25519Blake2b>();

  /// Returns the public key associated with this private key.
  ffi.Pointer<TWPublicKey> TWPrivateKeyGetPublicKeyEd25519Extended(
    ffi.Pointer<TWPrivateKey> pk,
  ) {
    return _TWPrivateKeyGetPublicKeyEd25519Extended(
      pk,
    );
  }

  late final _TWPrivateKeyGetPublicKeyEd25519Extended_ptr =
      _lookup<ffi.NativeFunction<_c_TWPrivateKeyGetPublicKeyEd25519Extended>>(
          'TWPrivateKeyGetPublicKeyEd25519Extended');
  late final _dart_TWPrivateKeyGetPublicKeyEd25519Extended
      _TWPrivateKeyGetPublicKeyEd25519Extended =
      _TWPrivateKeyGetPublicKeyEd25519Extended_ptr.asFunction<
          _dart_TWPrivateKeyGetPublicKeyEd25519Extended>();

  /// Returns the public key associated with this private key.
  ffi.Pointer<TWPublicKey> TWPrivateKeyGetPublicKeyCurve25519(
    ffi.Pointer<TWPrivateKey> pk,
  ) {
    return _TWPrivateKeyGetPublicKeyCurve25519(
      pk,
    );
  }

  late final _TWPrivateKeyGetPublicKeyCurve25519_ptr =
      _lookup<ffi.NativeFunction<_c_TWPrivateKeyGetPublicKeyCurve25519>>(
          'TWPrivateKeyGetPublicKeyCurve25519');
  late final _dart_TWPrivateKeyGetPublicKeyCurve25519
      _TWPrivateKeyGetPublicKeyCurve25519 =
      _TWPrivateKeyGetPublicKeyCurve25519_ptr.asFunction<
          _dart_TWPrivateKeyGetPublicKeyCurve25519>();

  /// Computes an EC Diffie-Hellman secret in constant time
  /// Supported curves: secp256k1
  ffi.Pointer<ffi.Void> TWPrivateKeyGetSharedKey(
    ffi.Pointer<TWPrivateKey> pk,
    ffi.Pointer<TWPublicKey> publicKey,
    int curve,
  ) {
    return _TWPrivateKeyGetSharedKey(
      pk,
      publicKey,
      curve,
    );
  }

  late final _TWPrivateKeyGetSharedKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWPrivateKeyGetSharedKey>>(
          'TWPrivateKeyGetSharedKey');
  late final _dart_TWPrivateKeyGetSharedKey _TWPrivateKeyGetSharedKey =
      _TWPrivateKeyGetSharedKey_ptr.asFunction<
          _dart_TWPrivateKeyGetSharedKey>();

  /// Signs a digest using ECDSA and given curve.
  ffi.Pointer<ffi.Void> TWPrivateKeySign(
    ffi.Pointer<TWPrivateKey> pk,
    ffi.Pointer<ffi.Void> digest,
    int curve,
  ) {
    return _TWPrivateKeySign(
      pk,
      digest,
      curve,
    );
  }

  late final _TWPrivateKeySign_ptr =
      _lookup<ffi.NativeFunction<_c_TWPrivateKeySign>>('TWPrivateKeySign');
  late final _dart_TWPrivateKeySign _TWPrivateKeySign =
      _TWPrivateKeySign_ptr.asFunction<_dart_TWPrivateKeySign>();

  /// Signs a digest using ECDSA and given curve. The result is encoded with DER.
  ffi.Pointer<ffi.Void> TWPrivateKeySignAsDER(
    ffi.Pointer<TWPrivateKey> pk,
    ffi.Pointer<ffi.Void> digest,
    int curve,
  ) {
    return _TWPrivateKeySignAsDER(
      pk,
      digest,
      curve,
    );
  }

  late final _TWPrivateKeySignAsDER_ptr =
      _lookup<ffi.NativeFunction<_c_TWPrivateKeySignAsDER>>(
          'TWPrivateKeySignAsDER');
  late final _dart_TWPrivateKeySignAsDER _TWPrivateKeySignAsDER =
      _TWPrivateKeySignAsDER_ptr.asFunction<_dart_TWPrivateKeySignAsDER>();

  /// Signs a digest using ECDSA and given curve, returns schnoor signature.
  ffi.Pointer<ffi.Void> TWPrivateKeySignSchnorr(
    ffi.Pointer<TWPrivateKey> pk,
    ffi.Pointer<ffi.Void> message,
    int curve,
  ) {
    return _TWPrivateKeySignSchnorr(
      pk,
      message,
      curve,
    );
  }

  late final _TWPrivateKeySignSchnorr_ptr =
      _lookup<ffi.NativeFunction<_c_TWPrivateKeySignSchnorr>>(
          'TWPrivateKeySignSchnorr');
  late final _dart_TWPrivateKeySignSchnorr _TWPrivateKeySignSchnorr =
      _TWPrivateKeySignSchnorr_ptr.asFunction<_dart_TWPrivateKeySignSchnorr>();

  /// Returns the blockchain for a coin type.
  int TWCoinTypeBlockchain(
    int coin,
  ) {
    return _TWCoinTypeBlockchain(
      coin,
    );
  }

  late final _TWCoinTypeBlockchain_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeBlockchain>>(
          'TWCoinTypeBlockchain');
  late final _dart_TWCoinTypeBlockchain _TWCoinTypeBlockchain =
      _TWCoinTypeBlockchain_ptr.asFunction<_dart_TWCoinTypeBlockchain>();

  /// Returns the purpose for a coin type.
  int TWCoinTypePurpose(
    int coin,
  ) {
    return _TWCoinTypePurpose(
      coin,
    );
  }

  late final _TWCoinTypePurpose_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypePurpose>>('TWCoinTypePurpose');
  late final _dart_TWCoinTypePurpose _TWCoinTypePurpose =
      _TWCoinTypePurpose_ptr.asFunction<_dart_TWCoinTypePurpose>();

  /// Returns the curve that should be used for a coin type.
  int TWCoinTypeCurve(
    int coin,
  ) {
    return _TWCoinTypeCurve(
      coin,
    );
  }

  late final _TWCoinTypeCurve_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeCurve>>('TWCoinTypeCurve');
  late final _dart_TWCoinTypeCurve _TWCoinTypeCurve =
      _TWCoinTypeCurve_ptr.asFunction<_dart_TWCoinTypeCurve>();

  /// Returns the xpub HD version that should be used for a coin type.
  int TWCoinTypeXpubVersion(
    int coin,
  ) {
    return _TWCoinTypeXpubVersion(
      coin,
    );
  }

  late final _TWCoinTypeXpubVersion_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeXpubVersion>>(
          'TWCoinTypeXpubVersion');
  late final _dart_TWCoinTypeXpubVersion _TWCoinTypeXpubVersion =
      _TWCoinTypeXpubVersion_ptr.asFunction<_dart_TWCoinTypeXpubVersion>();

  /// Returns the xprv HD version that should be used for a coin type.
  int TWCoinTypeXprvVersion(
    int coin,
  ) {
    return _TWCoinTypeXprvVersion(
      coin,
    );
  }

  late final _TWCoinTypeXprvVersion_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeXprvVersion>>(
          'TWCoinTypeXprvVersion');
  late final _dart_TWCoinTypeXprvVersion _TWCoinTypeXprvVersion =
      _TWCoinTypeXprvVersion_ptr.asFunction<_dart_TWCoinTypeXprvVersion>();

  /// Validates an address string.
  bool TWCoinTypeValidate(
    int coin,
    ffi.Pointer<ffi.Void> address,
  ) {
    return _TWCoinTypeValidate(
          coin,
          address,
        ) !=
        0;
  }

  late final _TWCoinTypeValidate_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeValidate>>('TWCoinTypeValidate');
  late final _dart_TWCoinTypeValidate _TWCoinTypeValidate =
      _TWCoinTypeValidate_ptr.asFunction<_dart_TWCoinTypeValidate>();

  /// Returns the default derivation path for a particular coin.
  ffi.Pointer<ffi.Void> TWCoinTypeDerivationPath(
    int coin,
  ) {
    return _TWCoinTypeDerivationPath(
      coin,
    );
  }

  late final _TWCoinTypeDerivationPath_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeDerivationPath>>(
          'TWCoinTypeDerivationPath');
  late final _dart_TWCoinTypeDerivationPath _TWCoinTypeDerivationPath =
      _TWCoinTypeDerivationPath_ptr.asFunction<
          _dart_TWCoinTypeDerivationPath>();

  /// Derives the address for a particular coin from the private key.
  ffi.Pointer<ffi.Void> TWCoinTypeDeriveAddress(
    int coin,
    ffi.Pointer<TWPrivateKey> privateKey,
  ) {
    return _TWCoinTypeDeriveAddress(
      coin,
      privateKey,
    );
  }

  late final _TWCoinTypeDeriveAddress_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeDeriveAddress>>(
          'TWCoinTypeDeriveAddress');
  late final _dart_TWCoinTypeDeriveAddress _TWCoinTypeDeriveAddress =
      _TWCoinTypeDeriveAddress_ptr.asFunction<_dart_TWCoinTypeDeriveAddress>();

  /// Derives the address for a particular coin from the public key.
  ffi.Pointer<ffi.Void> TWCoinTypeDeriveAddressFromPublicKey(
    int coin,
    ffi.Pointer<TWPublicKey> publicKey,
  ) {
    return _TWCoinTypeDeriveAddressFromPublicKey(
      coin,
      publicKey,
    );
  }

  late final _TWCoinTypeDeriveAddressFromPublicKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeDeriveAddressFromPublicKey>>(
          'TWCoinTypeDeriveAddressFromPublicKey');
  late final _dart_TWCoinTypeDeriveAddressFromPublicKey
      _TWCoinTypeDeriveAddressFromPublicKey =
      _TWCoinTypeDeriveAddressFromPublicKey_ptr.asFunction<
          _dart_TWCoinTypeDeriveAddressFromPublicKey>();

  /// HRP for this coin type
  int TWCoinTypeHRP(
    int coin,
  ) {
    return _TWCoinTypeHRP(
      coin,
    );
  }

  late final _TWCoinTypeHRP_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeHRP>>('TWCoinTypeHRP');
  late final _dart_TWCoinTypeHRP _TWCoinTypeHRP =
      _TWCoinTypeHRP_ptr.asFunction<_dart_TWCoinTypeHRP>();

  /// P2PKH prefix for this coin type
  int TWCoinTypeP2pkhPrefix(
    int coin,
  ) {
    return _TWCoinTypeP2pkhPrefix(
      coin,
    );
  }

  late final _TWCoinTypeP2pkhPrefix_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeP2pkhPrefix>>(
          'TWCoinTypeP2pkhPrefix');
  late final _dart_TWCoinTypeP2pkhPrefix _TWCoinTypeP2pkhPrefix =
      _TWCoinTypeP2pkhPrefix_ptr.asFunction<_dart_TWCoinTypeP2pkhPrefix>();

  /// P2SH prefix for this coin type
  int TWCoinTypeP2shPrefix(
    int coin,
  ) {
    return _TWCoinTypeP2shPrefix(
      coin,
    );
  }

  late final _TWCoinTypeP2shPrefix_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeP2shPrefix>>(
          'TWCoinTypeP2shPrefix');
  late final _dart_TWCoinTypeP2shPrefix _TWCoinTypeP2shPrefix =
      _TWCoinTypeP2shPrefix_ptr.asFunction<_dart_TWCoinTypeP2shPrefix>();

  /// Static prefix for this coin type
  int TWCoinTypeStaticPrefix(
    int coin,
  ) {
    return _TWCoinTypeStaticPrefix(
      coin,
    );
  }

  late final _TWCoinTypeStaticPrefix_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeStaticPrefix>>(
          'TWCoinTypeStaticPrefix');
  late final _dart_TWCoinTypeStaticPrefix _TWCoinTypeStaticPrefix =
      _TWCoinTypeStaticPrefix_ptr.asFunction<_dart_TWCoinTypeStaticPrefix>();

  /// SLIP-0044 id for this coin type
  int TWCoinTypeSlip44Id(
    int coin,
  ) {
    return _TWCoinTypeSlip44Id(
      coin,
    );
  }

  late final _TWCoinTypeSlip44Id_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeSlip44Id>>('TWCoinTypeSlip44Id');
  late final _dart_TWCoinTypeSlip44Id _TWCoinTypeSlip44Id =
      _TWCoinTypeSlip44Id_ptr.asFunction<_dart_TWCoinTypeSlip44Id>();

  /// Returns stock symbol of coin
  ffi.Pointer<ffi.Void> TWCoinTypeConfigurationGetSymbol(
    int type,
  ) {
    return _TWCoinTypeConfigurationGetSymbol(
      type,
    );
  }

  late final _TWCoinTypeConfigurationGetSymbol_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeConfigurationGetSymbol>>(
          'TWCoinTypeConfigurationGetSymbol');
  late final _dart_TWCoinTypeConfigurationGetSymbol
      _TWCoinTypeConfigurationGetSymbol = _TWCoinTypeConfigurationGetSymbol_ptr
          .asFunction<_dart_TWCoinTypeConfigurationGetSymbol>();

  /// Returns max count decimal places for minimal coin unit
  int TWCoinTypeConfigurationGetDecimals(
    int type,
  ) {
    return _TWCoinTypeConfigurationGetDecimals(
      type,
    );
  }

  late final _TWCoinTypeConfigurationGetDecimals_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeConfigurationGetDecimals>>(
          'TWCoinTypeConfigurationGetDecimals');
  late final _dart_TWCoinTypeConfigurationGetDecimals
      _TWCoinTypeConfigurationGetDecimals =
      _TWCoinTypeConfigurationGetDecimals_ptr.asFunction<
          _dart_TWCoinTypeConfigurationGetDecimals>();

  /// Returns transaction url in blockchain explorer
  ffi.Pointer<ffi.Void> TWCoinTypeConfigurationGetTransactionURL(
    int type,
    ffi.Pointer<ffi.Void> transactionID,
  ) {
    return _TWCoinTypeConfigurationGetTransactionURL(
      type,
      transactionID,
    );
  }

  late final _TWCoinTypeConfigurationGetTransactionURL_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeConfigurationGetTransactionURL>>(
          'TWCoinTypeConfigurationGetTransactionURL');
  late final _dart_TWCoinTypeConfigurationGetTransactionURL
      _TWCoinTypeConfigurationGetTransactionURL =
      _TWCoinTypeConfigurationGetTransactionURL_ptr.asFunction<
          _dart_TWCoinTypeConfigurationGetTransactionURL>();

  /// Returns account url in blockchain explorer
  ffi.Pointer<ffi.Void> TWCoinTypeConfigurationGetAccountURL(
    int type,
    ffi.Pointer<ffi.Void> accountID,
  ) {
    return _TWCoinTypeConfigurationGetAccountURL(
      type,
      accountID,
    );
  }

  late final _TWCoinTypeConfigurationGetAccountURL_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeConfigurationGetAccountURL>>(
          'TWCoinTypeConfigurationGetAccountURL');
  late final _dart_TWCoinTypeConfigurationGetAccountURL
      _TWCoinTypeConfigurationGetAccountURL =
      _TWCoinTypeConfigurationGetAccountURL_ptr.asFunction<
          _dart_TWCoinTypeConfigurationGetAccountURL>();

  /// Returns full name of coin in lower case
  ffi.Pointer<ffi.Void> TWCoinTypeConfigurationGetID(
    int type,
  ) {
    return _TWCoinTypeConfigurationGetID(
      type,
    );
  }

  late final _TWCoinTypeConfigurationGetID_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeConfigurationGetID>>(
          'TWCoinTypeConfigurationGetID');
  late final _dart_TWCoinTypeConfigurationGetID _TWCoinTypeConfigurationGetID =
      _TWCoinTypeConfigurationGetID_ptr.asFunction<
          _dart_TWCoinTypeConfigurationGetID>();

  /// Returns full name of coin
  ffi.Pointer<ffi.Void> TWCoinTypeConfigurationGetName(
    int type,
  ) {
    return _TWCoinTypeConfigurationGetName(
      type,
    );
  }

  late final _TWCoinTypeConfigurationGetName_ptr =
      _lookup<ffi.NativeFunction<_c_TWCoinTypeConfigurationGetName>>(
          'TWCoinTypeConfigurationGetName');
  late final _dart_TWCoinTypeConfigurationGetName
      _TWCoinTypeConfigurationGetName = _TWCoinTypeConfigurationGetName_ptr
          .asFunction<_dart_TWCoinTypeConfigurationGetName>();

  /// Creates a new HDWallet with a new random mnemonic with the provided strength in bits.
  /// Null is returned on invalid strength. Returned object needs to be deleted.
  ffi.Pointer<TWHDWallet> TWHDWalletCreate(
    int strength,
    ffi.Pointer<ffi.Void> passphrase,
  ) {
    return _TWHDWalletCreate(
      strength,
      passphrase,
    );
  }

  late final _TWHDWalletCreate_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletCreate>>('TWHDWalletCreate');
  late final _dart_TWHDWalletCreate _TWHDWalletCreate =
      _TWHDWalletCreate_ptr.asFunction<_dart_TWHDWalletCreate>();

  /// Creates an HDWallet from a valid BIP39 English mnemonic and a passphrase.
  /// Null is returned on invalid mnemonic. Returned object needs to be deleted.
  ffi.Pointer<TWHDWallet> TWHDWalletCreateWithMnemonic(
    ffi.Pointer<ffi.Void> mnemonic,
    ffi.Pointer<ffi.Void> passphrase,
  ) {
    return _TWHDWalletCreateWithMnemonic(
      mnemonic,
      passphrase,
    );
  }

  late final _TWHDWalletCreateWithMnemonic_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletCreateWithMnemonic>>(
          'TWHDWalletCreateWithMnemonic');
  late final _dart_TWHDWalletCreateWithMnemonic _TWHDWalletCreateWithMnemonic =
      _TWHDWalletCreateWithMnemonic_ptr.asFunction<
          _dart_TWHDWalletCreateWithMnemonic>();

  /// Creates an HDWallet from a BIP39 mnemonic, a passphrase and validation flag.
  /// Null is returned on invalid mnemonic. Returned object needs to be deleted.
  ffi.Pointer<TWHDWallet> TWHDWalletCreateWithMnemonicCheck(
    ffi.Pointer<ffi.Void> mnemonic,
    ffi.Pointer<ffi.Void> passphrase,
    bool check,
  ) {
    return _TWHDWalletCreateWithMnemonicCheck(
      mnemonic,
      passphrase,
      check ? 1 : 0,
    );
  }

  late final _TWHDWalletCreateWithMnemonicCheck_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletCreateWithMnemonicCheck>>(
          'TWHDWalletCreateWithMnemonicCheck');
  late final _dart_TWHDWalletCreateWithMnemonicCheck
      _TWHDWalletCreateWithMnemonicCheck =
      _TWHDWalletCreateWithMnemonicCheck_ptr.asFunction<
          _dart_TWHDWalletCreateWithMnemonicCheck>();

  /// Creates an HDWallet from entropy (corresponding to a mnemonic).
  /// Null is returned on invalid input. Returned object needs to be deleted.
  ffi.Pointer<TWHDWallet> TWHDWalletCreateWithEntropy(
    ffi.Pointer<ffi.Void> entropy,
    ffi.Pointer<ffi.Void> passphrase,
  ) {
    return _TWHDWalletCreateWithEntropy(
      entropy,
      passphrase,
    );
  }

  late final _TWHDWalletCreateWithEntropy_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletCreateWithEntropy>>(
          'TWHDWalletCreateWithEntropy');
  late final _dart_TWHDWalletCreateWithEntropy _TWHDWalletCreateWithEntropy =
      _TWHDWalletCreateWithEntropy_ptr.asFunction<
          _dart_TWHDWalletCreateWithEntropy>();

  /// Deletes a wallet.
  void TWHDWalletDelete(
    ffi.Pointer<TWHDWallet> wallet,
  ) {
    return _TWHDWalletDelete(
      wallet,
    );
  }

  late final _TWHDWalletDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletDelete>>('TWHDWalletDelete');
  late final _dart_TWHDWalletDelete _TWHDWalletDelete =
      _TWHDWalletDelete_ptr.asFunction<_dart_TWHDWalletDelete>();

  /// Wallet seed.
  ffi.Pointer<ffi.Void> TWHDWalletSeed(
    ffi.Pointer<TWHDWallet> wallet,
  ) {
    return _TWHDWalletSeed(
      wallet,
    );
  }

  late final _TWHDWalletSeed_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletSeed>>('TWHDWalletSeed');
  late final _dart_TWHDWalletSeed _TWHDWalletSeed =
      _TWHDWalletSeed_ptr.asFunction<_dart_TWHDWalletSeed>();

  ffi.Pointer<ffi.Void> TWHDWalletMnemonic(
    ffi.Pointer<TWHDWallet> wallet,
  ) {
    return _TWHDWalletMnemonic(
      wallet,
    );
  }

  late final _TWHDWalletMnemonic_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletMnemonic>>('TWHDWalletMnemonic');
  late final _dart_TWHDWalletMnemonic _TWHDWalletMnemonic =
      _TWHDWalletMnemonic_ptr.asFunction<_dart_TWHDWalletMnemonic>();

  ffi.Pointer<ffi.Void> TWHDWalletEntropy(
    ffi.Pointer<TWHDWallet> wallet,
  ) {
    return _TWHDWalletEntropy(
      wallet,
    );
  }

  late final _TWHDWalletEntropy_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletEntropy>>('TWHDWalletEntropy');
  late final _dart_TWHDWalletEntropy _TWHDWalletEntropy =
      _TWHDWalletEntropy_ptr.asFunction<_dart_TWHDWalletEntropy>();

  /// Returns master key.  Returned object needs to be deleted.
  ffi.Pointer<TWPrivateKey> TWHDWalletGetMasterKey(
    ffi.Pointer<TWHDWallet> wallet,
    int curve,
  ) {
    return _TWHDWalletGetMasterKey(
      wallet,
      curve,
    );
  }

  late final _TWHDWalletGetMasterKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletGetMasterKey>>(
          'TWHDWalletGetMasterKey');
  late final _dart_TWHDWalletGetMasterKey _TWHDWalletGetMasterKey =
      _TWHDWalletGetMasterKey_ptr.asFunction<_dart_TWHDWalletGetMasterKey>();

  /// Generates the default private key for the specified coin.  Returned object needs to be deleted.
  ffi.Pointer<TWPrivateKey> TWHDWalletGetKeyForCoin(
    ffi.Pointer<TWHDWallet> wallet,
    int coin,
  ) {
    return _TWHDWalletGetKeyForCoin(
      wallet,
      coin,
    );
  }

  late final _TWHDWalletGetKeyForCoin_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletGetKeyForCoin>>(
          'TWHDWalletGetKeyForCoin');
  late final _dart_TWHDWalletGetKeyForCoin _TWHDWalletGetKeyForCoin =
      _TWHDWalletGetKeyForCoin_ptr.asFunction<_dart_TWHDWalletGetKeyForCoin>();

  /// Generates the default address for the specified coin (without exposing intermediary private key).
  ffi.Pointer<ffi.Void> TWHDWalletGetAddressForCoin(
    ffi.Pointer<TWHDWallet> wallet,
    int coin,
  ) {
    return _TWHDWalletGetAddressForCoin(
      wallet,
      coin,
    );
  }

  late final _TWHDWalletGetAddressForCoin_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletGetAddressForCoin>>(
          'TWHDWalletGetAddressForCoin');
  late final _dart_TWHDWalletGetAddressForCoin _TWHDWalletGetAddressForCoin =
      _TWHDWalletGetAddressForCoin_ptr.asFunction<
          _dart_TWHDWalletGetAddressForCoin>();

  /// Generates the private key for the specified derivation path.  Returned object needs to be deleted.
  ffi.Pointer<TWPrivateKey> TWHDWalletGetKey(
    ffi.Pointer<TWHDWallet> wallet,
    int coin,
    ffi.Pointer<ffi.Void> derivationPath,
  ) {
    return _TWHDWalletGetKey(
      wallet,
      coin,
      derivationPath,
    );
  }

  late final _TWHDWalletGetKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletGetKey>>('TWHDWalletGetKey');
  late final _dart_TWHDWalletGetKey _TWHDWalletGetKey =
      _TWHDWalletGetKey_ptr.asFunction<_dart_TWHDWalletGetKey>();

  /// Shortcut method to generate private key with the specified account/change/address (bip44 standard). Returned object needs to be deleted.
  ///
  /// @see https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki
  ffi.Pointer<TWPrivateKey> TWHDWalletGetDerivedKey(
    ffi.Pointer<TWHDWallet> wallet,
    int coin,
    int account,
    int change,
    int address,
  ) {
    return _TWHDWalletGetDerivedKey(
      wallet,
      coin,
      account,
      change,
      address,
    );
  }

  late final _TWHDWalletGetDerivedKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletGetDerivedKey>>(
          'TWHDWalletGetDerivedKey');
  late final _dart_TWHDWalletGetDerivedKey _TWHDWalletGetDerivedKey =
      _TWHDWalletGetDerivedKey_ptr.asFunction<_dart_TWHDWalletGetDerivedKey>();

  /// Returns the extended private key.
  ffi.Pointer<ffi.Void> TWHDWalletGetExtendedPrivateKey(
    ffi.Pointer<TWHDWallet> wallet,
    int purpose,
    int coin,
    int version,
  ) {
    return _TWHDWalletGetExtendedPrivateKey(
      wallet,
      purpose,
      coin,
      version,
    );
  }

  late final _TWHDWalletGetExtendedPrivateKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletGetExtendedPrivateKey>>(
          'TWHDWalletGetExtendedPrivateKey');
  late final _dart_TWHDWalletGetExtendedPrivateKey
      _TWHDWalletGetExtendedPrivateKey = _TWHDWalletGetExtendedPrivateKey_ptr
          .asFunction<_dart_TWHDWalletGetExtendedPrivateKey>();

  /// Returns the exteded public key.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Void> TWHDWalletGetExtendedPublicKey(
    ffi.Pointer<TWHDWallet> wallet,
    int purpose,
    int coin,
    int version,
  ) {
    return _TWHDWalletGetExtendedPublicKey(
      wallet,
      purpose,
      coin,
      version,
    );
  }

  late final _TWHDWalletGetExtendedPublicKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletGetExtendedPublicKey>>(
          'TWHDWalletGetExtendedPublicKey');
  late final _dart_TWHDWalletGetExtendedPublicKey
      _TWHDWalletGetExtendedPublicKey = _TWHDWalletGetExtendedPublicKey_ptr
          .asFunction<_dart_TWHDWalletGetExtendedPublicKey>();

  /// Computes the public key from an exteded public key representation.  Returned object needs to be deleted.
  ffi.Pointer<TWPublicKey> TWHDWalletGetPublicKeyFromExtended(
    ffi.Pointer<ffi.Void> extended,
    int coin,
    ffi.Pointer<ffi.Void> derivationPath,
  ) {
    return _TWHDWalletGetPublicKeyFromExtended(
      extended,
      coin,
      derivationPath,
    );
  }

  late final _TWHDWalletGetPublicKeyFromExtended_ptr =
      _lookup<ffi.NativeFunction<_c_TWHDWalletGetPublicKeyFromExtended>>(
          'TWHDWalletGetPublicKeyFromExtended');
  late final _dart_TWHDWalletGetPublicKeyFromExtended
      _TWHDWalletGetPublicKeyFromExtended =
      _TWHDWalletGetPublicKeyFromExtended_ptr.asFunction<
          _dart_TWHDWalletGetPublicKeyFromExtended>();

  ffi.Pointer<TWDataVector> TWDataVectorCreate() {
    return _TWDataVectorCreate();
  }

  late final _TWDataVectorCreate_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataVectorCreate>>('TWDataVectorCreate');
  late final _dart_TWDataVectorCreate _TWDataVectorCreate =
      _TWDataVectorCreate_ptr.asFunction<_dart_TWDataVectorCreate>();

  ffi.Pointer<TWDataVector> TWDataVectorCreateWithData(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWDataVectorCreateWithData(
      data,
    );
  }

  late final _TWDataVectorCreateWithData_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataVectorCreateWithData>>(
          'TWDataVectorCreateWithData');
  late final _dart_TWDataVectorCreateWithData _TWDataVectorCreateWithData =
      _TWDataVectorCreateWithData_ptr.asFunction<
          _dart_TWDataVectorCreateWithData>();

  void TWDataVectorDelete(
    ffi.Pointer<TWDataVector> dataVector,
  ) {
    return _TWDataVectorDelete(
      dataVector,
    );
  }

  late final _TWDataVectorDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataVectorDelete>>('TWDataVectorDelete');
  late final _dart_TWDataVectorDelete _TWDataVectorDelete =
      _TWDataVectorDelete_ptr.asFunction<_dart_TWDataVectorDelete>();

  void TWDataVectorAdd(
    ffi.Pointer<TWDataVector> dataVector,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWDataVectorAdd(
      dataVector,
      data,
    );
  }

  late final _TWDataVectorAdd_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataVectorAdd>>('TWDataVectorAdd');
  late final _dart_TWDataVectorAdd _TWDataVectorAdd =
      _TWDataVectorAdd_ptr.asFunction<_dart_TWDataVectorAdd>();

  int TWDataVectorSize(
    ffi.Pointer<TWDataVector> dataVector,
  ) {
    return _TWDataVectorSize(
      dataVector,
    );
  }

  late final _TWDataVectorSize_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataVectorSize>>('TWDataVectorSize');
  late final _dart_TWDataVectorSize _TWDataVectorSize =
      _TWDataVectorSize_ptr.asFunction<_dart_TWDataVectorSize>();

  ffi.Pointer<ffi.Void> TWDataVectorGet(
    ffi.Pointer<TWDataVector> dataVector,
    int index,
  ) {
    return _TWDataVectorGet(
      dataVector,
      index,
    );
  }

  late final _TWDataVectorGet_ptr =
      _lookup<ffi.NativeFunction<_c_TWDataVectorGet>>('TWDataVectorGet');
  late final _dart_TWDataVectorGet _TWDataVectorGet =
      _TWDataVectorGet_ptr.asFunction<_dart_TWDataVectorGet>();

  /// Build a coin-specific SigningInput protobuf transaction input, from simple transaction parameters
  /// - amount: decimal number as string
  /// - asset: optional asset name, like "BNB"
  /// - memo: optional memo
  /// - chainId: optional chainId to override default
  ffi.Pointer<ffi.Void> TWTransactionCompilerBuildInput(
    int coinType,
    ffi.Pointer<ffi.Void> from,
    ffi.Pointer<ffi.Void> to,
    ffi.Pointer<ffi.Void> amount,
    ffi.Pointer<ffi.Void> asset,
    ffi.Pointer<ffi.Void> memo,
    ffi.Pointer<ffi.Void> chainId,
  ) {
    return _TWTransactionCompilerBuildInput(
      coinType,
      from,
      to,
      amount,
      asset,
      memo,
      chainId,
    );
  }

  late final _TWTransactionCompilerBuildInput_ptr =
      _lookup<ffi.NativeFunction<_c_TWTransactionCompilerBuildInput>>(
          'TWTransactionCompilerBuildInput');
  late final _dart_TWTransactionCompilerBuildInput
      _TWTransactionCompilerBuildInput = _TWTransactionCompilerBuildInput_ptr
          .asFunction<_dart_TWTransactionCompilerBuildInput>();

  /// Obtain pre-signing hashes of a transaction. For each hash its corresponding publickKeyHash follows, so return is always even size.
  /// For chains with one signature only, the result contains 2 elements, but the second may be ignored.
  ffi.Pointer<TWDataVector> TWTransactionCompilerPreImageHashes(
    int coinType,
    ffi.Pointer<ffi.Void> txInputData,
  ) {
    return _TWTransactionCompilerPreImageHashes(
      coinType,
      txInputData,
    );
  }

  late final _TWTransactionCompilerPreImageHashes_ptr =
      _lookup<ffi.NativeFunction<_c_TWTransactionCompilerPreImageHashes>>(
          'TWTransactionCompilerPreImageHashes');
  late final _dart_TWTransactionCompilerPreImageHashes
      _TWTransactionCompilerPreImageHashes =
      _TWTransactionCompilerPreImageHashes_ptr.asFunction<
          _dart_TWTransactionCompilerPreImageHashes>();

  /// Compile a complete transation with one or more external signatures, put together from transaction input and provided public keys and signatures.
  /// The signatures must match the hashes returned by TWTransactionCompilerPreImageHashes, in the same order.
  /// The publicKeyHash attached to the hashes enable identifying the private key needed for signing the hash.
  ffi.Pointer<ffi.Void> TWTransactionCompilerCompileWithSignatures(
    int coinType,
    ffi.Pointer<ffi.Void> txInputData,
    ffi.Pointer<TWDataVector> signatures,
    ffi.Pointer<TWDataVector> publicKeys,
  ) {
    return _TWTransactionCompilerCompileWithSignatures(
      coinType,
      txInputData,
      signatures,
      publicKeys,
    );
  }

  late final _TWTransactionCompilerCompileWithSignatures_ptr = _lookup<
          ffi.NativeFunction<_c_TWTransactionCompilerCompileWithSignatures>>(
      'TWTransactionCompilerCompileWithSignatures');
  late final _dart_TWTransactionCompilerCompileWithSignatures
      _TWTransactionCompilerCompileWithSignatures =
      _TWTransactionCompilerCompileWithSignatures_ptr.asFunction<
          _dart_TWTransactionCompilerCompileWithSignatures>();

  bool TWBitcoinSigHashTypeIsSingle(
    int type,
  ) {
    return _TWBitcoinSigHashTypeIsSingle(
          type,
        ) !=
        0;
  }

  late final _TWBitcoinSigHashTypeIsSingle_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinSigHashTypeIsSingle>>(
          'TWBitcoinSigHashTypeIsSingle');
  late final _dart_TWBitcoinSigHashTypeIsSingle _TWBitcoinSigHashTypeIsSingle =
      _TWBitcoinSigHashTypeIsSingle_ptr.asFunction<
          _dart_TWBitcoinSigHashTypeIsSingle>();

  bool TWBitcoinSigHashTypeIsNone(
    int type,
  ) {
    return _TWBitcoinSigHashTypeIsNone(
          type,
        ) !=
        0;
  }

  late final _TWBitcoinSigHashTypeIsNone_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinSigHashTypeIsNone>>(
          'TWBitcoinSigHashTypeIsNone');
  late final _dart_TWBitcoinSigHashTypeIsNone _TWBitcoinSigHashTypeIsNone =
      _TWBitcoinSigHashTypeIsNone_ptr.asFunction<
          _dart_TWBitcoinSigHashTypeIsNone>();

  /// Returned data must be deleted (hint: use WRAPD() macro).
  /// Encode a type according to Ethereum ABI, into 32 bytes. Values are padded by 0 on the left, unless specified otherwise.
  ffi.Pointer<ffi.Void> TWEthereumAbiValueEncodeBool(
    bool value,
  ) {
    return _TWEthereumAbiValueEncodeBool(
      value ? 1 : 0,
    );
  }

  late final _TWEthereumAbiValueEncodeBool_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiValueEncodeBool>>(
          'TWEthereumAbiValueEncodeBool');
  late final _dart_TWEthereumAbiValueEncodeBool _TWEthereumAbiValueEncodeBool =
      _TWEthereumAbiValueEncodeBool_ptr.asFunction<
          _dart_TWEthereumAbiValueEncodeBool>();

  ffi.Pointer<ffi.Void> TWEthereumAbiValueEncodeInt32(
    int value,
  ) {
    return _TWEthereumAbiValueEncodeInt32(
      value,
    );
  }

  late final _TWEthereumAbiValueEncodeInt32_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiValueEncodeInt32>>(
          'TWEthereumAbiValueEncodeInt32');
  late final _dart_TWEthereumAbiValueEncodeInt32
      _TWEthereumAbiValueEncodeInt32 = _TWEthereumAbiValueEncodeInt32_ptr
          .asFunction<_dart_TWEthereumAbiValueEncodeInt32>();

  ffi.Pointer<ffi.Void> TWEthereumAbiValueEncodeUInt32(
    int value,
  ) {
    return _TWEthereumAbiValueEncodeUInt32(
      value,
    );
  }

  late final _TWEthereumAbiValueEncodeUInt32_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiValueEncodeUInt32>>(
          'TWEthereumAbiValueEncodeUInt32');
  late final _dart_TWEthereumAbiValueEncodeUInt32
      _TWEthereumAbiValueEncodeUInt32 = _TWEthereumAbiValueEncodeUInt32_ptr
          .asFunction<_dart_TWEthereumAbiValueEncodeUInt32>();

  /// Encode an int256.  Input value is represented as a 32-byte value
  ffi.Pointer<ffi.Void> TWEthereumAbiValueEncodeInt256(
    ffi.Pointer<ffi.Void> value,
  ) {
    return _TWEthereumAbiValueEncodeInt256(
      value,
    );
  }

  late final _TWEthereumAbiValueEncodeInt256_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiValueEncodeInt256>>(
          'TWEthereumAbiValueEncodeInt256');
  late final _dart_TWEthereumAbiValueEncodeInt256
      _TWEthereumAbiValueEncodeInt256 = _TWEthereumAbiValueEncodeInt256_ptr
          .asFunction<_dart_TWEthereumAbiValueEncodeInt256>();

  /// Encode an uint256.  Input value is represented as a 32-byte binary value
  ffi.Pointer<ffi.Void> TWEthereumAbiValueEncodeUInt256(
    ffi.Pointer<ffi.Void> value,
  ) {
    return _TWEthereumAbiValueEncodeUInt256(
      value,
    );
  }

  late final _TWEthereumAbiValueEncodeUInt256_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiValueEncodeUInt256>>(
          'TWEthereumAbiValueEncodeUInt256');
  late final _dart_TWEthereumAbiValueEncodeUInt256
      _TWEthereumAbiValueEncodeUInt256 = _TWEthereumAbiValueEncodeUInt256_ptr
          .asFunction<_dart_TWEthereumAbiValueEncodeUInt256>();

  /// Encode the 20 bytes of an address
  ffi.Pointer<ffi.Void> TWEthereumAbiValueEncodeAddress(
    ffi.Pointer<ffi.Void> value,
  ) {
    return _TWEthereumAbiValueEncodeAddress(
      value,
    );
  }

  late final _TWEthereumAbiValueEncodeAddress_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiValueEncodeAddress>>(
          'TWEthereumAbiValueEncodeAddress');
  late final _dart_TWEthereumAbiValueEncodeAddress
      _TWEthereumAbiValueEncodeAddress = _TWEthereumAbiValueEncodeAddress_ptr
          .asFunction<_dart_TWEthereumAbiValueEncodeAddress>();

  /// Encode a string by encoding its hash
  ffi.Pointer<ffi.Void> TWEthereumAbiValueEncodeString(
    ffi.Pointer<ffi.Void> value,
  ) {
    return _TWEthereumAbiValueEncodeString(
      value,
    );
  }

  late final _TWEthereumAbiValueEncodeString_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiValueEncodeString>>(
          'TWEthereumAbiValueEncodeString');
  late final _dart_TWEthereumAbiValueEncodeString
      _TWEthereumAbiValueEncodeString = _TWEthereumAbiValueEncodeString_ptr
          .asFunction<_dart_TWEthereumAbiValueEncodeString>();

  /// Encode a number of bytes, up to 32 bytes, padded on the right.  Longer arrays are truncated.
  ffi.Pointer<ffi.Void> TWEthereumAbiValueEncodeBytes(
    ffi.Pointer<ffi.Void> value,
  ) {
    return _TWEthereumAbiValueEncodeBytes(
      value,
    );
  }

  late final _TWEthereumAbiValueEncodeBytes_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiValueEncodeBytes>>(
          'TWEthereumAbiValueEncodeBytes');
  late final _dart_TWEthereumAbiValueEncodeBytes
      _TWEthereumAbiValueEncodeBytes = _TWEthereumAbiValueEncodeBytes_ptr
          .asFunction<_dart_TWEthereumAbiValueEncodeBytes>();

  /// Encode a dynamic number of bytes by encoding its hash
  ffi.Pointer<ffi.Void> TWEthereumAbiValueEncodeBytesDyn(
    ffi.Pointer<ffi.Void> value,
  ) {
    return _TWEthereumAbiValueEncodeBytesDyn(
      value,
    );
  }

  late final _TWEthereumAbiValueEncodeBytesDyn_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiValueEncodeBytesDyn>>(
          'TWEthereumAbiValueEncodeBytesDyn');
  late final _dart_TWEthereumAbiValueEncodeBytesDyn
      _TWEthereumAbiValueEncodeBytesDyn = _TWEthereumAbiValueEncodeBytesDyn_ptr
          .asFunction<_dart_TWEthereumAbiValueEncodeBytesDyn>();

  /// Decodes input data (bytes longer than 32 will be truncated) as uint256
  ffi.Pointer<ffi.Void> TWEthereumAbiValueDecodeUInt256(
    ffi.Pointer<ffi.Void> input,
  ) {
    return _TWEthereumAbiValueDecodeUInt256(
      input,
    );
  }

  late final _TWEthereumAbiValueDecodeUInt256_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiValueDecodeUInt256>>(
          'TWEthereumAbiValueDecodeUInt256');
  late final _dart_TWEthereumAbiValueDecodeUInt256
      _TWEthereumAbiValueDecodeUInt256 = _TWEthereumAbiValueDecodeUInt256_ptr
          .asFunction<_dart_TWEthereumAbiValueDecodeUInt256>();

  /// Decode an arbitrary type, return value as string
  ffi.Pointer<ffi.Void> TWEthereumAbiValueDecodeValue(
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> type,
  ) {
    return _TWEthereumAbiValueDecodeValue(
      input,
      type,
    );
  }

  late final _TWEthereumAbiValueDecodeValue_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiValueDecodeValue>>(
          'TWEthereumAbiValueDecodeValue');
  late final _dart_TWEthereumAbiValueDecodeValue
      _TWEthereumAbiValueDecodeValue = _TWEthereumAbiValueDecodeValue_ptr
          .asFunction<_dart_TWEthereumAbiValueDecodeValue>();

  /// Decode an array of given simple types.  Return a '\n'-separated string of elements
  ffi.Pointer<ffi.Void> TWEthereumAbiValueDecodeArray(
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> type,
  ) {
    return _TWEthereumAbiValueDecodeArray(
      input,
      type,
    );
  }

  late final _TWEthereumAbiValueDecodeArray_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiValueDecodeArray>>(
          'TWEthereumAbiValueDecodeArray');
  late final _dart_TWEthereumAbiValueDecodeArray
      _TWEthereumAbiValueDecodeArray = _TWEthereumAbiValueDecodeArray_ptr
          .asFunction<_dart_TWEthereumAbiValueDecodeArray>();

  /// Signs a transaction.
  ffi.Pointer<ffi.Void> TWAnySignerSign(
    ffi.Pointer<ffi.Void> input,
    int coin,
  ) {
    return _TWAnySignerSign(
      input,
      coin,
    );
  }

  late final _TWAnySignerSign_ptr =
      _lookup<ffi.NativeFunction<_c_TWAnySignerSign>>('TWAnySignerSign');
  late final _dart_TWAnySignerSign _TWAnySignerSign =
      _TWAnySignerSign_ptr.asFunction<_dart_TWAnySignerSign>();

  /// Signs a json transaction with private key.
  ffi.Pointer<ffi.Void> TWAnySignerSignJSON(
    ffi.Pointer<ffi.Void> json,
    ffi.Pointer<ffi.Void> key,
    int coin,
  ) {
    return _TWAnySignerSignJSON(
      json,
      key,
      coin,
    );
  }

  late final _TWAnySignerSignJSON_ptr =
      _lookup<ffi.NativeFunction<_c_TWAnySignerSignJSON>>(
          'TWAnySignerSignJSON');
  late final _dart_TWAnySignerSignJSON _TWAnySignerSignJSON =
      _TWAnySignerSignJSON_ptr.asFunction<_dart_TWAnySignerSignJSON>();

  bool TWAnySignerSupportsJSON(
    int coin,
  ) {
    return _TWAnySignerSupportsJSON(
          coin,
        ) !=
        0;
  }

  late final _TWAnySignerSupportsJSON_ptr =
      _lookup<ffi.NativeFunction<_c_TWAnySignerSupportsJSON>>(
          'TWAnySignerSupportsJSON');
  late final _dart_TWAnySignerSupportsJSON _TWAnySignerSupportsJSON =
      _TWAnySignerSupportsJSON_ptr.asFunction<_dart_TWAnySignerSupportsJSON>();

  /// Plan a transaction (for UTXO chains).
  ffi.Pointer<ffi.Void> TWAnySignerPlan(
    ffi.Pointer<ffi.Void> input,
    int coin,
  ) {
    return _TWAnySignerPlan(
      input,
      coin,
    );
  }

  late final _TWAnySignerPlan_ptr =
      _lookup<ffi.NativeFunction<_c_TWAnySignerPlan>>('TWAnySignerPlan');
  late final _dart_TWAnySignerPlan _TWAnySignerPlan =
      _TWAnySignerPlan_ptr.asFunction<_dart_TWAnySignerPlan>();

  /// Compares two addresses for equality.
  bool TWSegwitAddressEqual(
    ffi.Pointer<TWSegwitAddress> lhs,
    ffi.Pointer<TWSegwitAddress> rhs,
  ) {
    return _TWSegwitAddressEqual(
          lhs,
          rhs,
        ) !=
        0;
  }

  late final _TWSegwitAddressEqual_ptr =
      _lookup<ffi.NativeFunction<_c_TWSegwitAddressEqual>>(
          'TWSegwitAddressEqual');
  late final _dart_TWSegwitAddressEqual _TWSegwitAddressEqual =
      _TWSegwitAddressEqual_ptr.asFunction<_dart_TWSegwitAddressEqual>();

  /// Determines if the string is a valid Bech32 address.
  bool TWSegwitAddressIsValidString(
    ffi.Pointer<ffi.Void> string,
  ) {
    return _TWSegwitAddressIsValidString(
          string,
        ) !=
        0;
  }

  late final _TWSegwitAddressIsValidString_ptr =
      _lookup<ffi.NativeFunction<_c_TWSegwitAddressIsValidString>>(
          'TWSegwitAddressIsValidString');
  late final _dart_TWSegwitAddressIsValidString _TWSegwitAddressIsValidString =
      _TWSegwitAddressIsValidString_ptr.asFunction<
          _dart_TWSegwitAddressIsValidString>();

  /// Creates an address from a string representaion.
  ffi.Pointer<TWSegwitAddress> TWSegwitAddressCreateWithString(
    ffi.Pointer<ffi.Void> string,
  ) {
    return _TWSegwitAddressCreateWithString(
      string,
    );
  }

  late final _TWSegwitAddressCreateWithString_ptr =
      _lookup<ffi.NativeFunction<_c_TWSegwitAddressCreateWithString>>(
          'TWSegwitAddressCreateWithString');
  late final _dart_TWSegwitAddressCreateWithString
      _TWSegwitAddressCreateWithString = _TWSegwitAddressCreateWithString_ptr
          .asFunction<_dart_TWSegwitAddressCreateWithString>();

  /// Creates a segwit-version-0 address from a public key and HRP prefix.
  /// Taproot (v>=1) is not supported by this method.
  ffi.Pointer<TWSegwitAddress> TWSegwitAddressCreateWithPublicKey(
    int hrp,
    ffi.Pointer<TWPublicKey> publicKey,
  ) {
    return _TWSegwitAddressCreateWithPublicKey(
      hrp,
      publicKey,
    );
  }

  late final _TWSegwitAddressCreateWithPublicKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWSegwitAddressCreateWithPublicKey>>(
          'TWSegwitAddressCreateWithPublicKey');
  late final _dart_TWSegwitAddressCreateWithPublicKey
      _TWSegwitAddressCreateWithPublicKey =
      _TWSegwitAddressCreateWithPublicKey_ptr.asFunction<
          _dart_TWSegwitAddressCreateWithPublicKey>();

  void TWSegwitAddressDelete(
    ffi.Pointer<TWSegwitAddress> address,
  ) {
    return _TWSegwitAddressDelete(
      address,
    );
  }

  late final _TWSegwitAddressDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWSegwitAddressDelete>>(
          'TWSegwitAddressDelete');
  late final _dart_TWSegwitAddressDelete _TWSegwitAddressDelete =
      _TWSegwitAddressDelete_ptr.asFunction<_dart_TWSegwitAddressDelete>();

  /// Returns the address string representation.
  ffi.Pointer<ffi.Void> TWSegwitAddressDescription(
    ffi.Pointer<TWSegwitAddress> address,
  ) {
    return _TWSegwitAddressDescription(
      address,
    );
  }

  late final _TWSegwitAddressDescription_ptr =
      _lookup<ffi.NativeFunction<_c_TWSegwitAddressDescription>>(
          'TWSegwitAddressDescription');
  late final _dart_TWSegwitAddressDescription _TWSegwitAddressDescription =
      _TWSegwitAddressDescription_ptr.asFunction<
          _dart_TWSegwitAddressDescription>();

  /// Returns the human-readable part.
  int TWSegwitAddressHRP(
    ffi.Pointer<TWSegwitAddress> address,
  ) {
    return _TWSegwitAddressHRP(
      address,
    );
  }

  late final _TWSegwitAddressHRP_ptr =
      _lookup<ffi.NativeFunction<_c_TWSegwitAddressHRP>>('TWSegwitAddressHRP');
  late final _dart_TWSegwitAddressHRP _TWSegwitAddressHRP =
      _TWSegwitAddressHRP_ptr.asFunction<_dart_TWSegwitAddressHRP>();

  /// Returns the human-readable part.
  int TWSegwitAddressWitnessVersion(
    ffi.Pointer<TWSegwitAddress> address,
  ) {
    return _TWSegwitAddressWitnessVersion(
      address,
    );
  }

  late final _TWSegwitAddressWitnessVersion_ptr =
      _lookup<ffi.NativeFunction<_c_TWSegwitAddressWitnessVersion>>(
          'TWSegwitAddressWitnessVersion');
  late final _dart_TWSegwitAddressWitnessVersion
      _TWSegwitAddressWitnessVersion = _TWSegwitAddressWitnessVersion_ptr
          .asFunction<_dart_TWSegwitAddressWitnessVersion>();

  /// Returns the witness program
  ffi.Pointer<ffi.Void> TWSegwitAddressWitnessProgram(
    ffi.Pointer<TWSegwitAddress> address,
  ) {
    return _TWSegwitAddressWitnessProgram(
      address,
    );
  }

  late final _TWSegwitAddressWitnessProgram_ptr =
      _lookup<ffi.NativeFunction<_c_TWSegwitAddressWitnessProgram>>(
          'TWSegwitAddressWitnessProgram');
  late final _dart_TWSegwitAddressWitnessProgram
      _TWSegwitAddressWitnessProgram = _TWSegwitAddressWitnessProgram_ptr
          .asFunction<_dart_TWSegwitAddressWitnessProgram>();

  /// Compares two addresses for equality.
  bool TWBitcoinAddressEqual(
    ffi.Pointer<TWBitcoinAddress> lhs,
    ffi.Pointer<TWBitcoinAddress> rhs,
  ) {
    return _TWBitcoinAddressEqual(
          lhs,
          rhs,
        ) !=
        0;
  }

  late final _TWBitcoinAddressEqual_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinAddressEqual>>(
          'TWBitcoinAddressEqual');
  late final _dart_TWBitcoinAddressEqual _TWBitcoinAddressEqual =
      _TWBitcoinAddressEqual_ptr.asFunction<_dart_TWBitcoinAddressEqual>();

  /// Determines if the data is a valid Bitcoin address.
  bool TWBitcoinAddressIsValid(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWBitcoinAddressIsValid(
          data,
        ) !=
        0;
  }

  late final _TWBitcoinAddressIsValid_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinAddressIsValid>>(
          'TWBitcoinAddressIsValid');
  late final _dart_TWBitcoinAddressIsValid _TWBitcoinAddressIsValid =
      _TWBitcoinAddressIsValid_ptr.asFunction<_dart_TWBitcoinAddressIsValid>();

  /// Determines if the string is a valid Bitcoin address.
  bool TWBitcoinAddressIsValidString(
    ffi.Pointer<ffi.Void> string,
  ) {
    return _TWBitcoinAddressIsValidString(
          string,
        ) !=
        0;
  }

  late final _TWBitcoinAddressIsValidString_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinAddressIsValidString>>(
          'TWBitcoinAddressIsValidString');
  late final _dart_TWBitcoinAddressIsValidString
      _TWBitcoinAddressIsValidString = _TWBitcoinAddressIsValidString_ptr
          .asFunction<_dart_TWBitcoinAddressIsValidString>();

  /// Initializes an address from a base58 sring representaion.
  ffi.Pointer<TWBitcoinAddress> TWBitcoinAddressCreateWithString(
    ffi.Pointer<ffi.Void> string,
  ) {
    return _TWBitcoinAddressCreateWithString(
      string,
    );
  }

  late final _TWBitcoinAddressCreateWithString_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinAddressCreateWithString>>(
          'TWBitcoinAddressCreateWithString');
  late final _dart_TWBitcoinAddressCreateWithString
      _TWBitcoinAddressCreateWithString = _TWBitcoinAddressCreateWithString_ptr
          .asFunction<_dart_TWBitcoinAddressCreateWithString>();

  /// Initializes an address from raw data.
  ffi.Pointer<TWBitcoinAddress> TWBitcoinAddressCreateWithData(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWBitcoinAddressCreateWithData(
      data,
    );
  }

  late final _TWBitcoinAddressCreateWithData_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinAddressCreateWithData>>(
          'TWBitcoinAddressCreateWithData');
  late final _dart_TWBitcoinAddressCreateWithData
      _TWBitcoinAddressCreateWithData = _TWBitcoinAddressCreateWithData_ptr
          .asFunction<_dart_TWBitcoinAddressCreateWithData>();

  /// Initializes an address from a public key and a prefix byte.
  ffi.Pointer<TWBitcoinAddress> TWBitcoinAddressCreateWithPublicKey(
    ffi.Pointer<TWPublicKey> publicKey,
    int prefix,
  ) {
    return _TWBitcoinAddressCreateWithPublicKey(
      publicKey,
      prefix,
    );
  }

  late final _TWBitcoinAddressCreateWithPublicKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinAddressCreateWithPublicKey>>(
          'TWBitcoinAddressCreateWithPublicKey');
  late final _dart_TWBitcoinAddressCreateWithPublicKey
      _TWBitcoinAddressCreateWithPublicKey =
      _TWBitcoinAddressCreateWithPublicKey_ptr.asFunction<
          _dart_TWBitcoinAddressCreateWithPublicKey>();

  void TWBitcoinAddressDelete(
    ffi.Pointer<TWBitcoinAddress> address,
  ) {
    return _TWBitcoinAddressDelete(
      address,
    );
  }

  late final _TWBitcoinAddressDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinAddressDelete>>(
          'TWBitcoinAddressDelete');
  late final _dart_TWBitcoinAddressDelete _TWBitcoinAddressDelete =
      _TWBitcoinAddressDelete_ptr.asFunction<_dart_TWBitcoinAddressDelete>();

  /// Returns the address base58 string representation.
  ffi.Pointer<ffi.Void> TWBitcoinAddressDescription(
    ffi.Pointer<TWBitcoinAddress> address,
  ) {
    return _TWBitcoinAddressDescription(
      address,
    );
  }

  late final _TWBitcoinAddressDescription_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinAddressDescription>>(
          'TWBitcoinAddressDescription');
  late final _dart_TWBitcoinAddressDescription _TWBitcoinAddressDescription =
      _TWBitcoinAddressDescription_ptr.asFunction<
          _dart_TWBitcoinAddressDescription>();

  /// Returns the address prefix.
  int TWBitcoinAddressPrefix(
    ffi.Pointer<TWBitcoinAddress> address,
  ) {
    return _TWBitcoinAddressPrefix(
      address,
    );
  }

  late final _TWBitcoinAddressPrefix_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinAddressPrefix>>(
          'TWBitcoinAddressPrefix');
  late final _dart_TWBitcoinAddressPrefix _TWBitcoinAddressPrefix =
      _TWBitcoinAddressPrefix_ptr.asFunction<_dart_TWBitcoinAddressPrefix>();

  /// Returns the keyhash data.
  ffi.Pointer<ffi.Void> TWBitcoinAddressKeyhash(
    ffi.Pointer<TWBitcoinAddress> address,
  ) {
    return _TWBitcoinAddressKeyhash(
      address,
    );
  }

  late final _TWBitcoinAddressKeyhash_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinAddressKeyhash>>(
          'TWBitcoinAddressKeyhash');
  late final _dart_TWBitcoinAddressKeyhash _TWBitcoinAddressKeyhash =
      _TWBitcoinAddressKeyhash_ptr.asFunction<_dart_TWBitcoinAddressKeyhash>();

  /// Compares two addresses for equality.
  bool TWAnyAddressEqual(
    ffi.Pointer<TWAnyAddress> lhs,
    ffi.Pointer<TWAnyAddress> rhs,
  ) {
    return _TWAnyAddressEqual(
          lhs,
          rhs,
        ) !=
        0;
  }

  late final _TWAnyAddressEqual_ptr =
      _lookup<ffi.NativeFunction<_c_TWAnyAddressEqual>>('TWAnyAddressEqual');
  late final _dart_TWAnyAddressEqual _TWAnyAddressEqual =
      _TWAnyAddressEqual_ptr.asFunction<_dart_TWAnyAddressEqual>();

  /// Determines if the string is a valid Any address.
  bool TWAnyAddressIsValid(
    ffi.Pointer<ffi.Void> string,
    int coin,
  ) {
    return _TWAnyAddressIsValid(
          string,
          coin,
        ) !=
        0;
  }

  late final _TWAnyAddressIsValid_ptr =
      _lookup<ffi.NativeFunction<_c_TWAnyAddressIsValid>>(
          'TWAnyAddressIsValid');
  late final _dart_TWAnyAddressIsValid _TWAnyAddressIsValid =
      _TWAnyAddressIsValid_ptr.asFunction<_dart_TWAnyAddressIsValid>();

  /// Creates an address from a string representaion.
  ffi.Pointer<TWAnyAddress> TWAnyAddressCreateWithString(
    ffi.Pointer<ffi.Void> string,
    int coin,
  ) {
    return _TWAnyAddressCreateWithString(
      string,
      coin,
    );
  }

  late final _TWAnyAddressCreateWithString_ptr =
      _lookup<ffi.NativeFunction<_c_TWAnyAddressCreateWithString>>(
          'TWAnyAddressCreateWithString');
  late final _dart_TWAnyAddressCreateWithString _TWAnyAddressCreateWithString =
      _TWAnyAddressCreateWithString_ptr.asFunction<
          _dart_TWAnyAddressCreateWithString>();

  /// Creates an address from a public key.
  ffi.Pointer<TWAnyAddress> TWAnyAddressCreateWithPublicKey(
    ffi.Pointer<TWPublicKey> publicKey,
    int coin,
  ) {
    return _TWAnyAddressCreateWithPublicKey(
      publicKey,
      coin,
    );
  }

  late final _TWAnyAddressCreateWithPublicKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWAnyAddressCreateWithPublicKey>>(
          'TWAnyAddressCreateWithPublicKey');
  late final _dart_TWAnyAddressCreateWithPublicKey
      _TWAnyAddressCreateWithPublicKey = _TWAnyAddressCreateWithPublicKey_ptr
          .asFunction<_dart_TWAnyAddressCreateWithPublicKey>();

  void TWAnyAddressDelete(
    ffi.Pointer<TWAnyAddress> address,
  ) {
    return _TWAnyAddressDelete(
      address,
    );
  }

  late final _TWAnyAddressDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWAnyAddressDelete>>('TWAnyAddressDelete');
  late final _dart_TWAnyAddressDelete _TWAnyAddressDelete =
      _TWAnyAddressDelete_ptr.asFunction<_dart_TWAnyAddressDelete>();

  /// Returns the address string representation.
  ffi.Pointer<ffi.Void> TWAnyAddressDescription(
    ffi.Pointer<TWAnyAddress> address,
  ) {
    return _TWAnyAddressDescription(
      address,
    );
  }

  late final _TWAnyAddressDescription_ptr =
      _lookup<ffi.NativeFunction<_c_TWAnyAddressDescription>>(
          'TWAnyAddressDescription');
  late final _dart_TWAnyAddressDescription _TWAnyAddressDescription =
      _TWAnyAddressDescription_ptr.asFunction<_dart_TWAnyAddressDescription>();

  /// Returns coin type of address.
  int TWAnyAddressCoin(
    ffi.Pointer<TWAnyAddress> address,
  ) {
    return _TWAnyAddressCoin(
      address,
    );
  }

  late final _TWAnyAddressCoin_ptr =
      _lookup<ffi.NativeFunction<_c_TWAnyAddressCoin>>('TWAnyAddressCoin');
  late final _dart_TWAnyAddressCoin _TWAnyAddressCoin =
      _TWAnyAddressCoin_ptr.asFunction<_dart_TWAnyAddressCoin>();

  /// Returns underlaying data (public key or key hash)
  ffi.Pointer<ffi.Void> TWAnyAddressData(
    ffi.Pointer<TWAnyAddress> address,
  ) {
    return _TWAnyAddressData(
      address,
    );
  }

  late final _TWAnyAddressData_ptr =
      _lookup<ffi.NativeFunction<_c_TWAnyAddressData>>('TWAnyAddressData');
  late final _dart_TWAnyAddressData _TWAnyAddressData =
      _TWAnyAddressData_ptr.asFunction<_dart_TWAnyAddressData>();

  /// Build a THORChainSwap transaction input. Input is SwapInput protobuf, return is SwapOutput.
  ffi.Pointer<ffi.Void> TWTHORChainSwapBuildSwap(
    ffi.Pointer<ffi.Void> input,
  ) {
    return _TWTHORChainSwapBuildSwap(
      input,
    );
  }

  late final _TWTHORChainSwapBuildSwap_ptr =
      _lookup<ffi.NativeFunction<_c_TWTHORChainSwapBuildSwap>>(
          'TWTHORChainSwapBuildSwap');
  late final _dart_TWTHORChainSwapBuildSwap _TWTHORChainSwapBuildSwap =
      _TWTHORChainSwapBuildSwap_ptr.asFunction<
          _dart_TWTHORChainSwapBuildSwap>();

  /// Encodes data as a Base58 string, including the checksum.
  ffi.Pointer<ffi.Void> TWBase58Encode(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWBase58Encode(
      data,
    );
  }

  late final _TWBase58Encode_ptr =
      _lookup<ffi.NativeFunction<_c_TWBase58Encode>>('TWBase58Encode');
  late final _dart_TWBase58Encode _TWBase58Encode =
      _TWBase58Encode_ptr.asFunction<_dart_TWBase58Encode>();

  /// Encodes data as a Base58 string, not including the checksum.
  ffi.Pointer<ffi.Void> TWBase58EncodeNoCheck(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWBase58EncodeNoCheck(
      data,
    );
  }

  late final _TWBase58EncodeNoCheck_ptr =
      _lookup<ffi.NativeFunction<_c_TWBase58EncodeNoCheck>>(
          'TWBase58EncodeNoCheck');
  late final _dart_TWBase58EncodeNoCheck _TWBase58EncodeNoCheck =
      _TWBase58EncodeNoCheck_ptr.asFunction<_dart_TWBase58EncodeNoCheck>();

  /// Decodes a Base58 string checking the checksum.
  ffi.Pointer<ffi.Void> TWBase58Decode(
    ffi.Pointer<ffi.Void> string,
  ) {
    return _TWBase58Decode(
      string,
    );
  }

  late final _TWBase58Decode_ptr =
      _lookup<ffi.NativeFunction<_c_TWBase58Decode>>('TWBase58Decode');
  late final _dart_TWBase58Decode _TWBase58Decode =
      _TWBase58Decode_ptr.asFunction<_dart_TWBase58Decode>();

  /// Decodes a Base58 string with no checksum.
  ffi.Pointer<ffi.Void> TWBase58DecodeNoCheck(
    ffi.Pointer<ffi.Void> string,
  ) {
    return _TWBase58DecodeNoCheck(
      string,
    );
  }

  late final _TWBase58DecodeNoCheck_ptr =
      _lookup<ffi.NativeFunction<_c_TWBase58DecodeNoCheck>>(
          'TWBase58DecodeNoCheck');
  late final _dart_TWBase58DecodeNoCheck _TWBase58DecodeNoCheck =
      _TWBase58DecodeNoCheck_ptr.asFunction<_dart_TWBase58DecodeNoCheck>();

  /// Compares two addresses for equality.
  bool TWRippleXAddressEqual(
    ffi.Pointer<TWRippleXAddress> lhs,
    ffi.Pointer<TWRippleXAddress> rhs,
  ) {
    return _TWRippleXAddressEqual(
          lhs,
          rhs,
        ) !=
        0;
  }

  late final _TWRippleXAddressEqual_ptr =
      _lookup<ffi.NativeFunction<_c_TWRippleXAddressEqual>>(
          'TWRippleXAddressEqual');
  late final _dart_TWRippleXAddressEqual _TWRippleXAddressEqual =
      _TWRippleXAddressEqual_ptr.asFunction<_dart_TWRippleXAddressEqual>();

  /// Determines if the string is a valid Ripple address.
  bool TWRippleXAddressIsValidString(
    ffi.Pointer<ffi.Void> string,
  ) {
    return _TWRippleXAddressIsValidString(
          string,
        ) !=
        0;
  }

  late final _TWRippleXAddressIsValidString_ptr =
      _lookup<ffi.NativeFunction<_c_TWRippleXAddressIsValidString>>(
          'TWRippleXAddressIsValidString');
  late final _dart_TWRippleXAddressIsValidString
      _TWRippleXAddressIsValidString = _TWRippleXAddressIsValidString_ptr
          .asFunction<_dart_TWRippleXAddressIsValidString>();

  /// Creates an address from a string representaion.
  ffi.Pointer<TWRippleXAddress> TWRippleXAddressCreateWithString(
    ffi.Pointer<ffi.Void> string,
  ) {
    return _TWRippleXAddressCreateWithString(
      string,
    );
  }

  late final _TWRippleXAddressCreateWithString_ptr =
      _lookup<ffi.NativeFunction<_c_TWRippleXAddressCreateWithString>>(
          'TWRippleXAddressCreateWithString');
  late final _dart_TWRippleXAddressCreateWithString
      _TWRippleXAddressCreateWithString = _TWRippleXAddressCreateWithString_ptr
          .asFunction<_dart_TWRippleXAddressCreateWithString>();

  /// Creates an address from a public key and destination tag.
  ffi.Pointer<TWRippleXAddress> TWRippleXAddressCreateWithPublicKey(
    ffi.Pointer<TWPublicKey> publicKey,
    int tag,
  ) {
    return _TWRippleXAddressCreateWithPublicKey(
      publicKey,
      tag,
    );
  }

  late final _TWRippleXAddressCreateWithPublicKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWRippleXAddressCreateWithPublicKey>>(
          'TWRippleXAddressCreateWithPublicKey');
  late final _dart_TWRippleXAddressCreateWithPublicKey
      _TWRippleXAddressCreateWithPublicKey =
      _TWRippleXAddressCreateWithPublicKey_ptr.asFunction<
          _dart_TWRippleXAddressCreateWithPublicKey>();

  void TWRippleXAddressDelete(
    ffi.Pointer<TWRippleXAddress> address,
  ) {
    return _TWRippleXAddressDelete(
      address,
    );
  }

  late final _TWRippleXAddressDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWRippleXAddressDelete>>(
          'TWRippleXAddressDelete');
  late final _dart_TWRippleXAddressDelete _TWRippleXAddressDelete =
      _TWRippleXAddressDelete_ptr.asFunction<_dart_TWRippleXAddressDelete>();

  /// Returns the address string representation.
  ffi.Pointer<ffi.Void> TWRippleXAddressDescription(
    ffi.Pointer<TWRippleXAddress> address,
  ) {
    return _TWRippleXAddressDescription(
      address,
    );
  }

  late final _TWRippleXAddressDescription_ptr =
      _lookup<ffi.NativeFunction<_c_TWRippleXAddressDescription>>(
          'TWRippleXAddressDescription');
  late final _dart_TWRippleXAddressDescription _TWRippleXAddressDescription =
      _TWRippleXAddressDescription_ptr.asFunction<
          _dart_TWRippleXAddressDescription>();

  /// Returns the destination tag.
  int TWRippleXAddressTag(
    ffi.Pointer<TWRippleXAddress> address,
  ) {
    return _TWRippleXAddressTag(
      address,
    );
  }

  late final _TWRippleXAddressTag_ptr =
      _lookup<ffi.NativeFunction<_c_TWRippleXAddressTag>>(
          'TWRippleXAddressTag');
  late final _dart_TWRippleXAddressTag _TWRippleXAddressTag =
      _TWRippleXAddressTag_ptr.asFunction<_dart_TWRippleXAddressTag>();

  /// Derives a key from a password and a salt using PBKDF2 + Sha256.
  ///
  /// \param password is the master password from which a derived key is generated
  /// \param salt is a sequence of bits, known as a cryptographic salt
  /// \param iterations is the number of iterations desired
  /// \param dkLen is the desired bit-length of the derived key
  ffi.Pointer<ffi.Void> TWPBKDF2HmacSha256(
    ffi.Pointer<ffi.Void> password,
    ffi.Pointer<ffi.Void> salt,
    int iterations,
    int dkLen,
  ) {
    return _TWPBKDF2HmacSha256(
      password,
      salt,
      iterations,
      dkLen,
    );
  }

  late final _TWPBKDF2HmacSha256_ptr =
      _lookup<ffi.NativeFunction<_c_TWPBKDF2HmacSha256>>('TWPBKDF2HmacSha256');
  late final _dart_TWPBKDF2HmacSha256 _TWPBKDF2HmacSha256 =
      _TWPBKDF2HmacSha256_ptr.asFunction<_dart_TWPBKDF2HmacSha256>();

  /// Derives a key from a password and a salt using PBKDF2 + Sha512.
  ///
  /// \param password is the master password from which a derived key is generated
  /// \param salt is a sequence of bits, known as a cryptographic salt
  /// \param iterations is the number of iterations desired
  /// \param dkLen is the desired bit-length of the derived key
  ffi.Pointer<ffi.Void> TWPBKDF2HmacSha512(
    ffi.Pointer<ffi.Void> password,
    ffi.Pointer<ffi.Void> salt,
    int iterations,
    int dkLen,
  ) {
    return _TWPBKDF2HmacSha512(
      password,
      salt,
      iterations,
      dkLen,
    );
  }

  late final _TWPBKDF2HmacSha512_ptr =
      _lookup<ffi.NativeFunction<_c_TWPBKDF2HmacSha512>>('TWPBKDF2HmacSha512');
  late final _dart_TWPBKDF2HmacSha512 _TWPBKDF2HmacSha512 =
      _TWPBKDF2HmacSha512_ptr.asFunction<_dart_TWPBKDF2HmacSha512>();

  /// Encode function to Eth ABI binary
  ffi.Pointer<ffi.Void> TWEthereumAbiEncode(
    ffi.Pointer<TWEthereumAbiFunction> fn,
  ) {
    return _TWEthereumAbiEncode(
      fn,
    );
  }

  late final _TWEthereumAbiEncode_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiEncode>>(
          'TWEthereumAbiEncode');
  late final _dart_TWEthereumAbiEncode _TWEthereumAbiEncode =
      _TWEthereumAbiEncode_ptr.asFunction<_dart_TWEthereumAbiEncode>();

  /// Decode function output from Eth ABI binary, fill output parameters
  bool TWEthereumAbiDecodeOutput(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    ffi.Pointer<ffi.Void> encoded,
  ) {
    return _TWEthereumAbiDecodeOutput(
          fn,
          encoded,
        ) !=
        0;
  }

  late final _TWEthereumAbiDecodeOutput_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiDecodeOutput>>(
          'TWEthereumAbiDecodeOutput');
  late final _dart_TWEthereumAbiDecodeOutput _TWEthereumAbiDecodeOutput =
      _TWEthereumAbiDecodeOutput_ptr.asFunction<
          _dart_TWEthereumAbiDecodeOutput>();

  /// Decode function call data to human readable json format, according to input abi json
  ffi.Pointer<ffi.Void> TWEthereumAbiDecodeCall(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> abi,
  ) {
    return _TWEthereumAbiDecodeCall(
      data,
      abi,
    );
  }

  late final _TWEthereumAbiDecodeCall_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiDecodeCall>>(
          'TWEthereumAbiDecodeCall');
  late final _dart_TWEthereumAbiDecodeCall _TWEthereumAbiDecodeCall =
      _TWEthereumAbiDecodeCall_ptr.asFunction<_dart_TWEthereumAbiDecodeCall>();

  /// Compute the hash of a struct, used for signing, according to EIP712 ("v4").
  /// Input is a Json object (as string), with following fields:
  /// - types: map of used struct types (see makeTypes())
  /// - primaryType: the type of the message (string)
  /// - domain: EIP712 domain specifier values
  /// - message: the message (object).
  /// Throws on error.
  /// Example input:
  /// R"({
  /// "types": {
  /// "EIP712Domain": [
  /// {"name": "name", "type": "string"},
  /// {"name": "version", "type": "string"},
  /// {"name": "chainId", "type": "uint256"},
  /// {"name": "verifyingContract", "type": "address"}
  /// ],
  /// "Person": [
  /// {"name": "name", "type": "string"},
  /// {"name": "wallet", "type": "address"}
  /// ]
  /// },
  /// "primaryType": "Person",
  /// "domain": {
  /// "name": "Ether Person",
  /// "version": "1",
  /// "chainId": 1,
  /// "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"
  /// },
  /// "message": {
  /// "name": "Cow",
  /// "wallet": "CD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"
  /// }
  /// })");
  /// On error, empty Data is returned.
  /// Returned data must be deleted (hint: use WRAPD() macro).
  ffi.Pointer<ffi.Void> TWEthereumAbiEncodeTyped(
    ffi.Pointer<ffi.Void> messageJson,
  ) {
    return _TWEthereumAbiEncodeTyped(
      messageJson,
    );
  }

  late final _TWEthereumAbiEncodeTyped_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiEncodeTyped>>(
          'TWEthereumAbiEncodeTyped');
  late final _dart_TWEthereumAbiEncodeTyped _TWEthereumAbiEncodeTyped =
      _TWEthereumAbiEncodeTyped_ptr.asFunction<
          _dart_TWEthereumAbiEncodeTyped>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _TWStellarPassphrase_Stellar =
      _lookup<ffi.Pointer<ffi.Int8>>('TWStellarPassphrase_Stellar');

  ffi.Pointer<ffi.Int8> get TWStellarPassphrase_Stellar =>
      _TWStellarPassphrase_Stellar.value;

  set TWStellarPassphrase_Stellar(ffi.Pointer<ffi.Int8> value) =>
      _TWStellarPassphrase_Stellar.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _TWStellarPassphrase_Kin =
      _lookup<ffi.Pointer<ffi.Int8>>('TWStellarPassphrase_Kin');

  ffi.Pointer<ffi.Int8> get TWStellarPassphrase_Kin =>
      _TWStellarPassphrase_Kin.value;

  set TWStellarPassphrase_Kin(ffi.Pointer<ffi.Int8> value) =>
      _TWStellarPassphrase_Kin.value = value;

  late final ffi.Pointer<ffi.Uint64> _TWHashSHA1Length =
      _lookup<ffi.Uint64>('TWHashSHA1Length');

  int get TWHashSHA1Length => _TWHashSHA1Length.value;

  set TWHashSHA1Length(int value) => _TWHashSHA1Length.value = value;

  late final ffi.Pointer<ffi.Uint64> _TWHashSHA256Length =
      _lookup<ffi.Uint64>('TWHashSHA256Length');

  int get TWHashSHA256Length => _TWHashSHA256Length.value;

  set TWHashSHA256Length(int value) => _TWHashSHA256Length.value = value;

  late final ffi.Pointer<ffi.Uint64> _TWHashSHA512Length =
      _lookup<ffi.Uint64>('TWHashSHA512Length');

  int get TWHashSHA512Length => _TWHashSHA512Length.value;

  set TWHashSHA512Length(int value) => _TWHashSHA512Length.value = value;

  late final ffi.Pointer<ffi.Uint64> _TWHashRipemdLength =
      _lookup<ffi.Uint64>('TWHashRipemdLength');

  int get TWHashRipemdLength => _TWHashRipemdLength.value;

  set TWHashRipemdLength(int value) => _TWHashRipemdLength.value = value;

  /// Computes the SHA1 of a block of data.
  ffi.Pointer<ffi.Void> TWHashSHA1(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashSHA1(
      data,
    );
  }

  late final _TWHashSHA1_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashSHA1>>('TWHashSHA1');
  late final _dart_TWHashSHA1 _TWHashSHA1 =
      _TWHashSHA1_ptr.asFunction<_dart_TWHashSHA1>();

  ffi.Pointer<ffi.Void> TWHashSHA256(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashSHA256(
      data,
    );
  }

  late final _TWHashSHA256_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashSHA256>>('TWHashSHA256');
  late final _dart_TWHashSHA256 _TWHashSHA256 =
      _TWHashSHA256_ptr.asFunction<_dart_TWHashSHA256>();

  ffi.Pointer<ffi.Void> TWHashSHA512(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashSHA512(
      data,
    );
  }

  late final _TWHashSHA512_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashSHA512>>('TWHashSHA512');
  late final _dart_TWHashSHA512 _TWHashSHA512 =
      _TWHashSHA512_ptr.asFunction<_dart_TWHashSHA512>();

  ffi.Pointer<ffi.Void> TWHashSHA512_256(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashSHA512_256(
      data,
    );
  }

  late final _TWHashSHA512_256_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashSHA512_256>>('TWHashSHA512_256');
  late final _dart_TWHashSHA512_256 _TWHashSHA512_256 =
      _TWHashSHA512_256_ptr.asFunction<_dart_TWHashSHA512_256>();

  ffi.Pointer<ffi.Void> TWHashKeccak256(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashKeccak256(
      data,
    );
  }

  late final _TWHashKeccak256_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashKeccak256>>('TWHashKeccak256');
  late final _dart_TWHashKeccak256 _TWHashKeccak256 =
      _TWHashKeccak256_ptr.asFunction<_dart_TWHashKeccak256>();

  ffi.Pointer<ffi.Void> TWHashKeccak512(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashKeccak512(
      data,
    );
  }

  late final _TWHashKeccak512_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashKeccak512>>('TWHashKeccak512');
  late final _dart_TWHashKeccak512 _TWHashKeccak512 =
      _TWHashKeccak512_ptr.asFunction<_dart_TWHashKeccak512>();

  ffi.Pointer<ffi.Void> TWHashSHA3_256(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashSHA3_256(
      data,
    );
  }

  late final _TWHashSHA3_256_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashSHA3_256>>('TWHashSHA3_256');
  late final _dart_TWHashSHA3_256 _TWHashSHA3_256 =
      _TWHashSHA3_256_ptr.asFunction<_dart_TWHashSHA3_256>();

  ffi.Pointer<ffi.Void> TWHashSHA3_512(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashSHA3_512(
      data,
    );
  }

  late final _TWHashSHA3_512_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashSHA3_512>>('TWHashSHA3_512');
  late final _dart_TWHashSHA3_512 _TWHashSHA3_512 =
      _TWHashSHA3_512_ptr.asFunction<_dart_TWHashSHA3_512>();

  ffi.Pointer<ffi.Void> TWHashRIPEMD(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashRIPEMD(
      data,
    );
  }

  late final _TWHashRIPEMD_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashRIPEMD>>('TWHashRIPEMD');
  late final _dart_TWHashRIPEMD _TWHashRIPEMD =
      _TWHashRIPEMD_ptr.asFunction<_dart_TWHashRIPEMD>();

  ffi.Pointer<ffi.Void> TWHashBlake256(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashBlake256(
      data,
    );
  }

  late final _TWHashBlake256_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashBlake256>>('TWHashBlake256');
  late final _dart_TWHashBlake256 _TWHashBlake256 =
      _TWHashBlake256_ptr.asFunction<_dart_TWHashBlake256>();

  ffi.Pointer<ffi.Void> TWHashBlake2b(
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    return _TWHashBlake2b(
      data,
      size,
    );
  }

  late final _TWHashBlake2b_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashBlake2b>>('TWHashBlake2b');
  late final _dart_TWHashBlake2b _TWHashBlake2b =
      _TWHashBlake2b_ptr.asFunction<_dart_TWHashBlake2b>();

  ffi.Pointer<ffi.Void> TWHashGroestl512(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashGroestl512(
      data,
    );
  }

  late final _TWHashGroestl512_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashGroestl512>>('TWHashGroestl512');
  late final _dart_TWHashGroestl512 _TWHashGroestl512 =
      _TWHashGroestl512_ptr.asFunction<_dart_TWHashGroestl512>();

  ffi.Pointer<ffi.Void> TWHashXXHash64(
    ffi.Pointer<ffi.Void> data,
    int seed,
  ) {
    return _TWHashXXHash64(
      data,
      seed,
    );
  }

  late final _TWHashXXHash64_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashXXHash64>>('TWHashXXHash64');
  late final _dart_TWHashXXHash64 _TWHashXXHash64 =
      _TWHashXXHash64_ptr.asFunction<_dart_TWHashXXHash64>();

  ffi.Pointer<ffi.Void> TWHashTwoXXHash64Concat(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashTwoXXHash64Concat(
      data,
    );
  }

  late final _TWHashTwoXXHash64Concat_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashTwoXXHash64Concat>>(
          'TWHashTwoXXHash64Concat');
  late final _dart_TWHashTwoXXHash64Concat _TWHashTwoXXHash64Concat =
      _TWHashTwoXXHash64Concat_ptr.asFunction<_dart_TWHashTwoXXHash64Concat>();

  ffi.Pointer<ffi.Void> TWHashSHA256SHA256(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashSHA256SHA256(
      data,
    );
  }

  late final _TWHashSHA256SHA256_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashSHA256SHA256>>('TWHashSHA256SHA256');
  late final _dart_TWHashSHA256SHA256 _TWHashSHA256SHA256 =
      _TWHashSHA256SHA256_ptr.asFunction<_dart_TWHashSHA256SHA256>();

  ffi.Pointer<ffi.Void> TWHashSHA256RIPEMD(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashSHA256RIPEMD(
      data,
    );
  }

  late final _TWHashSHA256RIPEMD_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashSHA256RIPEMD>>('TWHashSHA256RIPEMD');
  late final _dart_TWHashSHA256RIPEMD _TWHashSHA256RIPEMD =
      _TWHashSHA256RIPEMD_ptr.asFunction<_dart_TWHashSHA256RIPEMD>();

  ffi.Pointer<ffi.Void> TWHashSHA3_256RIPEMD(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashSHA3_256RIPEMD(
      data,
    );
  }

  late final _TWHashSHA3_256RIPEMD_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashSHA3_256RIPEMD>>(
          'TWHashSHA3_256RIPEMD');
  late final _dart_TWHashSHA3_256RIPEMD _TWHashSHA3_256RIPEMD =
      _TWHashSHA3_256RIPEMD_ptr.asFunction<_dart_TWHashSHA3_256RIPEMD>();

  ffi.Pointer<ffi.Void> TWHashBlake256Blake256(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashBlake256Blake256(
      data,
    );
  }

  late final _TWHashBlake256Blake256_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashBlake256Blake256>>(
          'TWHashBlake256Blake256');
  late final _dart_TWHashBlake256Blake256 _TWHashBlake256Blake256 =
      _TWHashBlake256Blake256_ptr.asFunction<_dart_TWHashBlake256Blake256>();

  ffi.Pointer<ffi.Void> TWHashBlake256RIPEMD(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashBlake256RIPEMD(
      data,
    );
  }

  late final _TWHashBlake256RIPEMD_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashBlake256RIPEMD>>(
          'TWHashBlake256RIPEMD');
  late final _dart_TWHashBlake256RIPEMD _TWHashBlake256RIPEMD =
      _TWHashBlake256RIPEMD_ptr.asFunction<_dart_TWHashBlake256RIPEMD>();

  ffi.Pointer<ffi.Void> TWHashGroestl512Groestl512(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWHashGroestl512Groestl512(
      data,
    );
  }

  late final _TWHashGroestl512Groestl512_ptr =
      _lookup<ffi.NativeFunction<_c_TWHashGroestl512Groestl512>>(
          'TWHashGroestl512Groestl512');
  late final _dart_TWHashGroestl512Groestl512 _TWHashGroestl512Groestl512 =
      _TWHashGroestl512Groestl512_ptr.asFunction<
          _dart_TWHashGroestl512Groestl512>();

  /// Loads a key from a file.  Returned object needs to be deleted.
  ffi.Pointer<TWStoredKey> TWStoredKeyLoad(
    ffi.Pointer<ffi.Void> path,
  ) {
    return _TWStoredKeyLoad(
      path,
    );
  }

  late final _TWStoredKeyLoad_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyLoad>>('TWStoredKeyLoad');
  late final _dart_TWStoredKeyLoad _TWStoredKeyLoad =
      _TWStoredKeyLoad_ptr.asFunction<_dart_TWStoredKeyLoad>();

  /// Imports a private key.  Returned object needs to be deleted.
  ffi.Pointer<TWStoredKey> TWStoredKeyImportPrivateKey(
    ffi.Pointer<ffi.Void> privateKey,
    ffi.Pointer<ffi.Void> name,
    ffi.Pointer<ffi.Void> password,
    int coin,
  ) {
    return _TWStoredKeyImportPrivateKey(
      privateKey,
      name,
      password,
      coin,
    );
  }

  late final _TWStoredKeyImportPrivateKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyImportPrivateKey>>(
          'TWStoredKeyImportPrivateKey');
  late final _dart_TWStoredKeyImportPrivateKey _TWStoredKeyImportPrivateKey =
      _TWStoredKeyImportPrivateKey_ptr.asFunction<
          _dart_TWStoredKeyImportPrivateKey>();

  /// Imports an HD wallet.  Returned object needs to be deleted.
  ffi.Pointer<TWStoredKey> TWStoredKeyImportHDWallet(
    ffi.Pointer<ffi.Void> mnemonic,
    ffi.Pointer<ffi.Void> name,
    ffi.Pointer<ffi.Void> password,
    int coin,
  ) {
    return _TWStoredKeyImportHDWallet(
      mnemonic,
      name,
      password,
      coin,
    );
  }

  late final _TWStoredKeyImportHDWallet_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyImportHDWallet>>(
          'TWStoredKeyImportHDWallet');
  late final _dart_TWStoredKeyImportHDWallet _TWStoredKeyImportHDWallet =
      _TWStoredKeyImportHDWallet_ptr.asFunction<
          _dart_TWStoredKeyImportHDWallet>();

  /// Imports a key from JSON.  Returned object needs to be deleted.
  ffi.Pointer<TWStoredKey> TWStoredKeyImportJSON(
    ffi.Pointer<ffi.Void> json,
  ) {
    return _TWStoredKeyImportJSON(
      json,
    );
  }

  late final _TWStoredKeyImportJSON_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyImportJSON>>(
          'TWStoredKeyImportJSON');
  late final _dart_TWStoredKeyImportJSON _TWStoredKeyImportJSON =
      _TWStoredKeyImportJSON_ptr.asFunction<_dart_TWStoredKeyImportJSON>();

  /// Creates a new key, with given encrpytion strength level.  Returned object needs to be deleted.
  ffi.Pointer<TWStoredKey> TWStoredKeyCreateLevel(
    ffi.Pointer<ffi.Void> name,
    ffi.Pointer<ffi.Void> password,
    int encryptionLevel,
  ) {
    return _TWStoredKeyCreateLevel(
      name,
      password,
      encryptionLevel,
    );
  }

  late final _TWStoredKeyCreateLevel_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyCreateLevel>>(
          'TWStoredKeyCreateLevel');
  late final _dart_TWStoredKeyCreateLevel _TWStoredKeyCreateLevel =
      _TWStoredKeyCreateLevel_ptr.asFunction<_dart_TWStoredKeyCreateLevel>();

  /// DEPRECATED, use TWStoredKeyCreateLevel. Creates a new key.  Returned object needs to be deleted.
  ffi.Pointer<TWStoredKey> TWStoredKeyCreate(
    ffi.Pointer<ffi.Void> name,
    ffi.Pointer<ffi.Void> password,
  ) {
    return _TWStoredKeyCreate(
      name,
      password,
    );
  }

  late final _TWStoredKeyCreate_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyCreate>>('TWStoredKeyCreate');
  late final _dart_TWStoredKeyCreate _TWStoredKeyCreate =
      _TWStoredKeyCreate_ptr.asFunction<_dart_TWStoredKeyCreate>();

  void TWStoredKeyDelete(
    ffi.Pointer<TWStoredKey> key,
  ) {
    return _TWStoredKeyDelete(
      key,
    );
  }

  late final _TWStoredKeyDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyDelete>>('TWStoredKeyDelete');
  late final _dart_TWStoredKeyDelete _TWStoredKeyDelete =
      _TWStoredKeyDelete_ptr.asFunction<_dart_TWStoredKeyDelete>();

  /// Stored key uniqie identifier.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Void> TWStoredKeyIdentifier(
    ffi.Pointer<TWStoredKey> key,
  ) {
    return _TWStoredKeyIdentifier(
      key,
    );
  }

  late final _TWStoredKeyIdentifier_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyIdentifier>>(
          'TWStoredKeyIdentifier');
  late final _dart_TWStoredKeyIdentifier _TWStoredKeyIdentifier =
      _TWStoredKeyIdentifier_ptr.asFunction<_dart_TWStoredKeyIdentifier>();

  /// Stored key namer.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Void> TWStoredKeyName(
    ffi.Pointer<TWStoredKey> key,
  ) {
    return _TWStoredKeyName(
      key,
    );
  }

  late final _TWStoredKeyName_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyName>>('TWStoredKeyName');
  late final _dart_TWStoredKeyName _TWStoredKeyName =
      _TWStoredKeyName_ptr.asFunction<_dart_TWStoredKeyName>();

  /// Whether this key is a mnemonic phrase for a HD wallet.
  bool TWStoredKeyIsMnemonic(
    ffi.Pointer<TWStoredKey> key,
  ) {
    return _TWStoredKeyIsMnemonic(
          key,
        ) !=
        0;
  }

  late final _TWStoredKeyIsMnemonic_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyIsMnemonic>>(
          'TWStoredKeyIsMnemonic');
  late final _dart_TWStoredKeyIsMnemonic _TWStoredKeyIsMnemonic =
      _TWStoredKeyIsMnemonic_ptr.asFunction<_dart_TWStoredKeyIsMnemonic>();

  /// The number of accounts.
  int TWStoredKeyAccountCount(
    ffi.Pointer<TWStoredKey> key,
  ) {
    return _TWStoredKeyAccountCount(
      key,
    );
  }

  late final _TWStoredKeyAccountCount_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyAccountCount>>(
          'TWStoredKeyAccountCount');
  late final _dart_TWStoredKeyAccountCount _TWStoredKeyAccountCount =
      _TWStoredKeyAccountCount_ptr.asFunction<_dart_TWStoredKeyAccountCount>();

  /// Returns the account at a given index.  Returned object needs to be deleted.
  ffi.Pointer<TWAccount> TWStoredKeyAccount(
    ffi.Pointer<TWStoredKey> key,
    int index,
  ) {
    return _TWStoredKeyAccount(
      key,
      index,
    );
  }

  late final _TWStoredKeyAccount_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyAccount>>('TWStoredKeyAccount');
  late final _dart_TWStoredKeyAccount _TWStoredKeyAccount =
      _TWStoredKeyAccount_ptr.asFunction<_dart_TWStoredKeyAccount>();

  /// Returns the account for a specific coin, creating it if necessary.  Returned object needs to be deleted.
  ffi.Pointer<TWAccount> TWStoredKeyAccountForCoin(
    ffi.Pointer<TWStoredKey> key,
    int coin,
    ffi.Pointer<TWHDWallet> wallet,
  ) {
    return _TWStoredKeyAccountForCoin(
      key,
      coin,
      wallet,
    );
  }

  late final _TWStoredKeyAccountForCoin_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyAccountForCoin>>(
          'TWStoredKeyAccountForCoin');
  late final _dart_TWStoredKeyAccountForCoin _TWStoredKeyAccountForCoin =
      _TWStoredKeyAccountForCoin_ptr.asFunction<
          _dart_TWStoredKeyAccountForCoin>();

  /// Remove the account for a specific coin
  void TWStoredKeyRemoveAccountForCoin(
    ffi.Pointer<TWStoredKey> key,
    int coin,
  ) {
    return _TWStoredKeyRemoveAccountForCoin(
      key,
      coin,
    );
  }

  late final _TWStoredKeyRemoveAccountForCoin_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyRemoveAccountForCoin>>(
          'TWStoredKeyRemoveAccountForCoin');
  late final _dart_TWStoredKeyRemoveAccountForCoin
      _TWStoredKeyRemoveAccountForCoin = _TWStoredKeyRemoveAccountForCoin_ptr
          .asFunction<_dart_TWStoredKeyRemoveAccountForCoin>();

  /// Adds a new account.
  void TWStoredKeyAddAccount(
    ffi.Pointer<TWStoredKey> key,
    ffi.Pointer<ffi.Void> address,
    int coin,
    ffi.Pointer<ffi.Void> derivationPath,
    ffi.Pointer<ffi.Void> extetndedPublicKey,
  ) {
    return _TWStoredKeyAddAccount(
      key,
      address,
      coin,
      derivationPath,
      extetndedPublicKey,
    );
  }

  late final _TWStoredKeyAddAccount_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyAddAccount>>(
          'TWStoredKeyAddAccount');
  late final _dart_TWStoredKeyAddAccount _TWStoredKeyAddAccount =
      _TWStoredKeyAddAccount_ptr.asFunction<_dart_TWStoredKeyAddAccount>();

  /// Saves the key to a file.
  bool TWStoredKeyStore(
    ffi.Pointer<TWStoredKey> key,
    ffi.Pointer<ffi.Void> path,
  ) {
    return _TWStoredKeyStore(
          key,
          path,
        ) !=
        0;
  }

  late final _TWStoredKeyStore_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyStore>>('TWStoredKeyStore');
  late final _dart_TWStoredKeyStore _TWStoredKeyStore =
      _TWStoredKeyStore_ptr.asFunction<_dart_TWStoredKeyStore>();

  /// Decrypts the private key.
  ffi.Pointer<ffi.Void> TWStoredKeyDecryptPrivateKey(
    ffi.Pointer<TWStoredKey> key,
    ffi.Pointer<ffi.Void> password,
  ) {
    return _TWStoredKeyDecryptPrivateKey(
      key,
      password,
    );
  }

  late final _TWStoredKeyDecryptPrivateKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyDecryptPrivateKey>>(
          'TWStoredKeyDecryptPrivateKey');
  late final _dart_TWStoredKeyDecryptPrivateKey _TWStoredKeyDecryptPrivateKey =
      _TWStoredKeyDecryptPrivateKey_ptr.asFunction<
          _dart_TWStoredKeyDecryptPrivateKey>();

  /// Decrypts the mnemonic phrase.
  ffi.Pointer<ffi.Void> TWStoredKeyDecryptMnemonic(
    ffi.Pointer<TWStoredKey> key,
    ffi.Pointer<ffi.Void> password,
  ) {
    return _TWStoredKeyDecryptMnemonic(
      key,
      password,
    );
  }

  late final _TWStoredKeyDecryptMnemonic_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyDecryptMnemonic>>(
          'TWStoredKeyDecryptMnemonic');
  late final _dart_TWStoredKeyDecryptMnemonic _TWStoredKeyDecryptMnemonic =
      _TWStoredKeyDecryptMnemonic_ptr.asFunction<
          _dart_TWStoredKeyDecryptMnemonic>();

  /// Returns the private key for a specific coin.  Returned object needs to be deleted.
  ffi.Pointer<TWPrivateKey> TWStoredKeyPrivateKey(
    ffi.Pointer<TWStoredKey> key,
    int coin,
    ffi.Pointer<ffi.Void> password,
  ) {
    return _TWStoredKeyPrivateKey(
      key,
      coin,
      password,
    );
  }

  late final _TWStoredKeyPrivateKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyPrivateKey>>(
          'TWStoredKeyPrivateKey');
  late final _dart_TWStoredKeyPrivateKey _TWStoredKeyPrivateKey =
      _TWStoredKeyPrivateKey_ptr.asFunction<_dart_TWStoredKeyPrivateKey>();

  /// Dercrypts and returns the HD Wallet for mnemonic phrase keys.  Returned object needs to be deleted.
  ffi.Pointer<TWHDWallet> TWStoredKeyWallet(
    ffi.Pointer<TWStoredKey> key,
    ffi.Pointer<ffi.Void> password,
  ) {
    return _TWStoredKeyWallet(
      key,
      password,
    );
  }

  late final _TWStoredKeyWallet_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyWallet>>('TWStoredKeyWallet');
  late final _dart_TWStoredKeyWallet _TWStoredKeyWallet =
      _TWStoredKeyWallet_ptr.asFunction<_dart_TWStoredKeyWallet>();

  /// Exports the key as JSON
  ffi.Pointer<ffi.Void> TWStoredKeyExportJSON(
    ffi.Pointer<TWStoredKey> key,
  ) {
    return _TWStoredKeyExportJSON(
      key,
    );
  }

  late final _TWStoredKeyExportJSON_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyExportJSON>>(
          'TWStoredKeyExportJSON');
  late final _dart_TWStoredKeyExportJSON _TWStoredKeyExportJSON =
      _TWStoredKeyExportJSON_ptr.asFunction<_dart_TWStoredKeyExportJSON>();

  /// Fills in empty and invalid addresses.
  ///
  /// This method needs the encryption password to re-derive addresses from private keys.
  /// @returns `false` if the password is incorrect.
  bool TWStoredKeyFixAddresses(
    ffi.Pointer<TWStoredKey> key,
    ffi.Pointer<ffi.Void> password,
  ) {
    return _TWStoredKeyFixAddresses(
          key,
          password,
        ) !=
        0;
  }

  late final _TWStoredKeyFixAddresses_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyFixAddresses>>(
          'TWStoredKeyFixAddresses');
  late final _dart_TWStoredKeyFixAddresses _TWStoredKeyFixAddresses =
      _TWStoredKeyFixAddresses_ptr.asFunction<_dart_TWStoredKeyFixAddresses>();

  /// Retrieve stored key encoding parameters, as JSON string.
  ffi.Pointer<ffi.Void> TWStoredKeyEncryptionParameters(
    ffi.Pointer<TWStoredKey> key,
  ) {
    return _TWStoredKeyEncryptionParameters(
      key,
    );
  }

  late final _TWStoredKeyEncryptionParameters_ptr =
      _lookup<ffi.NativeFunction<_c_TWStoredKeyEncryptionParameters>>(
          'TWStoredKeyEncryptionParameters');
  late final _dart_TWStoredKeyEncryptionParameters
      _TWStoredKeyEncryptionParameters = _TWStoredKeyEncryptionParameters_ptr
          .asFunction<_dart_TWStoredKeyEncryptionParameters>();

  /// Creates an empty script.
  ffi.Pointer<TWBitcoinScript> TWBitcoinScriptCreate() {
    return _TWBitcoinScriptCreate();
  }

  late final _TWBitcoinScriptCreate_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptCreate>>(
          'TWBitcoinScriptCreate');
  late final _dart_TWBitcoinScriptCreate _TWBitcoinScriptCreate =
      _TWBitcoinScriptCreate_ptr.asFunction<_dart_TWBitcoinScriptCreate>();

  /// Creates a script from a raw data representation.
  ffi.Pointer<TWBitcoinScript> TWBitcoinScriptCreateWithData(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _TWBitcoinScriptCreateWithData(
      data,
    );
  }

  late final _TWBitcoinScriptCreateWithData_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptCreateWithData>>(
          'TWBitcoinScriptCreateWithData');
  late final _dart_TWBitcoinScriptCreateWithData
      _TWBitcoinScriptCreateWithData = _TWBitcoinScriptCreateWithData_ptr
          .asFunction<_dart_TWBitcoinScriptCreateWithData>();

  ffi.Pointer<TWBitcoinScript> TWBitcoinScriptCreateWithBytes(
    ffi.Pointer<ffi.Uint8> bytes,
    int size,
  ) {
    return _TWBitcoinScriptCreateWithBytes(
      bytes,
      size,
    );
  }

  late final _TWBitcoinScriptCreateWithBytes_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptCreateWithBytes>>(
          'TWBitcoinScriptCreateWithBytes');
  late final _dart_TWBitcoinScriptCreateWithBytes
      _TWBitcoinScriptCreateWithBytes = _TWBitcoinScriptCreateWithBytes_ptr
          .asFunction<_dart_TWBitcoinScriptCreateWithBytes>();

  /// Creates a script by copying an existring script.
  ffi.Pointer<TWBitcoinScript> TWBitcoinScriptCreateCopy(
    ffi.Pointer<TWBitcoinScript> script,
  ) {
    return _TWBitcoinScriptCreateCopy(
      script,
    );
  }

  late final _TWBitcoinScriptCreateCopy_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptCreateCopy>>(
          'TWBitcoinScriptCreateCopy');
  late final _dart_TWBitcoinScriptCreateCopy _TWBitcoinScriptCreateCopy =
      _TWBitcoinScriptCreateCopy_ptr.asFunction<
          _dart_TWBitcoinScriptCreateCopy>();

  void TWBitcoinScriptDelete(
    ffi.Pointer<TWBitcoinScript> script,
  ) {
    return _TWBitcoinScriptDelete(
      script,
    );
  }

  late final _TWBitcoinScriptDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptDelete>>(
          'TWBitcoinScriptDelete');
  late final _dart_TWBitcoinScriptDelete _TWBitcoinScriptDelete =
      _TWBitcoinScriptDelete_ptr.asFunction<_dart_TWBitcoinScriptDelete>();

  int TWBitcoinScriptSize(
    ffi.Pointer<TWBitcoinScript> script,
  ) {
    return _TWBitcoinScriptSize(
      script,
    );
  }

  late final _TWBitcoinScriptSize_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptSize>>(
          'TWBitcoinScriptSize');
  late final _dart_TWBitcoinScriptSize _TWBitcoinScriptSize =
      _TWBitcoinScriptSize_ptr.asFunction<_dart_TWBitcoinScriptSize>();

  ffi.Pointer<ffi.Void> TWBitcoinScriptData(
    ffi.Pointer<TWBitcoinScript> script,
  ) {
    return _TWBitcoinScriptData(
      script,
    );
  }

  late final _TWBitcoinScriptData_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptData>>(
          'TWBitcoinScriptData');
  late final _dart_TWBitcoinScriptData _TWBitcoinScriptData =
      _TWBitcoinScriptData_ptr.asFunction<_dart_TWBitcoinScriptData>();

  ffi.Pointer<ffi.Void> TWBitcoinScriptScriptHash(
    ffi.Pointer<TWBitcoinScript> script,
  ) {
    return _TWBitcoinScriptScriptHash(
      script,
    );
  }

  late final _TWBitcoinScriptScriptHash_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptScriptHash>>(
          'TWBitcoinScriptScriptHash');
  late final _dart_TWBitcoinScriptScriptHash _TWBitcoinScriptScriptHash =
      _TWBitcoinScriptScriptHash_ptr.asFunction<
          _dart_TWBitcoinScriptScriptHash>();

  /// Determines whether this is a pay-to-script-hash (P2SH) script.
  bool TWBitcoinScriptIsPayToScriptHash(
    ffi.Pointer<TWBitcoinScript> script,
  ) {
    return _TWBitcoinScriptIsPayToScriptHash(
          script,
        ) !=
        0;
  }

  late final _TWBitcoinScriptIsPayToScriptHash_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptIsPayToScriptHash>>(
          'TWBitcoinScriptIsPayToScriptHash');
  late final _dart_TWBitcoinScriptIsPayToScriptHash
      _TWBitcoinScriptIsPayToScriptHash = _TWBitcoinScriptIsPayToScriptHash_ptr
          .asFunction<_dart_TWBitcoinScriptIsPayToScriptHash>();

  /// Determines whether this is a pay-to-witness-script-hash (P2WSH) script.
  bool TWBitcoinScriptIsPayToWitnessScriptHash(
    ffi.Pointer<TWBitcoinScript> script,
  ) {
    return _TWBitcoinScriptIsPayToWitnessScriptHash(
          script,
        ) !=
        0;
  }

  late final _TWBitcoinScriptIsPayToWitnessScriptHash_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptIsPayToWitnessScriptHash>>(
          'TWBitcoinScriptIsPayToWitnessScriptHash');
  late final _dart_TWBitcoinScriptIsPayToWitnessScriptHash
      _TWBitcoinScriptIsPayToWitnessScriptHash =
      _TWBitcoinScriptIsPayToWitnessScriptHash_ptr.asFunction<
          _dart_TWBitcoinScriptIsPayToWitnessScriptHash>();

  /// Determines whether this is a pay-to-witness-public-key-hash (P2WPKH) script.
  bool TWBitcoinScriptIsPayToWitnessPublicKeyHash(
    ffi.Pointer<TWBitcoinScript> script,
  ) {
    return _TWBitcoinScriptIsPayToWitnessPublicKeyHash(
          script,
        ) !=
        0;
  }

  late final _TWBitcoinScriptIsPayToWitnessPublicKeyHash_ptr = _lookup<
          ffi.NativeFunction<_c_TWBitcoinScriptIsPayToWitnessPublicKeyHash>>(
      'TWBitcoinScriptIsPayToWitnessPublicKeyHash');
  late final _dart_TWBitcoinScriptIsPayToWitnessPublicKeyHash
      _TWBitcoinScriptIsPayToWitnessPublicKeyHash =
      _TWBitcoinScriptIsPayToWitnessPublicKeyHash_ptr.asFunction<
          _dart_TWBitcoinScriptIsPayToWitnessPublicKeyHash>();

  /// Determines whether this is a witness programm script.
  bool TWBitcoinScriptIsWitnessProgram(
    ffi.Pointer<TWBitcoinScript> script,
  ) {
    return _TWBitcoinScriptIsWitnessProgram(
          script,
        ) !=
        0;
  }

  late final _TWBitcoinScriptIsWitnessProgram_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptIsWitnessProgram>>(
          'TWBitcoinScriptIsWitnessProgram');
  late final _dart_TWBitcoinScriptIsWitnessProgram
      _TWBitcoinScriptIsWitnessProgram = _TWBitcoinScriptIsWitnessProgram_ptr
          .asFunction<_dart_TWBitcoinScriptIsWitnessProgram>();

  bool TWBitcoinScriptEqual(
    ffi.Pointer<TWBitcoinScript> lhs,
    ffi.Pointer<TWBitcoinScript> rhs,
  ) {
    return _TWBitcoinScriptEqual(
          lhs,
          rhs,
        ) !=
        0;
  }

  late final _TWBitcoinScriptEqual_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptEqual>>(
          'TWBitcoinScriptEqual');
  late final _dart_TWBitcoinScriptEqual _TWBitcoinScriptEqual =
      _TWBitcoinScriptEqual_ptr.asFunction<_dart_TWBitcoinScriptEqual>();

  /// Matches the script to a pay-to-public-key (P2PK) script.
  ///
  /// - Returns: the public key.
  ffi.Pointer<ffi.Void> TWBitcoinScriptMatchPayToPubkey(
    ffi.Pointer<TWBitcoinScript> script,
  ) {
    return _TWBitcoinScriptMatchPayToPubkey(
      script,
    );
  }

  late final _TWBitcoinScriptMatchPayToPubkey_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptMatchPayToPubkey>>(
          'TWBitcoinScriptMatchPayToPubkey');
  late final _dart_TWBitcoinScriptMatchPayToPubkey
      _TWBitcoinScriptMatchPayToPubkey = _TWBitcoinScriptMatchPayToPubkey_ptr
          .asFunction<_dart_TWBitcoinScriptMatchPayToPubkey>();

  /// Matches the script to a pay-to-public-key-hash (P2PKH).
  ///
  /// - Returns: the key hash.
  ffi.Pointer<ffi.Void> TWBitcoinScriptMatchPayToPubkeyHash(
    ffi.Pointer<TWBitcoinScript> script,
  ) {
    return _TWBitcoinScriptMatchPayToPubkeyHash(
      script,
    );
  }

  late final _TWBitcoinScriptMatchPayToPubkeyHash_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptMatchPayToPubkeyHash>>(
          'TWBitcoinScriptMatchPayToPubkeyHash');
  late final _dart_TWBitcoinScriptMatchPayToPubkeyHash
      _TWBitcoinScriptMatchPayToPubkeyHash =
      _TWBitcoinScriptMatchPayToPubkeyHash_ptr.asFunction<
          _dart_TWBitcoinScriptMatchPayToPubkeyHash>();

  /// Matches the script to a pay-to-script-hash (P2SH).
  ///
  /// - Returns: the script hash.
  ffi.Pointer<ffi.Void> TWBitcoinScriptMatchPayToScriptHash(
    ffi.Pointer<TWBitcoinScript> script,
  ) {
    return _TWBitcoinScriptMatchPayToScriptHash(
      script,
    );
  }

  late final _TWBitcoinScriptMatchPayToScriptHash_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptMatchPayToScriptHash>>(
          'TWBitcoinScriptMatchPayToScriptHash');
  late final _dart_TWBitcoinScriptMatchPayToScriptHash
      _TWBitcoinScriptMatchPayToScriptHash =
      _TWBitcoinScriptMatchPayToScriptHash_ptr.asFunction<
          _dart_TWBitcoinScriptMatchPayToScriptHash>();

  /// Matches the script to a pay-to-witness-public-key-hash (P2WPKH).
  ///
  /// - Returns: the key hash.
  ffi.Pointer<ffi.Void> TWBitcoinScriptMatchPayToWitnessPublicKeyHash(
    ffi.Pointer<TWBitcoinScript> script,
  ) {
    return _TWBitcoinScriptMatchPayToWitnessPublicKeyHash(
      script,
    );
  }

  late final _TWBitcoinScriptMatchPayToWitnessPublicKeyHash_ptr = _lookup<
          ffi.NativeFunction<_c_TWBitcoinScriptMatchPayToWitnessPublicKeyHash>>(
      'TWBitcoinScriptMatchPayToWitnessPublicKeyHash');
  late final _dart_TWBitcoinScriptMatchPayToWitnessPublicKeyHash
      _TWBitcoinScriptMatchPayToWitnessPublicKeyHash =
      _TWBitcoinScriptMatchPayToWitnessPublicKeyHash_ptr.asFunction<
          _dart_TWBitcoinScriptMatchPayToWitnessPublicKeyHash>();

  /// Matches the script to a pay-to-witness-script-hash (P2WSH).
  ///
  /// - Returns: the script hash, a SHA256 of the witness script.
  ffi.Pointer<ffi.Void> TWBitcoinScriptMatchPayToWitnessScriptHash(
    ffi.Pointer<TWBitcoinScript> script,
  ) {
    return _TWBitcoinScriptMatchPayToWitnessScriptHash(
      script,
    );
  }

  late final _TWBitcoinScriptMatchPayToWitnessScriptHash_ptr = _lookup<
          ffi.NativeFunction<_c_TWBitcoinScriptMatchPayToWitnessScriptHash>>(
      'TWBitcoinScriptMatchPayToWitnessScriptHash');
  late final _dart_TWBitcoinScriptMatchPayToWitnessScriptHash
      _TWBitcoinScriptMatchPayToWitnessScriptHash =
      _TWBitcoinScriptMatchPayToWitnessScriptHash_ptr.asFunction<
          _dart_TWBitcoinScriptMatchPayToWitnessScriptHash>();

  /// Encodes the script.
  ffi.Pointer<ffi.Void> TWBitcoinScriptEncode(
    ffi.Pointer<TWBitcoinScript> script,
  ) {
    return _TWBitcoinScriptEncode(
      script,
    );
  }

  late final _TWBitcoinScriptEncode_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptEncode>>(
          'TWBitcoinScriptEncode');
  late final _dart_TWBitcoinScriptEncode _TWBitcoinScriptEncode =
      _TWBitcoinScriptEncode_ptr.asFunction<_dart_TWBitcoinScriptEncode>();

  /// Builds a standard 'pay to public key' script.
  ffi.Pointer<TWBitcoinScript> TWBitcoinScriptBuildPayToPublicKey(
    ffi.Pointer<ffi.Void> pubkey,
  ) {
    return _TWBitcoinScriptBuildPayToPublicKey(
      pubkey,
    );
  }

  late final _TWBitcoinScriptBuildPayToPublicKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptBuildPayToPublicKey>>(
          'TWBitcoinScriptBuildPayToPublicKey');
  late final _dart_TWBitcoinScriptBuildPayToPublicKey
      _TWBitcoinScriptBuildPayToPublicKey =
      _TWBitcoinScriptBuildPayToPublicKey_ptr.asFunction<
          _dart_TWBitcoinScriptBuildPayToPublicKey>();

  /// Builds a standard 'pay to public key hash' script.
  ffi.Pointer<TWBitcoinScript> TWBitcoinScriptBuildPayToPublicKeyHash(
    ffi.Pointer<ffi.Void> hash,
  ) {
    return _TWBitcoinScriptBuildPayToPublicKeyHash(
      hash,
    );
  }

  late final _TWBitcoinScriptBuildPayToPublicKeyHash_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptBuildPayToPublicKeyHash>>(
          'TWBitcoinScriptBuildPayToPublicKeyHash');
  late final _dart_TWBitcoinScriptBuildPayToPublicKeyHash
      _TWBitcoinScriptBuildPayToPublicKeyHash =
      _TWBitcoinScriptBuildPayToPublicKeyHash_ptr.asFunction<
          _dart_TWBitcoinScriptBuildPayToPublicKeyHash>();

  /// Builds a standard 'pay to script hash' script.
  ffi.Pointer<TWBitcoinScript> TWBitcoinScriptBuildPayToScriptHash(
    ffi.Pointer<ffi.Void> scriptHash,
  ) {
    return _TWBitcoinScriptBuildPayToScriptHash(
      scriptHash,
    );
  }

  late final _TWBitcoinScriptBuildPayToScriptHash_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptBuildPayToScriptHash>>(
          'TWBitcoinScriptBuildPayToScriptHash');
  late final _dart_TWBitcoinScriptBuildPayToScriptHash
      _TWBitcoinScriptBuildPayToScriptHash =
      _TWBitcoinScriptBuildPayToScriptHash_ptr.asFunction<
          _dart_TWBitcoinScriptBuildPayToScriptHash>();

  /// Builds a pay-to-witness-public-key-hash (P2WPKH) script.
  ffi.Pointer<TWBitcoinScript> TWBitcoinScriptBuildPayToWitnessPubkeyHash(
    ffi.Pointer<ffi.Void> hash,
  ) {
    return _TWBitcoinScriptBuildPayToWitnessPubkeyHash(
      hash,
    );
  }

  late final _TWBitcoinScriptBuildPayToWitnessPubkeyHash_ptr = _lookup<
          ffi.NativeFunction<_c_TWBitcoinScriptBuildPayToWitnessPubkeyHash>>(
      'TWBitcoinScriptBuildPayToWitnessPubkeyHash');
  late final _dart_TWBitcoinScriptBuildPayToWitnessPubkeyHash
      _TWBitcoinScriptBuildPayToWitnessPubkeyHash =
      _TWBitcoinScriptBuildPayToWitnessPubkeyHash_ptr.asFunction<
          _dart_TWBitcoinScriptBuildPayToWitnessPubkeyHash>();

  /// Builds a pay-to-witness-script-hash (P2WSH) script.
  ffi.Pointer<TWBitcoinScript> TWBitcoinScriptBuildPayToWitnessScriptHash(
    ffi.Pointer<ffi.Void> scriptHash,
  ) {
    return _TWBitcoinScriptBuildPayToWitnessScriptHash(
      scriptHash,
    );
  }

  late final _TWBitcoinScriptBuildPayToWitnessScriptHash_ptr = _lookup<
          ffi.NativeFunction<_c_TWBitcoinScriptBuildPayToWitnessScriptHash>>(
      'TWBitcoinScriptBuildPayToWitnessScriptHash');
  late final _dart_TWBitcoinScriptBuildPayToWitnessScriptHash
      _TWBitcoinScriptBuildPayToWitnessScriptHash =
      _TWBitcoinScriptBuildPayToWitnessScriptHash_ptr.asFunction<
          _dart_TWBitcoinScriptBuildPayToWitnessScriptHash>();

  /// Builds a appropriate lock script for the given address.
  ffi.Pointer<TWBitcoinScript> TWBitcoinScriptLockScriptForAddress(
    ffi.Pointer<ffi.Void> address,
    int coin,
  ) {
    return _TWBitcoinScriptLockScriptForAddress(
      address,
      coin,
    );
  }

  late final _TWBitcoinScriptLockScriptForAddress_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptLockScriptForAddress>>(
          'TWBitcoinScriptLockScriptForAddress');
  late final _dart_TWBitcoinScriptLockScriptForAddress
      _TWBitcoinScriptLockScriptForAddress =
      _TWBitcoinScriptLockScriptForAddress_ptr.asFunction<
          _dart_TWBitcoinScriptLockScriptForAddress>();

  int TWBitcoinScriptHashTypeForCoin(
    int coinType,
  ) {
    return _TWBitcoinScriptHashTypeForCoin(
      coinType,
    );
  }

  late final _TWBitcoinScriptHashTypeForCoin_ptr =
      _lookup<ffi.NativeFunction<_c_TWBitcoinScriptHashTypeForCoin>>(
          'TWBitcoinScriptHashTypeForCoin');
  late final _dart_TWBitcoinScriptHashTypeForCoin
      _TWBitcoinScriptHashTypeForCoin = _TWBitcoinScriptHashTypeForCoin_ptr
          .asFunction<_dart_TWBitcoinScriptHashTypeForCoin>();

  ffi.Pointer<TWFIOAccount> TWFIOAccountCreateWithString(
    ffi.Pointer<ffi.Void> string,
  ) {
    return _TWFIOAccountCreateWithString(
      string,
    );
  }

  late final _TWFIOAccountCreateWithString_ptr =
      _lookup<ffi.NativeFunction<_c_TWFIOAccountCreateWithString>>(
          'TWFIOAccountCreateWithString');
  late final _dart_TWFIOAccountCreateWithString _TWFIOAccountCreateWithString =
      _TWFIOAccountCreateWithString_ptr.asFunction<
          _dart_TWFIOAccountCreateWithString>();

  void TWFIOAccountDelete(
    ffi.Pointer<TWFIOAccount> account,
  ) {
    return _TWFIOAccountDelete(
      account,
    );
  }

  late final _TWFIOAccountDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWFIOAccountDelete>>('TWFIOAccountDelete');
  late final _dart_TWFIOAccountDelete _TWFIOAccountDelete =
      _TWFIOAccountDelete_ptr.asFunction<_dart_TWFIOAccountDelete>();

  /// Returns the short account string representation.
  ffi.Pointer<ffi.Void> TWFIOAccountDescription(
    ffi.Pointer<TWFIOAccount> account,
  ) {
    return _TWFIOAccountDescription(
      account,
    );
  }

  late final _TWFIOAccountDescription_ptr =
      _lookup<ffi.NativeFunction<_c_TWFIOAccountDescription>>(
          'TWFIOAccountDescription');
  late final _dart_TWFIOAccountDescription _TWFIOAccountDescription =
      _TWFIOAccountDescription_ptr.asFunction<_dart_TWFIOAccountDescription>();

  /// Compares two addresses for equality.
  bool TWGroestlcoinAddressEqual(
    ffi.Pointer<TWGroestlcoinAddress> lhs,
    ffi.Pointer<TWGroestlcoinAddress> rhs,
  ) {
    return _TWGroestlcoinAddressEqual(
          lhs,
          rhs,
        ) !=
        0;
  }

  late final _TWGroestlcoinAddressEqual_ptr =
      _lookup<ffi.NativeFunction<_c_TWGroestlcoinAddressEqual>>(
          'TWGroestlcoinAddressEqual');
  late final _dart_TWGroestlcoinAddressEqual _TWGroestlcoinAddressEqual =
      _TWGroestlcoinAddressEqual_ptr.asFunction<
          _dart_TWGroestlcoinAddressEqual>();

  /// Determines if the string is a valid Groestlcoin address.
  bool TWGroestlcoinAddressIsValidString(
    ffi.Pointer<ffi.Void> string,
  ) {
    return _TWGroestlcoinAddressIsValidString(
          string,
        ) !=
        0;
  }

  late final _TWGroestlcoinAddressIsValidString_ptr =
      _lookup<ffi.NativeFunction<_c_TWGroestlcoinAddressIsValidString>>(
          'TWGroestlcoinAddressIsValidString');
  late final _dart_TWGroestlcoinAddressIsValidString
      _TWGroestlcoinAddressIsValidString =
      _TWGroestlcoinAddressIsValidString_ptr.asFunction<
          _dart_TWGroestlcoinAddressIsValidString>();

  /// Create an address from a base58 sring representaion.
  ffi.Pointer<TWGroestlcoinAddress> TWGroestlcoinAddressCreateWithString(
    ffi.Pointer<ffi.Void> string,
  ) {
    return _TWGroestlcoinAddressCreateWithString(
      string,
    );
  }

  late final _TWGroestlcoinAddressCreateWithString_ptr =
      _lookup<ffi.NativeFunction<_c_TWGroestlcoinAddressCreateWithString>>(
          'TWGroestlcoinAddressCreateWithString');
  late final _dart_TWGroestlcoinAddressCreateWithString
      _TWGroestlcoinAddressCreateWithString =
      _TWGroestlcoinAddressCreateWithString_ptr.asFunction<
          _dart_TWGroestlcoinAddressCreateWithString>();

  /// Create an address from a public key and a prefix byte.
  ffi.Pointer<TWGroestlcoinAddress> TWGroestlcoinAddressCreateWithPublicKey(
    ffi.Pointer<TWPublicKey> publicKey,
    int prefix,
  ) {
    return _TWGroestlcoinAddressCreateWithPublicKey(
      publicKey,
      prefix,
    );
  }

  late final _TWGroestlcoinAddressCreateWithPublicKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWGroestlcoinAddressCreateWithPublicKey>>(
          'TWGroestlcoinAddressCreateWithPublicKey');
  late final _dart_TWGroestlcoinAddressCreateWithPublicKey
      _TWGroestlcoinAddressCreateWithPublicKey =
      _TWGroestlcoinAddressCreateWithPublicKey_ptr.asFunction<
          _dart_TWGroestlcoinAddressCreateWithPublicKey>();

  void TWGroestlcoinAddressDelete(
    ffi.Pointer<TWGroestlcoinAddress> address,
  ) {
    return _TWGroestlcoinAddressDelete(
      address,
    );
  }

  late final _TWGroestlcoinAddressDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWGroestlcoinAddressDelete>>(
          'TWGroestlcoinAddressDelete');
  late final _dart_TWGroestlcoinAddressDelete _TWGroestlcoinAddressDelete =
      _TWGroestlcoinAddressDelete_ptr.asFunction<
          _dart_TWGroestlcoinAddressDelete>();

  /// Returns the address base58 string representation.
  ffi.Pointer<ffi.Void> TWGroestlcoinAddressDescription(
    ffi.Pointer<TWGroestlcoinAddress> address,
  ) {
    return _TWGroestlcoinAddressDescription(
      address,
    );
  }

  late final _TWGroestlcoinAddressDescription_ptr =
      _lookup<ffi.NativeFunction<_c_TWGroestlcoinAddressDescription>>(
          'TWGroestlcoinAddressDescription');
  late final _dart_TWGroestlcoinAddressDescription
      _TWGroestlcoinAddressDescription = _TWGroestlcoinAddressDescription_ptr
          .asFunction<_dart_TWGroestlcoinAddressDescription>();

  /// Determines whether a BIP39 English mnemonic phrase is valid.
  bool TWMnemonicIsValid(
    ffi.Pointer<ffi.Void> mnemonic,
  ) {
    return _TWMnemonicIsValid(
          mnemonic,
        ) !=
        0;
  }

  late final _TWMnemonicIsValid_ptr =
      _lookup<ffi.NativeFunction<_c_TWMnemonicIsValid>>('TWMnemonicIsValid');
  late final _dart_TWMnemonicIsValid _TWMnemonicIsValid =
      _TWMnemonicIsValid_ptr.asFunction<_dart_TWMnemonicIsValid>();

  /// Determines whether word is a valid BIP39 English menemonic word.
  bool TWMnemonicIsValidWord(
    ffi.Pointer<ffi.Void> word,
  ) {
    return _TWMnemonicIsValidWord(
          word,
        ) !=
        0;
  }

  late final _TWMnemonicIsValidWord_ptr =
      _lookup<ffi.NativeFunction<_c_TWMnemonicIsValidWord>>(
          'TWMnemonicIsValidWord');
  late final _dart_TWMnemonicIsValidWord _TWMnemonicIsValidWord =
      _TWMnemonicIsValidWord_ptr.asFunction<_dart_TWMnemonicIsValidWord>();

  /// Return BIP39 English words that match the given prefix. A single string is returned, with space-separated list of words.
  ffi.Pointer<ffi.Void> TWMnemonicSuggest(
    ffi.Pointer<ffi.Void> prefix,
  ) {
    return _TWMnemonicSuggest(
      prefix,
    );
  }

  late final _TWMnemonicSuggest_ptr =
      _lookup<ffi.NativeFunction<_c_TWMnemonicSuggest>>('TWMnemonicSuggest');
  late final _dart_TWMnemonicSuggest _TWMnemonicSuggest =
      _TWMnemonicSuggest_ptr.asFunction<_dart_TWMnemonicSuggest>();

  /// Creates a function object, with the given name and empty parameter list.  It must be deleted at the end.
  ffi.Pointer<TWEthereumAbiFunction> TWEthereumAbiFunctionCreateWithString(
    ffi.Pointer<ffi.Void> name,
  ) {
    return _TWEthereumAbiFunctionCreateWithString(
      name,
    );
  }

  late final _TWEthereumAbiFunctionCreateWithString_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionCreateWithString>>(
          'TWEthereumAbiFunctionCreateWithString');
  late final _dart_TWEthereumAbiFunctionCreateWithString
      _TWEthereumAbiFunctionCreateWithString =
      _TWEthereumAbiFunctionCreateWithString_ptr.asFunction<
          _dart_TWEthereumAbiFunctionCreateWithString>();

  /// Deletes a function object created with a 'TWEthereumAbiFunctionCreateWithString' method.
  void TWEthereumAbiFunctionDelete(
    ffi.Pointer<TWEthereumAbiFunction> fn,
  ) {
    return _TWEthereumAbiFunctionDelete(
      fn,
    );
  }

  late final _TWEthereumAbiFunctionDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionDelete>>(
          'TWEthereumAbiFunctionDelete');
  late final _dart_TWEthereumAbiFunctionDelete _TWEthereumAbiFunctionDelete =
      _TWEthereumAbiFunctionDelete_ptr.asFunction<
          _dart_TWEthereumAbiFunctionDelete>();

  /// Return the function type signature, of the form "baz(int32,uint256)"
  ffi.Pointer<ffi.Void> TWEthereumAbiFunctionGetType(
    ffi.Pointer<TWEthereumAbiFunction> fn,
  ) {
    return _TWEthereumAbiFunctionGetType(
      fn,
    );
  }

  late final _TWEthereumAbiFunctionGetType_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionGetType>>(
          'TWEthereumAbiFunctionGetType');
  late final _dart_TWEthereumAbiFunctionGetType _TWEthereumAbiFunctionGetType =
      _TWEthereumAbiFunctionGetType_ptr.asFunction<
          _dart_TWEthereumAbiFunctionGetType>();

  /// Methods for adding parameters of the given type (input or output).
  /// For output parameters (isOutput=true) a value has to be specified, although usually not needd.
  /// Returns the index of the parameter (0-based).
  int TWEthereumAbiFunctionAddParamUInt8(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamUInt8(
      fn,
      val,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamUInt8_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamUInt8>>(
          'TWEthereumAbiFunctionAddParamUInt8');
  late final _dart_TWEthereumAbiFunctionAddParamUInt8
      _TWEthereumAbiFunctionAddParamUInt8 =
      _TWEthereumAbiFunctionAddParamUInt8_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamUInt8>();

  int TWEthereumAbiFunctionAddParamUInt16(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamUInt16(
      fn,
      val,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamUInt16_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamUInt16>>(
          'TWEthereumAbiFunctionAddParamUInt16');
  late final _dart_TWEthereumAbiFunctionAddParamUInt16
      _TWEthereumAbiFunctionAddParamUInt16 =
      _TWEthereumAbiFunctionAddParamUInt16_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamUInt16>();

  int TWEthereumAbiFunctionAddParamUInt32(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamUInt32(
      fn,
      val,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamUInt32_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamUInt32>>(
          'TWEthereumAbiFunctionAddParamUInt32');
  late final _dart_TWEthereumAbiFunctionAddParamUInt32
      _TWEthereumAbiFunctionAddParamUInt32 =
      _TWEthereumAbiFunctionAddParamUInt32_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamUInt32>();

  int TWEthereumAbiFunctionAddParamUInt64(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamUInt64(
      fn,
      val,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamUInt64_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamUInt64>>(
          'TWEthereumAbiFunctionAddParamUInt64');
  late final _dart_TWEthereumAbiFunctionAddParamUInt64
      _TWEthereumAbiFunctionAddParamUInt64 =
      _TWEthereumAbiFunctionAddParamUInt64_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamUInt64>();

  int TWEthereumAbiFunctionAddParamUInt256(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    ffi.Pointer<ffi.Void> val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamUInt256(
      fn,
      val,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamUInt256_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamUInt256>>(
          'TWEthereumAbiFunctionAddParamUInt256');
  late final _dart_TWEthereumAbiFunctionAddParamUInt256
      _TWEthereumAbiFunctionAddParamUInt256 =
      _TWEthereumAbiFunctionAddParamUInt256_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamUInt256>();

  int TWEthereumAbiFunctionAddParamUIntN(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int bits,
    ffi.Pointer<ffi.Void> val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamUIntN(
      fn,
      bits,
      val,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamUIntN_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamUIntN>>(
          'TWEthereumAbiFunctionAddParamUIntN');
  late final _dart_TWEthereumAbiFunctionAddParamUIntN
      _TWEthereumAbiFunctionAddParamUIntN =
      _TWEthereumAbiFunctionAddParamUIntN_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamUIntN>();

  int TWEthereumAbiFunctionAddParamInt8(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamInt8(
      fn,
      val,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamInt8_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamInt8>>(
          'TWEthereumAbiFunctionAddParamInt8');
  late final _dart_TWEthereumAbiFunctionAddParamInt8
      _TWEthereumAbiFunctionAddParamInt8 =
      _TWEthereumAbiFunctionAddParamInt8_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamInt8>();

  int TWEthereumAbiFunctionAddParamInt16(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamInt16(
      fn,
      val,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamInt16_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamInt16>>(
          'TWEthereumAbiFunctionAddParamInt16');
  late final _dart_TWEthereumAbiFunctionAddParamInt16
      _TWEthereumAbiFunctionAddParamInt16 =
      _TWEthereumAbiFunctionAddParamInt16_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamInt16>();

  int TWEthereumAbiFunctionAddParamInt32(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamInt32(
      fn,
      val,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamInt32_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamInt32>>(
          'TWEthereumAbiFunctionAddParamInt32');
  late final _dart_TWEthereumAbiFunctionAddParamInt32
      _TWEthereumAbiFunctionAddParamInt32 =
      _TWEthereumAbiFunctionAddParamInt32_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamInt32>();

  int TWEthereumAbiFunctionAddParamInt64(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamInt64(
      fn,
      val,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamInt64_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamInt64>>(
          'TWEthereumAbiFunctionAddParamInt64');
  late final _dart_TWEthereumAbiFunctionAddParamInt64
      _TWEthereumAbiFunctionAddParamInt64 =
      _TWEthereumAbiFunctionAddParamInt64_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamInt64>();

  int TWEthereumAbiFunctionAddParamInt256(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    ffi.Pointer<ffi.Void> val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamInt256(
      fn,
      val,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamInt256_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamInt256>>(
          'TWEthereumAbiFunctionAddParamInt256');
  late final _dart_TWEthereumAbiFunctionAddParamInt256
      _TWEthereumAbiFunctionAddParamInt256 =
      _TWEthereumAbiFunctionAddParamInt256_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamInt256>();

  int TWEthereumAbiFunctionAddParamIntN(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int bits,
    ffi.Pointer<ffi.Void> val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamIntN(
      fn,
      bits,
      val,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamIntN_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamIntN>>(
          'TWEthereumAbiFunctionAddParamIntN');
  late final _dart_TWEthereumAbiFunctionAddParamIntN
      _TWEthereumAbiFunctionAddParamIntN =
      _TWEthereumAbiFunctionAddParamIntN_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamIntN>();

  int TWEthereumAbiFunctionAddParamBool(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    bool val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamBool(
      fn,
      val ? 1 : 0,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamBool_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamBool>>(
          'TWEthereumAbiFunctionAddParamBool');
  late final _dart_TWEthereumAbiFunctionAddParamBool
      _TWEthereumAbiFunctionAddParamBool =
      _TWEthereumAbiFunctionAddParamBool_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamBool>();

  int TWEthereumAbiFunctionAddParamString(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    ffi.Pointer<ffi.Void> val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamString(
      fn,
      val,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamString_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamString>>(
          'TWEthereumAbiFunctionAddParamString');
  late final _dart_TWEthereumAbiFunctionAddParamString
      _TWEthereumAbiFunctionAddParamString =
      _TWEthereumAbiFunctionAddParamString_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamString>();

  int TWEthereumAbiFunctionAddParamAddress(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    ffi.Pointer<ffi.Void> val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamAddress(
      fn,
      val,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamAddress_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamAddress>>(
          'TWEthereumAbiFunctionAddParamAddress');
  late final _dart_TWEthereumAbiFunctionAddParamAddress
      _TWEthereumAbiFunctionAddParamAddress =
      _TWEthereumAbiFunctionAddParamAddress_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamAddress>();

  int TWEthereumAbiFunctionAddParamBytes(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    ffi.Pointer<ffi.Void> val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamBytes(
      fn,
      val,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamBytes_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamBytes>>(
          'TWEthereumAbiFunctionAddParamBytes');
  late final _dart_TWEthereumAbiFunctionAddParamBytes
      _TWEthereumAbiFunctionAddParamBytes =
      _TWEthereumAbiFunctionAddParamBytes_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamBytes>();

  int TWEthereumAbiFunctionAddParamBytesFix(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int size,
    ffi.Pointer<ffi.Void> val,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamBytesFix(
      fn,
      size,
      val,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamBytesFix_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamBytesFix>>(
          'TWEthereumAbiFunctionAddParamBytesFix');
  late final _dart_TWEthereumAbiFunctionAddParamBytesFix
      _TWEthereumAbiFunctionAddParamBytesFix =
      _TWEthereumAbiFunctionAddParamBytesFix_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamBytesFix>();

  int TWEthereumAbiFunctionAddParamArray(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionAddParamArray(
      fn,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddParamArray_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddParamArray>>(
          'TWEthereumAbiFunctionAddParamArray');
  late final _dart_TWEthereumAbiFunctionAddParamArray
      _TWEthereumAbiFunctionAddParamArray =
      _TWEthereumAbiFunctionAddParamArray_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddParamArray>();

  /// Methods for accessing the value of an output or input parameter, of different types.
  int TWEthereumAbiFunctionGetParamUInt8(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int idx,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionGetParamUInt8(
      fn,
      idx,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionGetParamUInt8_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionGetParamUInt8>>(
          'TWEthereumAbiFunctionGetParamUInt8');
  late final _dart_TWEthereumAbiFunctionGetParamUInt8
      _TWEthereumAbiFunctionGetParamUInt8 =
      _TWEthereumAbiFunctionGetParamUInt8_ptr.asFunction<
          _dart_TWEthereumAbiFunctionGetParamUInt8>();

  int TWEthereumAbiFunctionGetParamUInt64(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int idx,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionGetParamUInt64(
      fn,
      idx,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionGetParamUInt64_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionGetParamUInt64>>(
          'TWEthereumAbiFunctionGetParamUInt64');
  late final _dart_TWEthereumAbiFunctionGetParamUInt64
      _TWEthereumAbiFunctionGetParamUInt64 =
      _TWEthereumAbiFunctionGetParamUInt64_ptr.asFunction<
          _dart_TWEthereumAbiFunctionGetParamUInt64>();

  ffi.Pointer<ffi.Void> TWEthereumAbiFunctionGetParamUInt256(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int idx,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionGetParamUInt256(
      fn,
      idx,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionGetParamUInt256_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionGetParamUInt256>>(
          'TWEthereumAbiFunctionGetParamUInt256');
  late final _dart_TWEthereumAbiFunctionGetParamUInt256
      _TWEthereumAbiFunctionGetParamUInt256 =
      _TWEthereumAbiFunctionGetParamUInt256_ptr.asFunction<
          _dart_TWEthereumAbiFunctionGetParamUInt256>();

  bool TWEthereumAbiFunctionGetParamBool(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int idx,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionGetParamBool(
          fn,
          idx,
          isOutput ? 1 : 0,
        ) !=
        0;
  }

  late final _TWEthereumAbiFunctionGetParamBool_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionGetParamBool>>(
          'TWEthereumAbiFunctionGetParamBool');
  late final _dart_TWEthereumAbiFunctionGetParamBool
      _TWEthereumAbiFunctionGetParamBool =
      _TWEthereumAbiFunctionGetParamBool_ptr.asFunction<
          _dart_TWEthereumAbiFunctionGetParamBool>();

  ffi.Pointer<ffi.Void> TWEthereumAbiFunctionGetParamString(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int idx,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionGetParamString(
      fn,
      idx,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionGetParamString_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionGetParamString>>(
          'TWEthereumAbiFunctionGetParamString');
  late final _dart_TWEthereumAbiFunctionGetParamString
      _TWEthereumAbiFunctionGetParamString =
      _TWEthereumAbiFunctionGetParamString_ptr.asFunction<
          _dart_TWEthereumAbiFunctionGetParamString>();

  ffi.Pointer<ffi.Void> TWEthereumAbiFunctionGetParamAddress(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int idx,
    bool isOutput,
  ) {
    return _TWEthereumAbiFunctionGetParamAddress(
      fn,
      idx,
      isOutput ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionGetParamAddress_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionGetParamAddress>>(
          'TWEthereumAbiFunctionGetParamAddress');
  late final _dart_TWEthereumAbiFunctionGetParamAddress
      _TWEthereumAbiFunctionGetParamAddress =
      _TWEthereumAbiFunctionGetParamAddress_ptr.asFunction<
          _dart_TWEthereumAbiFunctionGetParamAddress>();

  /// Methods for adding a parameter of the given type to a top-level input parameter array.  Returns the index of the parameter (0-based).
  /// Note that nested ParamArrays are not possible through this API, could be done by using index paths like "1/0"
  int TWEthereumAbiFunctionAddInArrayParamUInt8(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    int val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamUInt8(
      fn,
      arrayIdx,
      val,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamUInt8_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamUInt8>>(
          'TWEthereumAbiFunctionAddInArrayParamUInt8');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamUInt8
      _TWEthereumAbiFunctionAddInArrayParamUInt8 =
      _TWEthereumAbiFunctionAddInArrayParamUInt8_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamUInt8>();

  int TWEthereumAbiFunctionAddInArrayParamUInt16(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    int val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamUInt16(
      fn,
      arrayIdx,
      val,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamUInt16_ptr = _lookup<
          ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamUInt16>>(
      'TWEthereumAbiFunctionAddInArrayParamUInt16');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamUInt16
      _TWEthereumAbiFunctionAddInArrayParamUInt16 =
      _TWEthereumAbiFunctionAddInArrayParamUInt16_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamUInt16>();

  int TWEthereumAbiFunctionAddInArrayParamUInt32(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    int val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamUInt32(
      fn,
      arrayIdx,
      val,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamUInt32_ptr = _lookup<
          ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamUInt32>>(
      'TWEthereumAbiFunctionAddInArrayParamUInt32');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamUInt32
      _TWEthereumAbiFunctionAddInArrayParamUInt32 =
      _TWEthereumAbiFunctionAddInArrayParamUInt32_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamUInt32>();

  int TWEthereumAbiFunctionAddInArrayParamUInt64(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    int val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamUInt64(
      fn,
      arrayIdx,
      val,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamUInt64_ptr = _lookup<
          ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamUInt64>>(
      'TWEthereumAbiFunctionAddInArrayParamUInt64');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamUInt64
      _TWEthereumAbiFunctionAddInArrayParamUInt64 =
      _TWEthereumAbiFunctionAddInArrayParamUInt64_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamUInt64>();

  int TWEthereumAbiFunctionAddInArrayParamUInt256(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamUInt256(
      fn,
      arrayIdx,
      val,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamUInt256_ptr = _lookup<
          ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamUInt256>>(
      'TWEthereumAbiFunctionAddInArrayParamUInt256');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamUInt256
      _TWEthereumAbiFunctionAddInArrayParamUInt256 =
      _TWEthereumAbiFunctionAddInArrayParamUInt256_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamUInt256>();

  int TWEthereumAbiFunctionAddInArrayParamUIntN(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    int bits,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamUIntN(
      fn,
      arrayIdx,
      bits,
      val,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamUIntN_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamUIntN>>(
          'TWEthereumAbiFunctionAddInArrayParamUIntN');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamUIntN
      _TWEthereumAbiFunctionAddInArrayParamUIntN =
      _TWEthereumAbiFunctionAddInArrayParamUIntN_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamUIntN>();

  int TWEthereumAbiFunctionAddInArrayParamInt8(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    int val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamInt8(
      fn,
      arrayIdx,
      val,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamInt8_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamInt8>>(
          'TWEthereumAbiFunctionAddInArrayParamInt8');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamInt8
      _TWEthereumAbiFunctionAddInArrayParamInt8 =
      _TWEthereumAbiFunctionAddInArrayParamInt8_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamInt8>();

  int TWEthereumAbiFunctionAddInArrayParamInt16(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    int val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamInt16(
      fn,
      arrayIdx,
      val,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamInt16_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamInt16>>(
          'TWEthereumAbiFunctionAddInArrayParamInt16');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamInt16
      _TWEthereumAbiFunctionAddInArrayParamInt16 =
      _TWEthereumAbiFunctionAddInArrayParamInt16_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamInt16>();

  int TWEthereumAbiFunctionAddInArrayParamInt32(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    int val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamInt32(
      fn,
      arrayIdx,
      val,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamInt32_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamInt32>>(
          'TWEthereumAbiFunctionAddInArrayParamInt32');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamInt32
      _TWEthereumAbiFunctionAddInArrayParamInt32 =
      _TWEthereumAbiFunctionAddInArrayParamInt32_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamInt32>();

  int TWEthereumAbiFunctionAddInArrayParamInt64(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    int val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamInt64(
      fn,
      arrayIdx,
      val,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamInt64_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamInt64>>(
          'TWEthereumAbiFunctionAddInArrayParamInt64');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamInt64
      _TWEthereumAbiFunctionAddInArrayParamInt64 =
      _TWEthereumAbiFunctionAddInArrayParamInt64_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamInt64>();

  int TWEthereumAbiFunctionAddInArrayParamInt256(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamInt256(
      fn,
      arrayIdx,
      val,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamInt256_ptr = _lookup<
          ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamInt256>>(
      'TWEthereumAbiFunctionAddInArrayParamInt256');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamInt256
      _TWEthereumAbiFunctionAddInArrayParamInt256 =
      _TWEthereumAbiFunctionAddInArrayParamInt256_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamInt256>();

  int TWEthereumAbiFunctionAddInArrayParamIntN(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    int bits,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamIntN(
      fn,
      arrayIdx,
      bits,
      val,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamIntN_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamIntN>>(
          'TWEthereumAbiFunctionAddInArrayParamIntN');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamIntN
      _TWEthereumAbiFunctionAddInArrayParamIntN =
      _TWEthereumAbiFunctionAddInArrayParamIntN_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamIntN>();

  int TWEthereumAbiFunctionAddInArrayParamBool(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    bool val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamBool(
      fn,
      arrayIdx,
      val ? 1 : 0,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamBool_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamBool>>(
          'TWEthereumAbiFunctionAddInArrayParamBool');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamBool
      _TWEthereumAbiFunctionAddInArrayParamBool =
      _TWEthereumAbiFunctionAddInArrayParamBool_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamBool>();

  int TWEthereumAbiFunctionAddInArrayParamString(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamString(
      fn,
      arrayIdx,
      val,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamString_ptr = _lookup<
          ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamString>>(
      'TWEthereumAbiFunctionAddInArrayParamString');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamString
      _TWEthereumAbiFunctionAddInArrayParamString =
      _TWEthereumAbiFunctionAddInArrayParamString_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamString>();

  int TWEthereumAbiFunctionAddInArrayParamAddress(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamAddress(
      fn,
      arrayIdx,
      val,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamAddress_ptr = _lookup<
          ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamAddress>>(
      'TWEthereumAbiFunctionAddInArrayParamAddress');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamAddress
      _TWEthereumAbiFunctionAddInArrayParamAddress =
      _TWEthereumAbiFunctionAddInArrayParamAddress_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamAddress>();

  int TWEthereumAbiFunctionAddInArrayParamBytes(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamBytes(
      fn,
      arrayIdx,
      val,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamBytes_ptr =
      _lookup<ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamBytes>>(
          'TWEthereumAbiFunctionAddInArrayParamBytes');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamBytes
      _TWEthereumAbiFunctionAddInArrayParamBytes =
      _TWEthereumAbiFunctionAddInArrayParamBytes_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamBytes>();

  int TWEthereumAbiFunctionAddInArrayParamBytesFix(
    ffi.Pointer<TWEthereumAbiFunction> fn,
    int arrayIdx,
    int size,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _TWEthereumAbiFunctionAddInArrayParamBytesFix(
      fn,
      arrayIdx,
      size,
      val,
    );
  }

  late final _TWEthereumAbiFunctionAddInArrayParamBytesFix_ptr = _lookup<
          ffi.NativeFunction<_c_TWEthereumAbiFunctionAddInArrayParamBytesFix>>(
      'TWEthereumAbiFunctionAddInArrayParamBytesFix');
  late final _dart_TWEthereumAbiFunctionAddInArrayParamBytesFix
      _TWEthereumAbiFunctionAddInArrayParamBytesFix =
      _TWEthereumAbiFunctionAddInArrayParamBytesFix_ptr.asFunction<
          _dart_TWEthereumAbiFunctionAddInArrayParamBytesFix>();

  /// Encrypts a block of data using AES in Cipher Block Chaining (CBC) mode.
  ///
  /// \param key encryption key, must be 16, 24, or 32 bytes long.
  /// \param data data to encrypt.
  /// \param iv initialization vector.
  ffi.Pointer<ffi.Void> TWAESEncryptCBC(
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> iv,
    int mode,
  ) {
    return _TWAESEncryptCBC(
      key,
      data,
      iv,
      mode,
    );
  }

  late final _TWAESEncryptCBC_ptr =
      _lookup<ffi.NativeFunction<_c_TWAESEncryptCBC>>('TWAESEncryptCBC');
  late final _dart_TWAESEncryptCBC _TWAESEncryptCBC =
      _TWAESEncryptCBC_ptr.asFunction<_dart_TWAESEncryptCBC>();

  /// Decrypts a block of data using AES in Cipher Block Chaining (CBC) mode.
  ///
  /// \param key decryption key, must be 16, 24, or 32 bytes long.
  /// \param data data to decrypt.
  /// \param iv initialization vector.
  ffi.Pointer<ffi.Void> TWAESDecryptCBC(
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> iv,
    int mode,
  ) {
    return _TWAESDecryptCBC(
      key,
      data,
      iv,
      mode,
    );
  }

  late final _TWAESDecryptCBC_ptr =
      _lookup<ffi.NativeFunction<_c_TWAESDecryptCBC>>('TWAESDecryptCBC');
  late final _dart_TWAESDecryptCBC _TWAESDecryptCBC =
      _TWAESDecryptCBC_ptr.asFunction<_dart_TWAESDecryptCBC>();

  /// Encrypts a block of data using AES in Counter (CTR) mode.
  ///
  /// \param key encryption key, must be 16, 24, or 32 bytes long.
  /// \param data data to encrypt.
  /// \param iv initialization vector.
  ffi.Pointer<ffi.Void> TWAESEncryptCTR(
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> iv,
  ) {
    return _TWAESEncryptCTR(
      key,
      data,
      iv,
    );
  }

  late final _TWAESEncryptCTR_ptr =
      _lookup<ffi.NativeFunction<_c_TWAESEncryptCTR>>('TWAESEncryptCTR');
  late final _dart_TWAESEncryptCTR _TWAESEncryptCTR =
      _TWAESEncryptCTR_ptr.asFunction<_dart_TWAESEncryptCTR>();

  /// Decrypts a block of data using AES in Counter (CTR) mode.
  ///
  /// \param key decryption key, must be 16, 24, or 32 bytes long.
  /// \param data data to decrypt.
  /// \param iv initialization vector.
  ffi.Pointer<ffi.Void> TWAESDecryptCTR(
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> iv,
  ) {
    return _TWAESDecryptCTR(
      key,
      data,
      iv,
    );
  }

  late final _TWAESDecryptCTR_ptr =
      _lookup<ffi.NativeFunction<_c_TWAESDecryptCTR>>('TWAESDecryptCTR');
  late final _dart_TWAESDecryptCTR _TWAESDecryptCTR =
      _TWAESDecryptCTR_ptr.asFunction<_dart_TWAESDecryptCTR>();

  ffi.Pointer<TWNEARAccount> TWNEARAccountCreateWithString(
    ffi.Pointer<ffi.Void> string,
  ) {
    return _TWNEARAccountCreateWithString(
      string,
    );
  }

  late final _TWNEARAccountCreateWithString_ptr =
      _lookup<ffi.NativeFunction<_c_TWNEARAccountCreateWithString>>(
          'TWNEARAccountCreateWithString');
  late final _dart_TWNEARAccountCreateWithString
      _TWNEARAccountCreateWithString = _TWNEARAccountCreateWithString_ptr
          .asFunction<_dart_TWNEARAccountCreateWithString>();

  void TWNEARAccountDelete(
    ffi.Pointer<TWNEARAccount> account,
  ) {
    return _TWNEARAccountDelete(
      account,
    );
  }

  late final _TWNEARAccountDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWNEARAccountDelete>>(
          'TWNEARAccountDelete');
  late final _dart_TWNEARAccountDelete _TWNEARAccountDelete =
      _TWNEARAccountDelete_ptr.asFunction<_dart_TWNEARAccountDelete>();

  /// Returns the user friendly string representation.
  ffi.Pointer<ffi.Void> TWNEARAccountDescription(
    ffi.Pointer<TWNEARAccount> account,
  ) {
    return _TWNEARAccountDescription(
      account,
    );
  }

  late final _TWNEARAccountDescription_ptr =
      _lookup<ffi.NativeFunction<_c_TWNEARAccountDescription>>(
          'TWNEARAccountDescription');
  late final _dart_TWNEARAccountDescription _TWNEARAccountDescription =
      _TWNEARAccountDescription_ptr.asFunction<
          _dart_TWNEARAccountDescription>();

  ffi.Pointer<TWAccount> TWAccountCreate(
    ffi.Pointer<ffi.Void> address,
    int coin,
    ffi.Pointer<ffi.Void> derivationPath,
    ffi.Pointer<ffi.Void> extendedPublicKey,
  ) {
    return _TWAccountCreate(
      address,
      coin,
      derivationPath,
      extendedPublicKey,
    );
  }

  late final _TWAccountCreate_ptr =
      _lookup<ffi.NativeFunction<_c_TWAccountCreate>>('TWAccountCreate');
  late final _dart_TWAccountCreate _TWAccountCreate =
      _TWAccountCreate_ptr.asFunction<_dart_TWAccountCreate>();

  void TWAccountDelete(
    ffi.Pointer<TWAccount> account,
  ) {
    return _TWAccountDelete(
      account,
    );
  }

  late final _TWAccountDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWAccountDelete>>('TWAccountDelete');
  late final _dart_TWAccountDelete _TWAccountDelete =
      _TWAccountDelete_ptr.asFunction<_dart_TWAccountDelete>();

  ffi.Pointer<ffi.Void> TWAccountAddress(
    ffi.Pointer<TWAccount> account,
  ) {
    return _TWAccountAddress(
      account,
    );
  }

  late final _TWAccountAddress_ptr =
      _lookup<ffi.NativeFunction<_c_TWAccountAddress>>('TWAccountAddress');
  late final _dart_TWAccountAddress _TWAccountAddress =
      _TWAccountAddress_ptr.asFunction<_dart_TWAccountAddress>();

  ffi.Pointer<ffi.Void> TWAccountDerivationPath(
    ffi.Pointer<TWAccount> account,
  ) {
    return _TWAccountDerivationPath(
      account,
    );
  }

  late final _TWAccountDerivationPath_ptr =
      _lookup<ffi.NativeFunction<_c_TWAccountDerivationPath>>(
          'TWAccountDerivationPath');
  late final _dart_TWAccountDerivationPath _TWAccountDerivationPath =
      _TWAccountDerivationPath_ptr.asFunction<_dart_TWAccountDerivationPath>();

  ffi.Pointer<ffi.Void> TWAccountExtendedPublicKey(
    ffi.Pointer<TWAccount> account,
  ) {
    return _TWAccountExtendedPublicKey(
      account,
    );
  }

  late final _TWAccountExtendedPublicKey_ptr =
      _lookup<ffi.NativeFunction<_c_TWAccountExtendedPublicKey>>(
          'TWAccountExtendedPublicKey');
  late final _dart_TWAccountExtendedPublicKey _TWAccountExtendedPublicKey =
      _TWAccountExtendedPublicKey_ptr.asFunction<
          _dart_TWAccountExtendedPublicKey>();

  int TWAccountCoin(
    ffi.Pointer<TWAccount> account,
  ) {
    return _TWAccountCoin(
      account,
    );
  }

  late final _TWAccountCoin_ptr =
      _lookup<ffi.NativeFunction<_c_TWAccountCoin>>('TWAccountCoin');
  late final _dart_TWAccountCoin _TWAccountCoin =
      _TWAccountCoin_ptr.asFunction<_dart_TWAccountCoin>();

  /// Creates an address from a string representaion.
  ffi.Pointer<TWSolanaAddress> TWSolanaAddressCreateWithString(
    ffi.Pointer<ffi.Void> string,
  ) {
    return _TWSolanaAddressCreateWithString(
      string,
    );
  }

  late final _TWSolanaAddressCreateWithString_ptr =
      _lookup<ffi.NativeFunction<_c_TWSolanaAddressCreateWithString>>(
          'TWSolanaAddressCreateWithString');
  late final _dart_TWSolanaAddressCreateWithString
      _TWSolanaAddressCreateWithString = _TWSolanaAddressCreateWithString_ptr
          .asFunction<_dart_TWSolanaAddressCreateWithString>();

  void TWSolanaAddressDelete(
    ffi.Pointer<TWSolanaAddress> address,
  ) {
    return _TWSolanaAddressDelete(
      address,
    );
  }

  late final _TWSolanaAddressDelete_ptr =
      _lookup<ffi.NativeFunction<_c_TWSolanaAddressDelete>>(
          'TWSolanaAddressDelete');
  late final _dart_TWSolanaAddressDelete _TWSolanaAddressDelete =
      _TWSolanaAddressDelete_ptr.asFunction<_dart_TWSolanaAddressDelete>();

  /// Derive default token address for token
  ffi.Pointer<ffi.Void> TWSolanaAddressDefaultTokenAddress(
    ffi.Pointer<TWSolanaAddress> address,
    ffi.Pointer<ffi.Void> tokenMintAddress,
  ) {
    return _TWSolanaAddressDefaultTokenAddress(
      address,
      tokenMintAddress,
    );
  }

  late final _TWSolanaAddressDefaultTokenAddress_ptr =
      _lookup<ffi.NativeFunction<_c_TWSolanaAddressDefaultTokenAddress>>(
          'TWSolanaAddressDefaultTokenAddress');
  late final _dart_TWSolanaAddressDefaultTokenAddress
      _TWSolanaAddressDefaultTokenAddress =
      _TWSolanaAddressDefaultTokenAddress_ptr.asFunction<
          _dart_TWSolanaAddressDefaultTokenAddress>();

  /// Returns the address string representation.
  ffi.Pointer<ffi.Void> TWSolanaAddressDescription(
    ffi.Pointer<TWSolanaAddress> address,
  ) {
    return _TWSolanaAddressDescription(
      address,
    );
  }

  late final _TWSolanaAddressDescription_ptr =
      _lookup<ffi.NativeFunction<_c_TWSolanaAddressDescription>>(
          'TWSolanaAddressDescription');
  late final _dart_TWSolanaAddressDescription _TWSolanaAddressDescription =
      _TWSolanaAddressDescription_ptr.asFunction<
          _dart_TWSolanaAddressDescription>();
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Int8> __opaque;
}

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class __darwin_i386_thread_state extends ffi.Struct {
  @ffi.Uint32()
  external int __eax;

  @ffi.Uint32()
  external int __ebx;

  @ffi.Uint32()
  external int __ecx;

  @ffi.Uint32()
  external int __edx;

  @ffi.Uint32()
  external int __edi;

  @ffi.Uint32()
  external int __esi;

  @ffi.Uint32()
  external int __ebp;

  @ffi.Uint32()
  external int __esp;

  @ffi.Uint32()
  external int __ss;

  @ffi.Uint32()
  external int __eflags;

  @ffi.Uint32()
  external int __eip;

  @ffi.Uint32()
  external int __cs;

  @ffi.Uint32()
  external int __ds;

  @ffi.Uint32()
  external int __es;

  @ffi.Uint32()
  external int __fs;

  @ffi.Uint32()
  external int __gs;
}

class __darwin_fp_control extends ffi.Opaque {}

class __darwin_fp_status extends ffi.Opaque {}

class __darwin_mmst_reg extends ffi.Struct {
  @ffi.Array.multi([10])
  external ffi.Array<ffi.Int8> __mmst_reg;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Int8> __mmst_rsrv;
}

class __darwin_xmm_reg extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> __xmm_reg;
}

class __darwin_ymm_reg extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> __ymm_reg;
}

class __darwin_zmm_reg extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> __zmm_reg;
}

class __darwin_opmask_reg extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opmask_reg;
}

class __darwin_i386_float_state extends ffi.Opaque {}

class __darwin_i386_avx_state extends ffi.Opaque {}

class __darwin_i386_avx512_state extends ffi.Opaque {}

class __darwin_i386_exception_state extends ffi.Struct {
  @ffi.Uint16()
  external int __trapno;

  @ffi.Uint16()
  external int __cpu;

  @ffi.Uint32()
  external int __err;

  @ffi.Uint32()
  external int __faultvaddr;
}

class __darwin_x86_debug_state32 extends ffi.Struct {
  @ffi.Uint32()
  external int __dr0;

  @ffi.Uint32()
  external int __dr1;

  @ffi.Uint32()
  external int __dr2;

  @ffi.Uint32()
  external int __dr3;

  @ffi.Uint32()
  external int __dr4;

  @ffi.Uint32()
  external int __dr5;

  @ffi.Uint32()
  external int __dr6;

  @ffi.Uint32()
  external int __dr7;
}

class __x86_instruction_state extends ffi.Struct {
  @ffi.Int32()
  external int __insn_stream_valid_bytes;

  @ffi.Int32()
  external int __insn_offset;

  @ffi.Int32()
  external int __out_of_synch;

  @ffi.Array.multi([2380])
  external ffi.Array<ffi.Uint8> __insn_bytes;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> __insn_cacheline;
}

class __last_branch_record extends ffi.Opaque {}

class __last_branch_state extends ffi.Opaque {}

class __x86_pagein_state extends ffi.Struct {
  @ffi.Int32()
  external int __pagein_error;
}

class __darwin_x86_thread_state64 extends ffi.Struct {
  @ffi.Uint64()
  external int __rax;

  @ffi.Uint64()
  external int __rbx;

  @ffi.Uint64()
  external int __rcx;

  @ffi.Uint64()
  external int __rdx;

  @ffi.Uint64()
  external int __rdi;

  @ffi.Uint64()
  external int __rsi;

  @ffi.Uint64()
  external int __rbp;

  @ffi.Uint64()
  external int __rsp;

  @ffi.Uint64()
  external int __r8;

  @ffi.Uint64()
  external int __r9;

  @ffi.Uint64()
  external int __r10;

  @ffi.Uint64()
  external int __r11;

  @ffi.Uint64()
  external int __r12;

  @ffi.Uint64()
  external int __r13;

  @ffi.Uint64()
  external int __r14;

  @ffi.Uint64()
  external int __r15;

  @ffi.Uint64()
  external int __rip;

  @ffi.Uint64()
  external int __rflags;

  @ffi.Uint64()
  external int __cs;

  @ffi.Uint64()
  external int __fs;

  @ffi.Uint64()
  external int __gs;
}

class __darwin_x86_thread_full_state64 extends ffi.Struct {
  external __darwin_x86_thread_state64 __ss64;

  @ffi.Uint64()
  external int __ds;

  @ffi.Uint64()
  external int __es;

  @ffi.Uint64()
  external int __ss;

  @ffi.Uint64()
  external int __gsbase;
}

class __darwin_x86_float_state64 extends ffi.Opaque {}

class __darwin_x86_avx_state64 extends ffi.Opaque {}

class __darwin_x86_avx512_state64 extends ffi.Opaque {}

class __darwin_x86_exception_state64 extends ffi.Struct {
  @ffi.Uint16()
  external int __trapno;

  @ffi.Uint16()
  external int __cpu;

  @ffi.Uint32()
  external int __err;

  @ffi.Uint64()
  external int __faultvaddr;
}

class __darwin_x86_debug_state64 extends ffi.Struct {
  @ffi.Uint64()
  external int __dr0;

  @ffi.Uint64()
  external int __dr1;

  @ffi.Uint64()
  external int __dr2;

  @ffi.Uint64()
  external int __dr3;

  @ffi.Uint64()
  external int __dr4;

  @ffi.Uint64()
  external int __dr5;

  @ffi.Uint64()
  external int __dr6;

  @ffi.Uint64()
  external int __dr7;
}

class __darwin_x86_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint64> __ctrs;
}

class __darwin_mcontext32 extends ffi.Opaque {}

class __darwin_mcontext_avx32 extends ffi.Opaque {}

class __darwin_mcontext_avx512_32 extends ffi.Opaque {}

class __darwin_mcontext64 extends ffi.Opaque {}

class __darwin_mcontext64_full extends ffi.Opaque {}

class __darwin_mcontext_avx64 extends ffi.Opaque {}

class __darwin_mcontext_avx64_full extends ffi.Opaque {}

class __darwin_mcontext_avx512_64 extends ffi.Opaque {}

class __darwin_mcontext_avx512_64_full extends ffi.Opaque {}

class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Uint64()
  external int ss_size;

  @ffi.Int32()
  external int ss_flags;
}

class __darwin_ucontext extends ffi.Struct {
  @ffi.Int32()
  external int uc_onstack;

  @ffi.Uint32()
  external int uc_sigmask;

  external __darwin_sigaltstack uc_stack;

  external ffi.Pointer<__darwin_ucontext> uc_link;

  @ffi.Uint64()
  external int uc_mcsize;

  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

class sigevent extends ffi.Opaque {}

class siginfo_t extends ffi.Opaque {}

class __sigaction extends ffi.Opaque {}

class sigaction extends ffi.Opaque {}

class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_3>> sv_handler;

  @ffi.Int32()
  external int sv_mask;

  @ffi.Int32()
  external int sv_flags;
}

class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> ss_sp;

  @ffi.Int32()
  external int ss_onstack;
}

class timeval extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int32()
  external int tv_usec;
}

class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @ffi.Int64()
  external int ru_maxrss;

  @ffi.Int64()
  external int ru_ixrss;

  @ffi.Int64()
  external int ru_idrss;

  @ffi.Int64()
  external int ru_isrss;

  @ffi.Int64()
  external int ru_minflt;

  @ffi.Int64()
  external int ru_majflt;

  @ffi.Int64()
  external int ru_nswap;

  @ffi.Int64()
  external int ru_inblock;

  @ffi.Int64()
  external int ru_oublock;

  @ffi.Int64()
  external int ru_msgsnd;

  @ffi.Int64()
  external int ru_msgrcv;

  @ffi.Int64()
  external int ru_nsignals;

  @ffi.Int64()
  external int ru_nvcsw;

  @ffi.Int64()
  external int ru_nivcsw;
}

class rusage_info_v0 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;
}

class rusage_info_v1 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

class rusage_info_v2 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;
}

class rusage_info_v3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;
}

class rusage_info_v4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;
}

class rusage_info_v5 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;
}

class rlimit extends ffi.Struct {
  @ffi.Uint64()
  external int rlim_cur;

  @ffi.Uint64()
  external int rlim_max;
}

class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

class div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

/// HD wallet purpose
///
/// See https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki
/// See https://github.com/bitcoin/bips/blob/master/bip-0049.mediawiki
/// See https://github.com/bitcoin/bips/blob/master/bip-0084.mediawiki
abstract class TWPurpose {
  static const int TWPurposeBIP44 = 44;
  static const int TWPurposeBIP49 = 49;
  static const int TWPurposeBIP84 = 84;
  static const int TWPurposeBIP1852 = 1852;
}

abstract class TWBlockchain {
  static const int TWBlockchainBitcoin = 0;
  static const int TWBlockchainEthereum = 1;
  static const int TWBlockchainVechain = 3;
  static const int TWBlockchainTron = 4;
  static const int TWBlockchainIcon = 5;
  static const int TWBlockchainBinance = 6;
  static const int TWBlockchainRipple = 7;
  static const int TWBlockchainTezos = 8;
  static const int TWBlockchainNimiq = 9;
  static const int TWBlockchainStellar = 10;
  static const int TWBlockchainAion = 11;
  static const int TWBlockchainCosmos = 12;
  static const int TWBlockchainTheta = 13;
  static const int TWBlockchainOntology = 14;
  static const int TWBlockchainZilliqa = 15;
  static const int TWBlockchainIoTeX = 16;
  static const int TWBlockchainEOS = 17;
  static const int TWBlockchainNano = 18;
  static const int TWBlockchainNULS = 19;
  static const int TWBlockchainWaves = 20;
  static const int TWBlockchainAeternity = 21;
  static const int TWBlockchainNebulas = 22;
  static const int TWBlockchainFIO = 23;
  static const int TWBlockchainSolana = 24;
  static const int TWBlockchainHarmony = 25;
  static const int TWBlockchainNEAR = 26;
  static const int TWBlockchainAlgorand = 27;
  static const int TWBlockchainPolkadot = 29;
  static const int TWBlockchainCardano = 30;
  static const int TWBlockchainNEO = 31;
  static const int TWBlockchainFilecoin = 32;
  static const int TWBlockchainElrondNetwork = 33;
  static const int TWBlockchainOasisNetwork = 34;
}

/// Elliptic cruves
abstract class TWCurve {
  static const int TWCurveSECP256k1 = 0;
  static const int TWCurveED25519 = 1;
  static const int TWCurveED25519Blake2bNano = 2;
  static const int TWCurveCurve25519 = 3;
  static const int TWCurveNIST256p1 = 4;
  static const int TWCurveED25519Extended = 5;
  static const int TWCurveNone = 6;
}

/// Registered HD version bytes
///
/// - SeeAlso: https://github.com/satoshilabs/slips/blob/master/slip-0132.md
abstract class TWHDVersion {
  static const int TWHDVersionNone = 0;
  static const int TWHDVersionXPUB = 76067358;
  static const int TWHDVersionXPRV = 76066276;
  static const int TWHDVersionYPUB = 77429938;
  static const int TWHDVersionYPRV = 77428856;
  static const int TWHDVersionZPUB = 78792518;
  static const int TWHDVersionZPRV = 78791436;
  static const int TWHDVersionLTUB = 27108450;
  static const int TWHDVersionLTPV = 27106558;
  static const int TWHDVersionMTUB = 28471030;
  static const int TWHDVersionMTPV = 28469138;
  static const int TWHDVersionDPUB = 50178342;
  static const int TWHDVersionDPRV = 50177256;
  static const int TWHDVersionDGUB = 49990397;
  static const int TWHDVersionDGPV = 49988504;
}

/// Registered human-readable parts for BIP-0173
///
/// - SeeAlso: https://github.com/satoshilabs/slips/blob/master/slip-0173.md
abstract class TWHRP {
  static const int TWHRPUnknown = 0;
  static const int TWHRPBitcoin = 1;
  static const int TWHRPLitecoin = 2;
  static const int TWHRPViacoin = 3;
  static const int TWHRPGroestlcoin = 4;
  static const int TWHRPDigiByte = 5;
  static const int TWHRPMonacoin = 6;
  static const int TWHRPCosmos = 7;
  static const int TWHRPBitcoinCash = 8;
  static const int TWHRPBitcoinGold = 9;
  static const int TWHRPIoTeX = 10;
  static const int TWHRPZilliqa = 11;
  static const int TWHRPTerra = 12;
  static const int TWHRPCryptoOrg = 13;
  static const int TWHRPKava = 14;
  static const int TWHRPOasis = 15;
  static const int TWHRPBluzelle = 16;
  static const int TWHRPBandChain = 17;
  static const int TWHRPElrond = 18;
  static const int TWHRPBinance = 19;
  static const int TWHRPECash = 20;
  static const int TWHRPTHORChain = 21;
  static const int TWHRPHarmony = 22;
  static const int TWHRPCardano = 23;
  static const int TWHRPQtum = 24;
  static const int TWHRPOsmosis = 25;
}

/// Public key types
abstract class TWPublicKeyType {
  static const int TWPublicKeyTypeSECP256k1 = 0;
  static const int TWPublicKeyTypeSECP256k1Extended = 1;
  static const int TWPublicKeyTypeNIST256p1 = 2;
  static const int TWPublicKeyTypeNIST256p1Extended = 3;
  static const int TWPublicKeyTypeED25519 = 4;
  static const int TWPublicKeyTypeED25519Blake2b = 5;
  static const int TWPublicKeyTypeCURVE25519 = 6;
  static const int TWPublicKeyTypeED25519Extended = 7;
}

class TWPublicKey extends ffi.Opaque {}

class TWPrivateKey extends ffi.Opaque {}

/// Coin type for Level 2 of BIP44.
///
/// - SeeAlso: https://github.com/satoshilabs/slips/blob/master/slip-0044.md
abstract class TWCoinType {
  static const int TWCoinTypeAeternity = 457;
  static const int TWCoinTypeAion = 425;
  static const int TWCoinTypeBinance = 714;
  static const int TWCoinTypeBitcoin = 0;
  static const int TWCoinTypeBitcoinCash = 145;
  static const int TWCoinTypeBitcoinGold = 156;
  static const int TWCoinTypeCallisto = 820;
  static const int TWCoinTypeCardano = 1815;
  static const int TWCoinTypeCosmos = 118;
  static const int TWCoinTypeDash = 5;
  static const int TWCoinTypeDecred = 42;
  static const int TWCoinTypeDigiByte = 20;
  static const int TWCoinTypeDogecoin = 3;
  static const int TWCoinTypeEOS = 194;
  static const int TWCoinTypeEthereum = 60;
  static const int TWCoinTypeEthereumClassic = 61;
  static const int TWCoinTypeFIO = 235;
  static const int TWCoinTypeGoChain = 6060;
  static const int TWCoinTypeGroestlcoin = 17;
  static const int TWCoinTypeICON = 74;
  static const int TWCoinTypeIoTeX = 304;
  static const int TWCoinTypeKava = 459;
  static const int TWCoinTypeKin = 2017;
  static const int TWCoinTypeLitecoin = 2;
  static const int TWCoinTypeMonacoin = 22;
  static const int TWCoinTypeNebulas = 2718;
  static const int TWCoinTypeNULS = 8964;
  static const int TWCoinTypeNano = 165;
  static const int TWCoinTypeNEAR = 397;
  static const int TWCoinTypeNimiq = 242;
  static const int TWCoinTypeOntology = 1024;
  static const int TWCoinTypePOANetwork = 178;
  static const int TWCoinTypeQtum = 2301;
  static const int TWCoinTypeXRP = 144;
  static const int TWCoinTypeSolana = 501;
  static const int TWCoinTypeStellar = 148;
  static const int TWCoinTypeTezos = 1729;
  static const int TWCoinTypeTheta = 500;
  static const int TWCoinTypeThunderToken = 1001;
  static const int TWCoinTypeNEO = 888;
  static const int TWCoinTypeTomoChain = 889;
  static const int TWCoinTypeTron = 195;
  static const int TWCoinTypeVeChain = 818;
  static const int TWCoinTypeViacoin = 14;
  static const int TWCoinTypeWanchain = 5718350;
  static const int TWCoinTypeZcash = 133;
  static const int TWCoinTypeFiro = 136;
  static const int TWCoinTypeZilliqa = 313;
  static const int TWCoinTypeZelcash = 19167;
  static const int TWCoinTypeRavencoin = 175;
  static const int TWCoinTypeWaves = 5741564;
  static const int TWCoinTypeTerra = 330;
  static const int TWCoinTypeHarmony = 1023;
  static const int TWCoinTypeAlgorand = 283;
  static const int TWCoinTypeKusama = 434;
  static const int TWCoinTypePolkadot = 354;
  static const int TWCoinTypeFilecoin = 461;
  static const int TWCoinTypeElrond = 508;
  static const int TWCoinTypeBandChain = 494;
  static const int TWCoinTypeSmartChainLegacy = 10000714;
  static const int TWCoinTypeSmartChain = 20000714;
  static const int TWCoinTypeOasis = 474;
  static const int TWCoinTypePolygon = 966;
  static const int TWCoinTypeTHORChain = 931;
  static const int TWCoinTypeBluzelle = 483;
  static const int TWCoinTypeOptimism = 10000070;
  static const int TWCoinTypeArbitrum = 10042221;
  static const int TWCoinTypeECOChain = 10000553;
  static const int TWCoinTypeAvalancheCChain = 10009000;
  static const int TWCoinTypeXDai = 10000100;
  static const int TWCoinTypeFantom = 10000250;
  static const int TWCoinTypeCryptoOrg = 394;
  static const int TWCoinTypeCelo = 52752;
  static const int TWCoinTypeRonin = 10002020;
  static const int TWCoinTypeOsmosis = 10000118;
  static const int TWCoinTypeECash = 899;
  static const int TWCoinTypeCronosChain = 10000025;
  static const int TWCoinTypeSmartBitcoinCash = 10000145;
}

class TWCoinTypeConfiguration extends ffi.Struct {
  @ffi.Uint8()
  external int unused;
}

class TWHDWallet extends ffi.Opaque {}

class TWDataVector extends ffi.Opaque {}

/// Non-core transaction utility methods, like building a transaction using an external signature.
class TWTransactionCompiler extends ffi.Opaque {}

abstract class TWBitcoinSigHashType {
  static const int TWBitcoinSigHashTypeAll = 1;
  static const int TWBitcoinSigHashTypeNone = 2;
  static const int TWBitcoinSigHashTypeSingle = 3;
  static const int TWBitcoinSigHashTypeFork = 64;
  static const int TWBitcoinSigHashTypeForkBTG = 20288;
  static const int TWBitcoinSigHashTypeAnyoneCanPay = 128;
}

class TWEthereumAbiValue extends ffi.Opaque {}

/// Helper class to sign any transactions.
class TWAnySigner extends ffi.Opaque {}

/// Represents a BIP 0173 address.
class TWSegwitAddress extends ffi.Opaque {}

abstract class TWStellarMemoType {
  static const int TWStellarMemoTypeNone = 0;
  static const int TWStellarMemoTypeText = 1;
  static const int TWStellarMemoTypeId = 2;
  static const int TWStellarMemoTypeHash = 3;
  static const int TWStellarMemoTypeReturn = 4;
}

/// Represents a legacy Bitcoin address.
class TWBitcoinAddress extends ffi.Opaque {}

/// Represents Any blockchain address.
class TWAnyAddress extends ffi.Opaque {}

class TWTHORChainSwap extends ffi.Opaque {}

class TWBase58 extends ffi.Opaque {}

/// Substrate based chains Address Type
///
/// - See Also: https://github.com/paritytech/substrate/wiki/External-Address-Format-(SS58)#address-type
abstract class TWSS58AddressType {
  static const int TWSS58AddressTypePolkadot = 0;
  static const int TWSS58AddressTypeKusama = 2;
}

/// Represents a Ripple X-address.
class TWRippleXAddress extends ffi.Opaque {}

class TWPBKDF2 extends ffi.Opaque {}

class TWEthereumAbiFunction extends ffi.Opaque {}

class TWEthereumAbi extends ffi.Opaque {}

abstract class TWStellarPassphrase {
  static const int TWStellarPassphraseStellar = 0;
  static const int TWStellarPassphraseKin = 1;
}

class TWHash extends ffi.Struct {
  @ffi.Uint8()
  external int unused;
}

/// Preset encryption parameter with different security strength, for key store
abstract class TWStoredKeyEncryptionLevel {
  /// Default, which is one of the below values, determined by the implementation.
  static const int TWStoredKeyEncryptionLevelDefault = 0;

  /// Minimal sufficient level of encryption strength (scrypt 4096)
  static const int TWStoredKeyEncryptionLevelMinimal = 1;

  /// Weak encryption strength (scrypt 16k)
  static const int TWStoredKeyEncryptionLevelWeak = 2;

  /// Standard level of encryption strength (scrypt 262k)
  static const int TWStoredKeyEncryptionLevelStandard = 3;
}

/// Represents a key stored as an encrypted file.
class TWStoredKey extends ffi.Opaque {}

class TWAccount extends ffi.Opaque {}

class TWBitcoinScript extends ffi.Opaque {}

/// Represents a FIO Account name
class TWFIOAccount extends ffi.Opaque {}

/// Represents a legacy Groestlcoin address.
class TWGroestlcoinAddress extends ffi.Opaque {}

class TWMnemonic extends ffi.Opaque {}

abstract class TWStellarVersionByte {
  static const int TWStellarVersionByteAccountID = 48;
  static const int TWStellarVersionByteSeed = 192;
  static const int TWStellarVersionBytePreAuthTX = 200;
  static const int TWStellarVersionByteSHA256Hash = 280;
}

abstract class TWAESPaddingMode {
  static const int TWAESPaddingModeZero = 0;
  static const int TWAESPaddingModePKCS7 = 1;
}

class TWAES extends ffi.Struct {
  @ffi.Uint8()
  external int unused;
}

/// Represents a NEAR Account name
class TWNEARAccount extends ffi.Opaque {}

/// Chain identifier for Ethereum-based blockchains.
abstract class TWEthereumChainID {
  static const int TWEthereumChainIDEthereum = 1;
  static const int TWEthereumChainIDGo = 60;
  static const int TWEthereumChainIDPOA = 99;
  static const int TWEthereumChainIDCallisto = 820;
  static const int TWEthereumChainIDEthereumClassic = 61;
  static const int TWEthereumChainIDVeChain = 74;
  static const int TWEthereumChainIDThunderToken = 108;
  static const int TWEthereumChainIDTomoChain = 88;
  static const int TWEthereumChainIDBinanceSmartChain = 56;
  static const int TWEthereumChainIDPolygon = 137;
  static const int TWEthereumChainIDWanchain = 888;
  static const int TWEthereumChainIDOptimism = 10;
  static const int TWEthereumChainIDArbitrum = 42161;
  static const int TWEthereumChainIDHeco = 128;
  static const int TWEthereumChainIDAvalanche = 43114;
  static const int TWEthereumChainIDXDai = 100;
  static const int TWEthereumChainIDFantom = 250;
  static const int TWEthereumChainIDCelo = 42220;
  static const int TWEthereumChainIDRonin = 2020;
  static const int TWEthereumChainIDCronos = 25;
  static const int TWEthereumChainIDSmartBitcoinCash = 10000;
}

class TWSolanaAddress extends ffi.Opaque {}

const int true_1 = 1;

const int false_1 = 0;

const int __bool_true_false_are_defined = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_12_0 = 120000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 110000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 120100;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _I386_SIGNAL_H_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int FP_PREC_24B = 0;

const int FP_PREC_53B = 2;

const int FP_PREC_64B = 3;

const int FP_RND_NEAR = 0;

const int FP_RND_DOWN = 1;

const int FP_RND_UP = 2;

const int FP_CHOP = 3;

const int FP_STATE_BYTES = 512;

const int _X86_INSTRUCTION_STATE_MAX_INSN_BYTES = 2380;

const int _X86_INSTRUCTION_STATE_CACHELINE_SIZE = 64;

const int __LASTBRANCH_MAX = 32;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_CURRENT = 5;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = 7;

const int IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = 8;

const int IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = 9;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int IOPOL_VFS_IGNORE_PERMISSIONS_OFF = 0;

const int IOPOL_VFS_IGNORE_PERMISSIONS_ON = 1;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = 0;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_ON = 1;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = 0;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

typedef _typedefC_4 = ffi.Void Function(
  ffi.Int32,
);

typedef _typedefC_5 = ffi.Void Function(
  ffi.Int32,
);

typedef _c_signal = ffi.Pointer<ffi.NativeFunction<_typedefC_4>> Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg1,
);

typedef _dart_signal = ffi.Pointer<ffi.NativeFunction<_typedefC_4>> Function(
  int arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg1,
);

typedef _c_getpriority = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart_getpriority = int Function(
  int arg0,
  int arg1,
);

typedef _c_getiopolicy_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_getiopolicy_np = int Function(
  int arg0,
  int arg1,
);

typedef _c_getrlimit = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<rlimit> arg1,
);

typedef _dart_getrlimit = int Function(
  int arg0,
  ffi.Pointer<rlimit> arg1,
);

typedef _c_getrusage = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<rusage> arg1,
);

typedef _dart_getrusage = int Function(
  int arg0,
  ffi.Pointer<rusage> arg1,
);

typedef _c_setpriority = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_setpriority = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef _c_setiopolicy_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_setiopolicy_np = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef _c_setrlimit = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<rlimit> arg1,
);

typedef _dart_setrlimit = int Function(
  int arg0,
  ffi.Pointer<rlimit> arg1,
);

typedef _c_wait = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart_wait = int Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _c_waitpid = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Int32 arg2,
);

typedef _dart_waitpid = int Function(
  int arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
);

typedef _c_waitid = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<siginfo_t> arg2,
  ffi.Int32 arg3,
);

typedef _dart_waitid = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<siginfo_t> arg2,
  int arg3,
);

typedef _c_wait3 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<rusage> arg2,
);

typedef _dart_wait3 = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  int arg1,
  ffi.Pointer<rusage> arg2,
);

typedef _c_wait4 = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<rusage> arg3,
);

typedef _dart_wait4 = int Function(
  int arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
  ffi.Pointer<rusage> arg3,
);

typedef _c_alloca = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 arg0,
);

typedef _dart_alloca = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef _c_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __size,
);

typedef _dart_malloc = ffi.Pointer<ffi.Void> Function(
  int __size,
);

typedef _c_calloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __count,
  ffi.Uint64 __size,
);

typedef _dart_calloc = ffi.Pointer<ffi.Void> Function(
  int __count,
  int __size,
);

typedef _c_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_free = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
);

typedef _dart_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
);

typedef _c_valloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 arg0,
);

typedef _dart_valloc = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef _c_aligned_alloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __alignment,
  ffi.Uint64 __size,
);

typedef _dart_aligned_alloc = ffi.Pointer<ffi.Void> Function(
  int __alignment,
  int __size,
);

typedef _c_posix_memalign = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  ffi.Uint64 __alignment,
  ffi.Uint64 __size,
);

typedef _dart_posix_memalign = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  int __alignment,
  int __size,
);

typedef _c_abort = ffi.Void Function();

typedef _dart_abort = void Function();

typedef _c_abs = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_abs = int Function(
  int arg0,
);

typedef _typedefC_6 = ffi.Void Function();

typedef _c_atexit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg0,
);

typedef _dart_atexit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg0,
);

typedef _c_atof = ffi.Double Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atof = double Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_atoi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atoi = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_atol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atol = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_atoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atoll = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _typedefC_7 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> __compar,
);

typedef _dart_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> __compar,
);

typedef _c_div = div_t Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_div = div_t Function(
  int arg0,
  int arg1,
);

typedef _c_exit = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart_exit = void Function(
  int arg0,
);

typedef _c_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_labs = ffi.Int64 Function(
  ffi.Int64 arg0,
);

typedef _dart_labs = int Function(
  int arg0,
);

typedef _c_ldiv = ldiv_t Function(
  ffi.Int64 arg0,
  ffi.Int64 arg1,
);

typedef _dart_ldiv = ldiv_t Function(
  int arg0,
  int arg1,
);

typedef _c_llabs = ffi.Int64 Function(
  ffi.Int64 arg0,
);

typedef _dart_llabs = int Function(
  int arg0,
);

typedef _c_lldiv = lldiv_t Function(
  ffi.Int64 arg0,
  ffi.Int64 arg1,
);

typedef _dart_lldiv = lldiv_t Function(
  int arg0,
  int arg1,
);

typedef _c_mblen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __n,
);

typedef _dart_mblen = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __n,
);

typedef _c_mbstowcs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_mbstowcs = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_mbtowc = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_mbtowc = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _typedefC_8 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_qsort = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> __compar,
);

typedef _dart_qsort = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> __compar,
);

typedef _c_rand = ffi.Int32 Function();

typedef _dart_rand = int Function();

typedef _c_srand = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart_srand = void Function(
  int arg0,
);

typedef _c_strtod = ffi.Double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart_strtod = double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c_strtof = ffi.Float Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart_strtof = double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c_strtol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtol = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoll = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoul = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoul = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoull = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoull = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_system = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_system = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_wcstombs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_wcstombs = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
);

typedef _c_wctomb = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_wctomb = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c__Exit = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart__Exit = void Function(
  int arg0,
);

typedef _c_a64l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_a64l = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_drand48 = ffi.Double Function();

typedef _dart_drand48 = double Function();

typedef _c_ecvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_ecvt = ffi.Pointer<ffi.Int8> Function(
  double arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_erand48 = ffi.Double Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_erand48 = double Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_fcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_fcvt = ffi.Pointer<ffi.Int8> Function(
  double arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_gcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_gcvt = ffi.Pointer<ffi.Int8> Function(
  double arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_getsubopt = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_getsubopt = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_grantpt = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_grantpt = int Function(
  int arg0,
);

typedef _c_initstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_initstate = ffi.Pointer<ffi.Int8> Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_jrand48 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_jrand48 = int Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_l64a = ffi.Pointer<ffi.Int8> Function(
  ffi.Int64 arg0,
);

typedef _dart_l64a = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _c_lcong48 = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_lcong48 = void Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_lrand48 = ffi.Int64 Function();

typedef _dart_lrand48 = int Function();

typedef _c_mktemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_mktemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_mkstemp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_mkstemp = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_mrand48 = ffi.Int64 Function();

typedef _dart_mrand48 = int Function();

typedef _c_nrand48 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_nrand48 = int Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_posix_openpt = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_posix_openpt = int Function(
  int arg0,
);

typedef _c_ptsname = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 arg0,
);

typedef _dart_ptsname = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _c_ptsname_r = ffi.Int32 Function(
  ffi.Int32 fildes,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_ptsname_r = int Function(
  int fildes,
  ffi.Pointer<ffi.Int8> buffer,
  int buflen,
);

typedef _c_putenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_putenv = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_random = ffi.Int64 Function();

typedef _dart_random = int Function();

typedef _c_rand_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _dart_rand_r = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _c_realpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_realpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_seed48 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_seed48 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_setenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __value,
  ffi.Int32 __overwrite,
);

typedef _dart_setenv = int Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __value,
  int __overwrite,
);

typedef _c_setkey = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setkey = void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_setstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_srand48 = ffi.Void Function(
  ffi.Int64 arg0,
);

typedef _dart_srand48 = void Function(
  int arg0,
);

typedef _c_srandom = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart_srandom = void Function(
  int arg0,
);

typedef _c_unlockpt = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_unlockpt = int Function(
  int arg0,
);

typedef _c_unsetenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_unsetenv = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_arc4random = ffi.Uint32 Function();

typedef _dart_arc4random = int Function();

typedef _c_arc4random_addrandom = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_arc4random_addrandom = void Function(
  ffi.Pointer<ffi.Uint8> arg0,
  int arg1,
);

typedef _c_arc4random_buf = ffi.Void Function(
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbytes,
);

typedef _dart_arc4random_buf = void Function(
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
);

typedef _c_arc4random_stir = ffi.Void Function();

typedef _dart_arc4random_stir = void Function();

typedef _c_arc4random_uniform = ffi.Uint32 Function(
  ffi.Uint32 __upper_bound,
);

typedef _dart_arc4random_uniform = int Function(
  int __upper_bound,
);

typedef _c_cgetcap = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_cgetcap = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_cgetclose = ffi.Int32 Function();

typedef _dart_cgetclose = int Function();

typedef _c_cgetent = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_cgetent = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_cgetfirst = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart_cgetfirst = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c_cgetmatch = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_cgetmatch = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_cgetnext = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart_cgetnext = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c_cgetnum = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int64> arg2,
);

typedef _dart_cgetnum = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int64> arg2,
);

typedef _c_cgetset = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_cgetset = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_cgetstr = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_cgetstr = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_cgetustr = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_cgetustr = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_daemon = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_daemon = int Function(
  int arg0,
  int arg1,
);

typedef _c_devname = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 arg0,
  ffi.Uint16 arg1,
);

typedef _dart_devname = ffi.Pointer<ffi.Int8> Function(
  int arg0,
  int arg1,
);

typedef _c_devname_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 arg0,
  ffi.Uint16 arg1,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Int32 len,
);

typedef _dart_devname_r = ffi.Pointer<ffi.Int8> Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> buf,
  int len,
);

typedef _c_getbsize = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_getbsize = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_getloadavg = ffi.Int32 Function(
  ffi.Pointer<ffi.Double> arg0,
  ffi.Int32 arg1,
);

typedef _dart_getloadavg = int Function(
  ffi.Pointer<ffi.Double> arg0,
  int arg1,
);

typedef _c_getprogname = ffi.Pointer<ffi.Int8> Function();

typedef _dart_getprogname = ffi.Pointer<ffi.Int8> Function();

typedef _c_setprogname = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setprogname = void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _typedefC_9 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_heapsort = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> __compar,
);

typedef _dart_heapsort = int Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> __compar,
);

typedef _typedefC_10 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_mergesort = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> __compar,
);

typedef _dart_mergesort = int Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> __compar,
);

typedef _typedefC_11 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_psort = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> __compar,
);

typedef _dart_psort = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> __compar,
);

typedef _typedefC_12 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_psort_r = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> __compar,
);

typedef _dart_psort_r = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> __compar,
);

typedef _typedefC_13 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_qsort_r = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> __compar,
);

typedef _dart_qsort_r = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> __compar,
);

typedef _c_radixsort = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
  ffi.Int32 __nel,
  ffi.Pointer<ffi.Uint8> __table,
  ffi.Uint32 __endbyte,
);

typedef _dart_radixsort = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
  int __nel,
  ffi.Pointer<ffi.Uint8> __table,
  int __endbyte,
);

typedef _c_rpmatch = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_rpmatch = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_sradixsort = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
  ffi.Int32 __nel,
  ffi.Pointer<ffi.Uint8> __table,
  ffi.Uint32 __endbyte,
);

typedef _dart_sradixsort = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
  int __nel,
  ffi.Pointer<ffi.Uint8> __table,
  int __endbyte,
);

typedef _c_sranddev = ffi.Void Function();

typedef _dart_sranddev = void Function();

typedef _c_srandomdev = ffi.Void Function();

typedef _dart_srandomdev = void Function();

typedef _c_reallocf = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
);

typedef _dart_reallocf = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
);

typedef _c_strtonum = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __numstr,
  ffi.Int64 __minval,
  ffi.Int64 __maxval,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __errstrp,
);

typedef _dart_strtonum = int Function(
  ffi.Pointer<ffi.Int8> __numstr,
  int __minval,
  int __maxval,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __errstrp,
);

typedef _c_strtoq = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoq = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtouq = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtouq = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_TWDataCreateWithBytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint8> bytes,
  ffi.Uint64 size,
);

typedef _dart_TWDataCreateWithBytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint8> bytes,
  int size,
);

typedef _c_TWDataCreateWithSize = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 size,
);

typedef _dart_TWDataCreateWithSize = ffi.Pointer<ffi.Void> Function(
  int size,
);

typedef _c_TWDataCreateWithData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWDataCreateWithData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWDataCreateWithHexString = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hex,
);

typedef _dart_TWDataCreateWithHexString = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hex,
);

typedef _c_TWDataSize = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWDataSize = int Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWDataBytes = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWDataBytes = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWDataGet = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Uint64 index,
);

typedef _dart_TWDataGet = int Function(
  ffi.Pointer<ffi.Void> data,
  int index,
);

typedef _c_TWDataSet = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Uint64 index,
  ffi.Uint8 byte,
);

typedef _dart_TWDataSet = void Function(
  ffi.Pointer<ffi.Void> data,
  int index,
  int byte,
);

typedef _c_TWDataCopyBytes = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Uint64 start,
  ffi.Uint64 size,
  ffi.Pointer<ffi.Uint8> output,
);

typedef _dart_TWDataCopyBytes = void Function(
  ffi.Pointer<ffi.Void> data,
  int start,
  int size,
  ffi.Pointer<ffi.Uint8> output,
);

typedef _c_TWDataReplaceBytes = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Uint64 start,
  ffi.Uint64 size,
  ffi.Pointer<ffi.Uint8> bytes,
);

typedef _dart_TWDataReplaceBytes = void Function(
  ffi.Pointer<ffi.Void> data,
  int start,
  int size,
  ffi.Pointer<ffi.Uint8> bytes,
);

typedef _c_TWDataAppendBytes = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Uint8> bytes,
  ffi.Uint64 size,
);

typedef _dart_TWDataAppendBytes = void Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Uint8> bytes,
  int size,
);

typedef _c_TWDataAppendByte = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Uint8 byte,
);

typedef _dart_TWDataAppendByte = void Function(
  ffi.Pointer<ffi.Void> data,
  int byte,
);

typedef _c_TWDataAppendData = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> append,
);

typedef _dart_TWDataAppendData = void Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> append,
);

typedef _c_TWDataReverse = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWDataReverse = void Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWDataReset = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWDataReset = void Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWDataDelete = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWDataDelete = void Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWDataEqual = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> lhs,
  ffi.Pointer<ffi.Void> rhs,
);

typedef _dart_TWDataEqual = int Function(
  ffi.Pointer<ffi.Void> lhs,
  ffi.Pointer<ffi.Void> rhs,
);

typedef _c_TWHDVersionIsPublic = ffi.Uint8 Function(
  ffi.Int32 version,
);

typedef _dart_TWHDVersionIsPublic = int Function(
  int version,
);

typedef _c_TWHDVersionIsPrivate = ffi.Uint8 Function(
  ffi.Int32 version,
);

typedef _dart_TWHDVersionIsPrivate = int Function(
  int version,
);

typedef _c_stringForHRP = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 hrp,
);

typedef _dart_stringForHRP = ffi.Pointer<ffi.Int8> Function(
  int hrp,
);

typedef _c_hrpForString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> string,
);

typedef _dart_hrpForString = int Function(
  ffi.Pointer<ffi.Int8> string,
);

typedef _c_TWStringCreateWithUTF8Bytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> bytes,
);

typedef _dart_TWStringCreateWithUTF8Bytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> bytes,
);

typedef _c_TWStringCreateWithRawBytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint8> bytes,
  ffi.Uint64 size,
);

typedef _dart_TWStringCreateWithRawBytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint8> bytes,
  int size,
);

typedef _c_TWStringCreateWithHexData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWStringCreateWithHexData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWStringSize = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWStringSize = int Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWStringGet = ffi.Int8 Function(
  ffi.Pointer<ffi.Void> string,
  ffi.Uint64 index,
);

typedef _dart_TWStringGet = int Function(
  ffi.Pointer<ffi.Void> string,
  int index,
);

typedef _c_TWStringUTF8Bytes = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWStringUTF8Bytes = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWStringDelete = ffi.Void Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWStringDelete = void Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWStringEqual = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> lhs,
  ffi.Pointer<ffi.Void> rhs,
);

typedef _dart_TWStringEqual = int Function(
  ffi.Pointer<ffi.Void> lhs,
  ffi.Pointer<ffi.Void> rhs,
);

typedef _c_TWPublicKeyCreateWithData = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Int32 type,
);

typedef _dart_TWPublicKeyCreateWithData = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<ffi.Void> data,
  int type,
);

typedef _c_TWPublicKeyDelete = ffi.Void Function(
  ffi.Pointer<TWPublicKey> pk,
);

typedef _dart_TWPublicKeyDelete = void Function(
  ffi.Pointer<TWPublicKey> pk,
);

typedef _c_TWPublicKeyIsValid = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Int32 type,
);

typedef _dart_TWPublicKeyIsValid = int Function(
  ffi.Pointer<ffi.Void> data,
  int type,
);

typedef _c_TWPublicKeyIsCompressed = ffi.Uint8 Function(
  ffi.Pointer<TWPublicKey> pk,
);

typedef _dart_TWPublicKeyIsCompressed = int Function(
  ffi.Pointer<TWPublicKey> pk,
);

typedef _c_TWPublicKeyCompressed = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<TWPublicKey> from,
);

typedef _dart_TWPublicKeyCompressed = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<TWPublicKey> from,
);

typedef _c_TWPublicKeyUncompressed = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<TWPublicKey> from,
);

typedef _dart_TWPublicKeyUncompressed = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<TWPublicKey> from,
);

typedef _c_TWPublicKeyData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPublicKey> pk,
);

typedef _dart_TWPublicKeyData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPublicKey> pk,
);

typedef _c_TWPublicKeyVerify = ffi.Uint8 Function(
  ffi.Pointer<TWPublicKey> pk,
  ffi.Pointer<ffi.Void> signature,
  ffi.Pointer<ffi.Void> message,
);

typedef _dart_TWPublicKeyVerify = int Function(
  ffi.Pointer<TWPublicKey> pk,
  ffi.Pointer<ffi.Void> signature,
  ffi.Pointer<ffi.Void> message,
);

typedef _c_TWPublicKeyVerifyAsDER = ffi.Uint8 Function(
  ffi.Pointer<TWPublicKey> pk,
  ffi.Pointer<ffi.Void> signature,
  ffi.Pointer<ffi.Void> message,
);

typedef _dart_TWPublicKeyVerifyAsDER = int Function(
  ffi.Pointer<TWPublicKey> pk,
  ffi.Pointer<ffi.Void> signature,
  ffi.Pointer<ffi.Void> message,
);

typedef _c_TWPublicKeyVerifySchnorr = ffi.Uint8 Function(
  ffi.Pointer<TWPublicKey> pk,
  ffi.Pointer<ffi.Void> signature,
  ffi.Pointer<ffi.Void> message,
);

typedef _dart_TWPublicKeyVerifySchnorr = int Function(
  ffi.Pointer<TWPublicKey> pk,
  ffi.Pointer<ffi.Void> signature,
  ffi.Pointer<ffi.Void> message,
);

typedef _c_TWPublicKeyKeyType = ffi.Int32 Function(
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _dart_TWPublicKeyKeyType = int Function(
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _c_TWPublicKeyDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _dart_TWPublicKeyDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _c_TWPublicKeyRecover = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<ffi.Void> signature,
  ffi.Pointer<ffi.Void> message,
);

typedef _dart_TWPublicKeyRecover = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<ffi.Void> signature,
  ffi.Pointer<ffi.Void> message,
);

typedef _c_TWPrivateKeyCreate = ffi.Pointer<TWPrivateKey> Function();

typedef _dart_TWPrivateKeyCreate = ffi.Pointer<TWPrivateKey> Function();

typedef _c_TWPrivateKeyCreateWithData = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWPrivateKeyCreateWithData = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWPrivateKeyCreateCopy = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWPrivateKey> key,
);

typedef _dart_TWPrivateKeyCreateCopy = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWPrivateKey> key,
);

typedef _c_TWPrivateKeyDelete = ffi.Void Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _dart_TWPrivateKeyDelete = void Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _c_TWPrivateKeyIsValid = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Int32 curve,
);

typedef _dart_TWPrivateKeyIsValid = int Function(
  ffi.Pointer<ffi.Void> data,
  int curve,
);

typedef _c_TWPrivateKeyData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _dart_TWPrivateKeyData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _c_TWPrivateKeyGetPublicKeySecp256k1 = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
  ffi.Uint8 compressed,
);

typedef _dart_TWPrivateKeyGetPublicKeySecp256k1 = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
  int compressed,
);

typedef _c_TWPrivateKeyGetPublicKeyNist256p1 = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _dart_TWPrivateKeyGetPublicKeyNist256p1 = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _c_TWPrivateKeyGetPublicKeyEd25519 = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _dart_TWPrivateKeyGetPublicKeyEd25519 = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _c_TWPrivateKeyGetPublicKeyEd25519Blake2b = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _dart_TWPrivateKeyGetPublicKeyEd25519Blake2b = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _c_TWPrivateKeyGetPublicKeyEd25519Extended = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _dart_TWPrivateKeyGetPublicKeyEd25519Extended = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _c_TWPrivateKeyGetPublicKeyCurve25519 = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _dart_TWPrivateKeyGetPublicKeyCurve25519 = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _c_TWPrivateKeyGetSharedKey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
  ffi.Pointer<TWPublicKey> publicKey,
  ffi.Int32 curve,
);

typedef _dart_TWPrivateKeyGetSharedKey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
  ffi.Pointer<TWPublicKey> publicKey,
  int curve,
);

typedef _c_TWPrivateKeySign = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
  ffi.Pointer<ffi.Void> digest,
  ffi.Int32 curve,
);

typedef _dart_TWPrivateKeySign = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
  ffi.Pointer<ffi.Void> digest,
  int curve,
);

typedef _c_TWPrivateKeySignAsDER = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
  ffi.Pointer<ffi.Void> digest,
  ffi.Int32 curve,
);

typedef _dart_TWPrivateKeySignAsDER = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
  ffi.Pointer<ffi.Void> digest,
  int curve,
);

typedef _c_TWPrivateKeySignSchnorr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
  ffi.Pointer<ffi.Void> message,
  ffi.Int32 curve,
);

typedef _dart_TWPrivateKeySignSchnorr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
  ffi.Pointer<ffi.Void> message,
  int curve,
);

typedef _c_TWCoinTypeBlockchain = ffi.Int32 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeBlockchain = int Function(
  int coin,
);

typedef _c_TWCoinTypePurpose = ffi.Int32 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypePurpose = int Function(
  int coin,
);

typedef _c_TWCoinTypeCurve = ffi.Int32 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeCurve = int Function(
  int coin,
);

typedef _c_TWCoinTypeXpubVersion = ffi.Int32 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeXpubVersion = int Function(
  int coin,
);

typedef _c_TWCoinTypeXprvVersion = ffi.Int32 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeXprvVersion = int Function(
  int coin,
);

typedef _c_TWCoinTypeValidate = ffi.Uint8 Function(
  ffi.Int32 coin,
  ffi.Pointer<ffi.Void> address,
);

typedef _dart_TWCoinTypeValidate = int Function(
  int coin,
  ffi.Pointer<ffi.Void> address,
);

typedef _c_TWCoinTypeDerivationPath = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeDerivationPath = ffi.Pointer<ffi.Void> Function(
  int coin,
);

typedef _c_TWCoinTypeDeriveAddress = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 coin,
  ffi.Pointer<TWPrivateKey> privateKey,
);

typedef _dart_TWCoinTypeDeriveAddress = ffi.Pointer<ffi.Void> Function(
  int coin,
  ffi.Pointer<TWPrivateKey> privateKey,
);

typedef _c_TWCoinTypeDeriveAddressFromPublicKey = ffi.Pointer<ffi.Void>
    Function(
  ffi.Int32 coin,
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _dart_TWCoinTypeDeriveAddressFromPublicKey = ffi.Pointer<ffi.Void>
    Function(
  int coin,
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _c_TWCoinTypeHRP = ffi.Int32 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeHRP = int Function(
  int coin,
);

typedef _c_TWCoinTypeP2pkhPrefix = ffi.Uint8 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeP2pkhPrefix = int Function(
  int coin,
);

typedef _c_TWCoinTypeP2shPrefix = ffi.Uint8 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeP2shPrefix = int Function(
  int coin,
);

typedef _c_TWCoinTypeStaticPrefix = ffi.Uint8 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeStaticPrefix = int Function(
  int coin,
);

typedef _c_TWCoinTypeSlip44Id = ffi.Uint32 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeSlip44Id = int Function(
  int coin,
);

typedef _c_TWCoinTypeConfigurationGetSymbol = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 type,
);

typedef _dart_TWCoinTypeConfigurationGetSymbol = ffi.Pointer<ffi.Void> Function(
  int type,
);

typedef _c_TWCoinTypeConfigurationGetDecimals = ffi.Int32 Function(
  ffi.Int32 type,
);

typedef _dart_TWCoinTypeConfigurationGetDecimals = int Function(
  int type,
);

typedef _c_TWCoinTypeConfigurationGetTransactionURL = ffi.Pointer<ffi.Void>
    Function(
  ffi.Int32 type,
  ffi.Pointer<ffi.Void> transactionID,
);

typedef _dart_TWCoinTypeConfigurationGetTransactionURL = ffi.Pointer<ffi.Void>
    Function(
  int type,
  ffi.Pointer<ffi.Void> transactionID,
);

typedef _c_TWCoinTypeConfigurationGetAccountURL = ffi.Pointer<ffi.Void>
    Function(
  ffi.Int32 type,
  ffi.Pointer<ffi.Void> accountID,
);

typedef _dart_TWCoinTypeConfigurationGetAccountURL = ffi.Pointer<ffi.Void>
    Function(
  int type,
  ffi.Pointer<ffi.Void> accountID,
);

typedef _c_TWCoinTypeConfigurationGetID = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 type,
);

typedef _dart_TWCoinTypeConfigurationGetID = ffi.Pointer<ffi.Void> Function(
  int type,
);

typedef _c_TWCoinTypeConfigurationGetName = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 type,
);

typedef _dart_TWCoinTypeConfigurationGetName = ffi.Pointer<ffi.Void> Function(
  int type,
);

typedef _c_TWHDWalletCreate = ffi.Pointer<TWHDWallet> Function(
  ffi.Int32 strength,
  ffi.Pointer<ffi.Void> passphrase,
);

typedef _dart_TWHDWalletCreate = ffi.Pointer<TWHDWallet> Function(
  int strength,
  ffi.Pointer<ffi.Void> passphrase,
);

typedef _c_TWHDWalletCreateWithMnemonic = ffi.Pointer<TWHDWallet> Function(
  ffi.Pointer<ffi.Void> mnemonic,
  ffi.Pointer<ffi.Void> passphrase,
);

typedef _dart_TWHDWalletCreateWithMnemonic = ffi.Pointer<TWHDWallet> Function(
  ffi.Pointer<ffi.Void> mnemonic,
  ffi.Pointer<ffi.Void> passphrase,
);

typedef _c_TWHDWalletCreateWithMnemonicCheck = ffi.Pointer<TWHDWallet> Function(
  ffi.Pointer<ffi.Void> mnemonic,
  ffi.Pointer<ffi.Void> passphrase,
  ffi.Uint8 check,
);

typedef _dart_TWHDWalletCreateWithMnemonicCheck = ffi.Pointer<TWHDWallet>
    Function(
  ffi.Pointer<ffi.Void> mnemonic,
  ffi.Pointer<ffi.Void> passphrase,
  int check,
);

typedef _c_TWHDWalletCreateWithEntropy = ffi.Pointer<TWHDWallet> Function(
  ffi.Pointer<ffi.Void> entropy,
  ffi.Pointer<ffi.Void> passphrase,
);

typedef _dart_TWHDWalletCreateWithEntropy = ffi.Pointer<TWHDWallet> Function(
  ffi.Pointer<ffi.Void> entropy,
  ffi.Pointer<ffi.Void> passphrase,
);

typedef _c_TWHDWalletDelete = ffi.Void Function(
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _dart_TWHDWalletDelete = void Function(
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _c_TWHDWalletSeed = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _dart_TWHDWalletSeed = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _c_TWHDWalletMnemonic = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _dart_TWHDWalletMnemonic = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _c_TWHDWalletEntropy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _dart_TWHDWalletEntropy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _c_TWHDWalletGetMasterKey = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 curve,
);

typedef _dart_TWHDWalletGetMasterKey = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int curve,
);

typedef _c_TWHDWalletGetKeyForCoin = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 coin,
);

typedef _dart_TWHDWalletGetKeyForCoin = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int coin,
);

typedef _c_TWHDWalletGetAddressForCoin = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 coin,
);

typedef _dart_TWHDWalletGetAddressForCoin = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int coin,
);

typedef _c_TWHDWalletGetKey = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 coin,
  ffi.Pointer<ffi.Void> derivationPath,
);

typedef _dart_TWHDWalletGetKey = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int coin,
  ffi.Pointer<ffi.Void> derivationPath,
);

typedef _c_TWHDWalletGetDerivedKey = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 coin,
  ffi.Uint32 account,
  ffi.Uint32 change,
  ffi.Uint32 address,
);

typedef _dart_TWHDWalletGetDerivedKey = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int coin,
  int account,
  int change,
  int address,
);

typedef _c_TWHDWalletGetExtendedPrivateKey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 purpose,
  ffi.Int32 coin,
  ffi.Int32 version,
);

typedef _dart_TWHDWalletGetExtendedPrivateKey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int purpose,
  int coin,
  int version,
);

typedef _c_TWHDWalletGetExtendedPublicKey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 purpose,
  ffi.Int32 coin,
  ffi.Int32 version,
);

typedef _dart_TWHDWalletGetExtendedPublicKey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int purpose,
  int coin,
  int version,
);

typedef _c_TWHDWalletGetPublicKeyFromExtended = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<ffi.Void> extended,
  ffi.Int32 coin,
  ffi.Pointer<ffi.Void> derivationPath,
);

typedef _dart_TWHDWalletGetPublicKeyFromExtended = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<ffi.Void> extended,
  int coin,
  ffi.Pointer<ffi.Void> derivationPath,
);

typedef _c_TWDataVectorCreate = ffi.Pointer<TWDataVector> Function();

typedef _dart_TWDataVectorCreate = ffi.Pointer<TWDataVector> Function();

typedef _c_TWDataVectorCreateWithData = ffi.Pointer<TWDataVector> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWDataVectorCreateWithData = ffi.Pointer<TWDataVector> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWDataVectorDelete = ffi.Void Function(
  ffi.Pointer<TWDataVector> dataVector,
);

typedef _dart_TWDataVectorDelete = void Function(
  ffi.Pointer<TWDataVector> dataVector,
);

typedef _c_TWDataVectorAdd = ffi.Void Function(
  ffi.Pointer<TWDataVector> dataVector,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWDataVectorAdd = void Function(
  ffi.Pointer<TWDataVector> dataVector,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWDataVectorSize = ffi.Uint64 Function(
  ffi.Pointer<TWDataVector> dataVector,
);

typedef _dart_TWDataVectorSize = int Function(
  ffi.Pointer<TWDataVector> dataVector,
);

typedef _c_TWDataVectorGet = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWDataVector> dataVector,
  ffi.Uint64 index,
);

typedef _dart_TWDataVectorGet = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWDataVector> dataVector,
  int index,
);

typedef _c_TWTransactionCompilerBuildInput = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 coinType,
  ffi.Pointer<ffi.Void> from,
  ffi.Pointer<ffi.Void> to,
  ffi.Pointer<ffi.Void> amount,
  ffi.Pointer<ffi.Void> asset,
  ffi.Pointer<ffi.Void> memo,
  ffi.Pointer<ffi.Void> chainId,
);

typedef _dart_TWTransactionCompilerBuildInput = ffi.Pointer<ffi.Void> Function(
  int coinType,
  ffi.Pointer<ffi.Void> from,
  ffi.Pointer<ffi.Void> to,
  ffi.Pointer<ffi.Void> amount,
  ffi.Pointer<ffi.Void> asset,
  ffi.Pointer<ffi.Void> memo,
  ffi.Pointer<ffi.Void> chainId,
);

typedef _c_TWTransactionCompilerPreImageHashes = ffi.Pointer<TWDataVector>
    Function(
  ffi.Int32 coinType,
  ffi.Pointer<ffi.Void> txInputData,
);

typedef _dart_TWTransactionCompilerPreImageHashes = ffi.Pointer<TWDataVector>
    Function(
  int coinType,
  ffi.Pointer<ffi.Void> txInputData,
);

typedef _c_TWTransactionCompilerCompileWithSignatures = ffi.Pointer<ffi.Void>
    Function(
  ffi.Int32 coinType,
  ffi.Pointer<ffi.Void> txInputData,
  ffi.Pointer<TWDataVector> signatures,
  ffi.Pointer<TWDataVector> publicKeys,
);

typedef _dart_TWTransactionCompilerCompileWithSignatures = ffi.Pointer<ffi.Void>
    Function(
  int coinType,
  ffi.Pointer<ffi.Void> txInputData,
  ffi.Pointer<TWDataVector> signatures,
  ffi.Pointer<TWDataVector> publicKeys,
);

typedef _c_TWBitcoinSigHashTypeIsSingle = ffi.Uint8 Function(
  ffi.Int32 type,
);

typedef _dart_TWBitcoinSigHashTypeIsSingle = int Function(
  int type,
);

typedef _c_TWBitcoinSigHashTypeIsNone = ffi.Uint8 Function(
  ffi.Int32 type,
);

typedef _dart_TWBitcoinSigHashTypeIsNone = int Function(
  int type,
);

typedef _c_TWEthereumAbiValueEncodeBool = ffi.Pointer<ffi.Void> Function(
  ffi.Uint8 value,
);

typedef _dart_TWEthereumAbiValueEncodeBool = ffi.Pointer<ffi.Void> Function(
  int value,
);

typedef _c_TWEthereumAbiValueEncodeInt32 = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 value,
);

typedef _dart_TWEthereumAbiValueEncodeInt32 = ffi.Pointer<ffi.Void> Function(
  int value,
);

typedef _c_TWEthereumAbiValueEncodeUInt32 = ffi.Pointer<ffi.Void> Function(
  ffi.Uint32 value,
);

typedef _dart_TWEthereumAbiValueEncodeUInt32 = ffi.Pointer<ffi.Void> Function(
  int value,
);

typedef _c_TWEthereumAbiValueEncodeInt256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_TWEthereumAbiValueEncodeInt256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> value,
);

typedef _c_TWEthereumAbiValueEncodeUInt256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_TWEthereumAbiValueEncodeUInt256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> value,
);

typedef _c_TWEthereumAbiValueEncodeAddress = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_TWEthereumAbiValueEncodeAddress = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> value,
);

typedef _c_TWEthereumAbiValueEncodeString = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_TWEthereumAbiValueEncodeString = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> value,
);

typedef _c_TWEthereumAbiValueEncodeBytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_TWEthereumAbiValueEncodeBytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> value,
);

typedef _c_TWEthereumAbiValueEncodeBytesDyn = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_TWEthereumAbiValueEncodeBytesDyn = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> value,
);

typedef _c_TWEthereumAbiValueDecodeUInt256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> input,
);

typedef _dart_TWEthereumAbiValueDecodeUInt256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> input,
);

typedef _c_TWEthereumAbiValueDecodeValue = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> type,
);

typedef _dart_TWEthereumAbiValueDecodeValue = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> type,
);

typedef _c_TWEthereumAbiValueDecodeArray = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> type,
);

typedef _dart_TWEthereumAbiValueDecodeArray = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> type,
);

typedef _c_TWAnySignerSign = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> input,
  ffi.Int32 coin,
);

typedef _dart_TWAnySignerSign = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> input,
  int coin,
);

typedef _c_TWAnySignerSignJSON = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> json,
  ffi.Pointer<ffi.Void> key,
  ffi.Int32 coin,
);

typedef _dart_TWAnySignerSignJSON = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> json,
  ffi.Pointer<ffi.Void> key,
  int coin,
);

typedef _c_TWAnySignerSupportsJSON = ffi.Uint8 Function(
  ffi.Int32 coin,
);

typedef _dart_TWAnySignerSupportsJSON = int Function(
  int coin,
);

typedef _c_TWAnySignerPlan = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> input,
  ffi.Int32 coin,
);

typedef _dart_TWAnySignerPlan = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> input,
  int coin,
);

typedef _c_TWSegwitAddressEqual = ffi.Uint8 Function(
  ffi.Pointer<TWSegwitAddress> lhs,
  ffi.Pointer<TWSegwitAddress> rhs,
);

typedef _dart_TWSegwitAddressEqual = int Function(
  ffi.Pointer<TWSegwitAddress> lhs,
  ffi.Pointer<TWSegwitAddress> rhs,
);

typedef _c_TWSegwitAddressIsValidString = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWSegwitAddressIsValidString = int Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWSegwitAddressCreateWithString = ffi.Pointer<TWSegwitAddress>
    Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWSegwitAddressCreateWithString = ffi.Pointer<TWSegwitAddress>
    Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWSegwitAddressCreateWithPublicKey = ffi.Pointer<TWSegwitAddress>
    Function(
  ffi.Int32 hrp,
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _dart_TWSegwitAddressCreateWithPublicKey = ffi.Pointer<TWSegwitAddress>
    Function(
  int hrp,
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _c_TWSegwitAddressDelete = ffi.Void Function(
  ffi.Pointer<TWSegwitAddress> address,
);

typedef _dart_TWSegwitAddressDelete = void Function(
  ffi.Pointer<TWSegwitAddress> address,
);

typedef _c_TWSegwitAddressDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWSegwitAddress> address,
);

typedef _dart_TWSegwitAddressDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWSegwitAddress> address,
);

typedef _c_TWSegwitAddressHRP = ffi.Int32 Function(
  ffi.Pointer<TWSegwitAddress> address,
);

typedef _dart_TWSegwitAddressHRP = int Function(
  ffi.Pointer<TWSegwitAddress> address,
);

typedef _c_TWSegwitAddressWitnessVersion = ffi.Int32 Function(
  ffi.Pointer<TWSegwitAddress> address,
);

typedef _dart_TWSegwitAddressWitnessVersion = int Function(
  ffi.Pointer<TWSegwitAddress> address,
);

typedef _c_TWSegwitAddressWitnessProgram = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWSegwitAddress> address,
);

typedef _dart_TWSegwitAddressWitnessProgram = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWSegwitAddress> address,
);

typedef _c_TWBitcoinAddressEqual = ffi.Uint8 Function(
  ffi.Pointer<TWBitcoinAddress> lhs,
  ffi.Pointer<TWBitcoinAddress> rhs,
);

typedef _dart_TWBitcoinAddressEqual = int Function(
  ffi.Pointer<TWBitcoinAddress> lhs,
  ffi.Pointer<TWBitcoinAddress> rhs,
);

typedef _c_TWBitcoinAddressIsValid = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWBitcoinAddressIsValid = int Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWBitcoinAddressIsValidString = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWBitcoinAddressIsValidString = int Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWBitcoinAddressCreateWithString = ffi.Pointer<TWBitcoinAddress>
    Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWBitcoinAddressCreateWithString = ffi.Pointer<TWBitcoinAddress>
    Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWBitcoinAddressCreateWithData = ffi.Pointer<TWBitcoinAddress>
    Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWBitcoinAddressCreateWithData = ffi.Pointer<TWBitcoinAddress>
    Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWBitcoinAddressCreateWithPublicKey = ffi.Pointer<TWBitcoinAddress>
    Function(
  ffi.Pointer<TWPublicKey> publicKey,
  ffi.Uint8 prefix,
);

typedef _dart_TWBitcoinAddressCreateWithPublicKey
    = ffi.Pointer<TWBitcoinAddress> Function(
  ffi.Pointer<TWPublicKey> publicKey,
  int prefix,
);

typedef _c_TWBitcoinAddressDelete = ffi.Void Function(
  ffi.Pointer<TWBitcoinAddress> address,
);

typedef _dart_TWBitcoinAddressDelete = void Function(
  ffi.Pointer<TWBitcoinAddress> address,
);

typedef _c_TWBitcoinAddressDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWBitcoinAddress> address,
);

typedef _dart_TWBitcoinAddressDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWBitcoinAddress> address,
);

typedef _c_TWBitcoinAddressPrefix = ffi.Uint8 Function(
  ffi.Pointer<TWBitcoinAddress> address,
);

typedef _dart_TWBitcoinAddressPrefix = int Function(
  ffi.Pointer<TWBitcoinAddress> address,
);

typedef _c_TWBitcoinAddressKeyhash = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWBitcoinAddress> address,
);

typedef _dart_TWBitcoinAddressKeyhash = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWBitcoinAddress> address,
);

typedef _c_TWAnyAddressEqual = ffi.Uint8 Function(
  ffi.Pointer<TWAnyAddress> lhs,
  ffi.Pointer<TWAnyAddress> rhs,
);

typedef _dart_TWAnyAddressEqual = int Function(
  ffi.Pointer<TWAnyAddress> lhs,
  ffi.Pointer<TWAnyAddress> rhs,
);

typedef _c_TWAnyAddressIsValid = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> string,
  ffi.Int32 coin,
);

typedef _dart_TWAnyAddressIsValid = int Function(
  ffi.Pointer<ffi.Void> string,
  int coin,
);

typedef _c_TWAnyAddressCreateWithString = ffi.Pointer<TWAnyAddress> Function(
  ffi.Pointer<ffi.Void> string,
  ffi.Int32 coin,
);

typedef _dart_TWAnyAddressCreateWithString = ffi.Pointer<TWAnyAddress> Function(
  ffi.Pointer<ffi.Void> string,
  int coin,
);

typedef _c_TWAnyAddressCreateWithPublicKey = ffi.Pointer<TWAnyAddress> Function(
  ffi.Pointer<TWPublicKey> publicKey,
  ffi.Int32 coin,
);

typedef _dart_TWAnyAddressCreateWithPublicKey = ffi.Pointer<TWAnyAddress>
    Function(
  ffi.Pointer<TWPublicKey> publicKey,
  int coin,
);

typedef _c_TWAnyAddressDelete = ffi.Void Function(
  ffi.Pointer<TWAnyAddress> address,
);

typedef _dart_TWAnyAddressDelete = void Function(
  ffi.Pointer<TWAnyAddress> address,
);

typedef _c_TWAnyAddressDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWAnyAddress> address,
);

typedef _dart_TWAnyAddressDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWAnyAddress> address,
);

typedef _c_TWAnyAddressCoin = ffi.Int32 Function(
  ffi.Pointer<TWAnyAddress> address,
);

typedef _dart_TWAnyAddressCoin = int Function(
  ffi.Pointer<TWAnyAddress> address,
);

typedef _c_TWAnyAddressData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWAnyAddress> address,
);

typedef _dart_TWAnyAddressData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWAnyAddress> address,
);

typedef _c_TWTHORChainSwapBuildSwap = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> input,
);

typedef _dart_TWTHORChainSwapBuildSwap = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> input,
);

typedef _c_TWBase58Encode = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWBase58Encode = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWBase58EncodeNoCheck = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWBase58EncodeNoCheck = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWBase58Decode = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWBase58Decode = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWBase58DecodeNoCheck = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWBase58DecodeNoCheck = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWRippleXAddressEqual = ffi.Uint8 Function(
  ffi.Pointer<TWRippleXAddress> lhs,
  ffi.Pointer<TWRippleXAddress> rhs,
);

typedef _dart_TWRippleXAddressEqual = int Function(
  ffi.Pointer<TWRippleXAddress> lhs,
  ffi.Pointer<TWRippleXAddress> rhs,
);

typedef _c_TWRippleXAddressIsValidString = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWRippleXAddressIsValidString = int Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWRippleXAddressCreateWithString = ffi.Pointer<TWRippleXAddress>
    Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWRippleXAddressCreateWithString = ffi.Pointer<TWRippleXAddress>
    Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWRippleXAddressCreateWithPublicKey = ffi.Pointer<TWRippleXAddress>
    Function(
  ffi.Pointer<TWPublicKey> publicKey,
  ffi.Uint32 tag,
);

typedef _dart_TWRippleXAddressCreateWithPublicKey
    = ffi.Pointer<TWRippleXAddress> Function(
  ffi.Pointer<TWPublicKey> publicKey,
  int tag,
);

typedef _c_TWRippleXAddressDelete = ffi.Void Function(
  ffi.Pointer<TWRippleXAddress> address,
);

typedef _dart_TWRippleXAddressDelete = void Function(
  ffi.Pointer<TWRippleXAddress> address,
);

typedef _c_TWRippleXAddressDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWRippleXAddress> address,
);

typedef _dart_TWRippleXAddressDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWRippleXAddress> address,
);

typedef _c_TWRippleXAddressTag = ffi.Uint32 Function(
  ffi.Pointer<TWRippleXAddress> address,
);

typedef _dart_TWRippleXAddressTag = int Function(
  ffi.Pointer<TWRippleXAddress> address,
);

typedef _c_TWPBKDF2HmacSha256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> password,
  ffi.Pointer<ffi.Void> salt,
  ffi.Uint32 iterations,
  ffi.Uint32 dkLen,
);

typedef _dart_TWPBKDF2HmacSha256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> password,
  ffi.Pointer<ffi.Void> salt,
  int iterations,
  int dkLen,
);

typedef _c_TWPBKDF2HmacSha512 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> password,
  ffi.Pointer<ffi.Void> salt,
  ffi.Uint32 iterations,
  ffi.Uint32 dkLen,
);

typedef _dart_TWPBKDF2HmacSha512 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> password,
  ffi.Pointer<ffi.Void> salt,
  int iterations,
  int dkLen,
);

typedef _c_TWEthereumAbiEncode = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
);

typedef _dart_TWEthereumAbiEncode = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
);

typedef _c_TWEthereumAbiDecodeOutput = ffi.Uint8 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Pointer<ffi.Void> encoded,
);

typedef _dart_TWEthereumAbiDecodeOutput = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Pointer<ffi.Void> encoded,
);

typedef _c_TWEthereumAbiDecodeCall = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> abi,
);

typedef _dart_TWEthereumAbiDecodeCall = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> abi,
);

typedef _c_TWEthereumAbiEncodeTyped = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> messageJson,
);

typedef _dart_TWEthereumAbiEncodeTyped = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> messageJson,
);

typedef _c_TWHashSHA1 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashSHA1 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashSHA256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashSHA256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashSHA512 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashSHA512 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashSHA512_256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashSHA512_256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashKeccak256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashKeccak256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashKeccak512 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashKeccak512 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashSHA3_256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashSHA3_256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashSHA3_512 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashSHA3_512 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashRIPEMD = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashRIPEMD = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashBlake256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashBlake256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashBlake2b = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Uint64 size,
);

typedef _dart_TWHashBlake2b = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_TWHashGroestl512 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashGroestl512 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashXXHash64 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Uint64 seed,
);

typedef _dart_TWHashXXHash64 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
  int seed,
);

typedef _c_TWHashTwoXXHash64Concat = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashTwoXXHash64Concat = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashSHA256SHA256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashSHA256SHA256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashSHA256RIPEMD = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashSHA256RIPEMD = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashSHA3_256RIPEMD = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashSHA3_256RIPEMD = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashBlake256Blake256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashBlake256Blake256 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashBlake256RIPEMD = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashBlake256RIPEMD = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWHashGroestl512Groestl512 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWHashGroestl512Groestl512 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWStoredKeyLoad = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> path,
);

typedef _dart_TWStoredKeyLoad = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> path,
);

typedef _c_TWStoredKeyImportPrivateKey = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> privateKey,
  ffi.Pointer<ffi.Void> name,
  ffi.Pointer<ffi.Void> password,
  ffi.Int32 coin,
);

typedef _dart_TWStoredKeyImportPrivateKey = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> privateKey,
  ffi.Pointer<ffi.Void> name,
  ffi.Pointer<ffi.Void> password,
  int coin,
);

typedef _c_TWStoredKeyImportHDWallet = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> mnemonic,
  ffi.Pointer<ffi.Void> name,
  ffi.Pointer<ffi.Void> password,
  ffi.Int32 coin,
);

typedef _dart_TWStoredKeyImportHDWallet = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> mnemonic,
  ffi.Pointer<ffi.Void> name,
  ffi.Pointer<ffi.Void> password,
  int coin,
);

typedef _c_TWStoredKeyImportJSON = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> json,
);

typedef _dart_TWStoredKeyImportJSON = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> json,
);

typedef _c_TWStoredKeyCreateLevel = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> name,
  ffi.Pointer<ffi.Void> password,
  ffi.Int32 encryptionLevel,
);

typedef _dart_TWStoredKeyCreateLevel = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> name,
  ffi.Pointer<ffi.Void> password,
  int encryptionLevel,
);

typedef _c_TWStoredKeyCreate = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> name,
  ffi.Pointer<ffi.Void> password,
);

typedef _dart_TWStoredKeyCreate = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> name,
  ffi.Pointer<ffi.Void> password,
);

typedef _c_TWStoredKeyDelete = ffi.Void Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _dart_TWStoredKeyDelete = void Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _c_TWStoredKeyIdentifier = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _dart_TWStoredKeyIdentifier = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _c_TWStoredKeyName = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _dart_TWStoredKeyName = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _c_TWStoredKeyIsMnemonic = ffi.Uint8 Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _dart_TWStoredKeyIsMnemonic = int Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _c_TWStoredKeyAccountCount = ffi.Uint64 Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _dart_TWStoredKeyAccountCount = int Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _c_TWStoredKeyAccount = ffi.Pointer<TWAccount> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Uint64 index,
);

typedef _dart_TWStoredKeyAccount = ffi.Pointer<TWAccount> Function(
  ffi.Pointer<TWStoredKey> key,
  int index,
);

typedef _c_TWStoredKeyAccountForCoin = ffi.Pointer<TWAccount> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Int32 coin,
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _dart_TWStoredKeyAccountForCoin = ffi.Pointer<TWAccount> Function(
  ffi.Pointer<TWStoredKey> key,
  int coin,
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _c_TWStoredKeyRemoveAccountForCoin = ffi.Void Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Int32 coin,
);

typedef _dart_TWStoredKeyRemoveAccountForCoin = void Function(
  ffi.Pointer<TWStoredKey> key,
  int coin,
);

typedef _c_TWStoredKeyAddAccount = ffi.Void Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> address,
  ffi.Int32 coin,
  ffi.Pointer<ffi.Void> derivationPath,
  ffi.Pointer<ffi.Void> extetndedPublicKey,
);

typedef _dart_TWStoredKeyAddAccount = void Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> address,
  int coin,
  ffi.Pointer<ffi.Void> derivationPath,
  ffi.Pointer<ffi.Void> extetndedPublicKey,
);

typedef _c_TWStoredKeyStore = ffi.Uint8 Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> path,
);

typedef _dart_TWStoredKeyStore = int Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> path,
);

typedef _c_TWStoredKeyDecryptPrivateKey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> password,
);

typedef _dart_TWStoredKeyDecryptPrivateKey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> password,
);

typedef _c_TWStoredKeyDecryptMnemonic = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> password,
);

typedef _dart_TWStoredKeyDecryptMnemonic = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> password,
);

typedef _c_TWStoredKeyPrivateKey = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Int32 coin,
  ffi.Pointer<ffi.Void> password,
);

typedef _dart_TWStoredKeyPrivateKey = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWStoredKey> key,
  int coin,
  ffi.Pointer<ffi.Void> password,
);

typedef _c_TWStoredKeyWallet = ffi.Pointer<TWHDWallet> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> password,
);

typedef _dart_TWStoredKeyWallet = ffi.Pointer<TWHDWallet> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> password,
);

typedef _c_TWStoredKeyExportJSON = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _dart_TWStoredKeyExportJSON = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _c_TWStoredKeyFixAddresses = ffi.Uint8 Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> password,
);

typedef _dart_TWStoredKeyFixAddresses = int Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> password,
);

typedef _c_TWStoredKeyEncryptionParameters = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _dart_TWStoredKeyEncryptionParameters = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _c_TWBitcoinScriptCreate = ffi.Pointer<TWBitcoinScript> Function();

typedef _dart_TWBitcoinScriptCreate = ffi.Pointer<TWBitcoinScript> Function();

typedef _c_TWBitcoinScriptCreateWithData = ffi.Pointer<TWBitcoinScript>
    Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWBitcoinScriptCreateWithData = ffi.Pointer<TWBitcoinScript>
    Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWBitcoinScriptCreateWithBytes = ffi.Pointer<TWBitcoinScript>
    Function(
  ffi.Pointer<ffi.Uint8> bytes,
  ffi.Uint64 size,
);

typedef _dart_TWBitcoinScriptCreateWithBytes = ffi.Pointer<TWBitcoinScript>
    Function(
  ffi.Pointer<ffi.Uint8> bytes,
  int size,
);

typedef _c_TWBitcoinScriptCreateCopy = ffi.Pointer<TWBitcoinScript> Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _dart_TWBitcoinScriptCreateCopy = ffi.Pointer<TWBitcoinScript> Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _c_TWBitcoinScriptDelete = ffi.Void Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _dart_TWBitcoinScriptDelete = void Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _c_TWBitcoinScriptSize = ffi.Uint64 Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _dart_TWBitcoinScriptSize = int Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _c_TWBitcoinScriptData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _dart_TWBitcoinScriptData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _c_TWBitcoinScriptScriptHash = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _dart_TWBitcoinScriptScriptHash = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _c_TWBitcoinScriptIsPayToScriptHash = ffi.Uint8 Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _dart_TWBitcoinScriptIsPayToScriptHash = int Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _c_TWBitcoinScriptIsPayToWitnessScriptHash = ffi.Uint8 Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _dart_TWBitcoinScriptIsPayToWitnessScriptHash = int Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _c_TWBitcoinScriptIsPayToWitnessPublicKeyHash = ffi.Uint8 Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _dart_TWBitcoinScriptIsPayToWitnessPublicKeyHash = int Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _c_TWBitcoinScriptIsWitnessProgram = ffi.Uint8 Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _dart_TWBitcoinScriptIsWitnessProgram = int Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _c_TWBitcoinScriptEqual = ffi.Uint8 Function(
  ffi.Pointer<TWBitcoinScript> lhs,
  ffi.Pointer<TWBitcoinScript> rhs,
);

typedef _dart_TWBitcoinScriptEqual = int Function(
  ffi.Pointer<TWBitcoinScript> lhs,
  ffi.Pointer<TWBitcoinScript> rhs,
);

typedef _c_TWBitcoinScriptMatchPayToPubkey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _dart_TWBitcoinScriptMatchPayToPubkey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _c_TWBitcoinScriptMatchPayToPubkeyHash = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _dart_TWBitcoinScriptMatchPayToPubkeyHash = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _c_TWBitcoinScriptMatchPayToScriptHash = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _dart_TWBitcoinScriptMatchPayToScriptHash = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _c_TWBitcoinScriptMatchPayToWitnessPublicKeyHash = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _dart_TWBitcoinScriptMatchPayToWitnessPublicKeyHash
    = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _c_TWBitcoinScriptMatchPayToWitnessScriptHash = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _dart_TWBitcoinScriptMatchPayToWitnessScriptHash = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _c_TWBitcoinScriptEncode = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _dart_TWBitcoinScriptEncode = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWBitcoinScript> script,
);

typedef _c_TWBitcoinScriptBuildPayToPublicKey = ffi.Pointer<TWBitcoinScript>
    Function(
  ffi.Pointer<ffi.Void> pubkey,
);

typedef _dart_TWBitcoinScriptBuildPayToPublicKey = ffi.Pointer<TWBitcoinScript>
    Function(
  ffi.Pointer<ffi.Void> pubkey,
);

typedef _c_TWBitcoinScriptBuildPayToPublicKeyHash = ffi.Pointer<TWBitcoinScript>
    Function(
  ffi.Pointer<ffi.Void> hash,
);

typedef _dart_TWBitcoinScriptBuildPayToPublicKeyHash
    = ffi.Pointer<TWBitcoinScript> Function(
  ffi.Pointer<ffi.Void> hash,
);

typedef _c_TWBitcoinScriptBuildPayToScriptHash = ffi.Pointer<TWBitcoinScript>
    Function(
  ffi.Pointer<ffi.Void> scriptHash,
);

typedef _dart_TWBitcoinScriptBuildPayToScriptHash = ffi.Pointer<TWBitcoinScript>
    Function(
  ffi.Pointer<ffi.Void> scriptHash,
);

typedef _c_TWBitcoinScriptBuildPayToWitnessPubkeyHash
    = ffi.Pointer<TWBitcoinScript> Function(
  ffi.Pointer<ffi.Void> hash,
);

typedef _dart_TWBitcoinScriptBuildPayToWitnessPubkeyHash
    = ffi.Pointer<TWBitcoinScript> Function(
  ffi.Pointer<ffi.Void> hash,
);

typedef _c_TWBitcoinScriptBuildPayToWitnessScriptHash
    = ffi.Pointer<TWBitcoinScript> Function(
  ffi.Pointer<ffi.Void> scriptHash,
);

typedef _dart_TWBitcoinScriptBuildPayToWitnessScriptHash
    = ffi.Pointer<TWBitcoinScript> Function(
  ffi.Pointer<ffi.Void> scriptHash,
);

typedef _c_TWBitcoinScriptLockScriptForAddress = ffi.Pointer<TWBitcoinScript>
    Function(
  ffi.Pointer<ffi.Void> address,
  ffi.Int32 coin,
);

typedef _dart_TWBitcoinScriptLockScriptForAddress = ffi.Pointer<TWBitcoinScript>
    Function(
  ffi.Pointer<ffi.Void> address,
  int coin,
);

typedef _c_TWBitcoinScriptHashTypeForCoin = ffi.Uint32 Function(
  ffi.Int32 coinType,
);

typedef _dart_TWBitcoinScriptHashTypeForCoin = int Function(
  int coinType,
);

typedef _c_TWFIOAccountCreateWithString = ffi.Pointer<TWFIOAccount> Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWFIOAccountCreateWithString = ffi.Pointer<TWFIOAccount> Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWFIOAccountDelete = ffi.Void Function(
  ffi.Pointer<TWFIOAccount> account,
);

typedef _dart_TWFIOAccountDelete = void Function(
  ffi.Pointer<TWFIOAccount> account,
);

typedef _c_TWFIOAccountDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWFIOAccount> account,
);

typedef _dart_TWFIOAccountDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWFIOAccount> account,
);

typedef _c_TWGroestlcoinAddressEqual = ffi.Uint8 Function(
  ffi.Pointer<TWGroestlcoinAddress> lhs,
  ffi.Pointer<TWGroestlcoinAddress> rhs,
);

typedef _dart_TWGroestlcoinAddressEqual = int Function(
  ffi.Pointer<TWGroestlcoinAddress> lhs,
  ffi.Pointer<TWGroestlcoinAddress> rhs,
);

typedef _c_TWGroestlcoinAddressIsValidString = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWGroestlcoinAddressIsValidString = int Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWGroestlcoinAddressCreateWithString
    = ffi.Pointer<TWGroestlcoinAddress> Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWGroestlcoinAddressCreateWithString
    = ffi.Pointer<TWGroestlcoinAddress> Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWGroestlcoinAddressCreateWithPublicKey
    = ffi.Pointer<TWGroestlcoinAddress> Function(
  ffi.Pointer<TWPublicKey> publicKey,
  ffi.Uint8 prefix,
);

typedef _dart_TWGroestlcoinAddressCreateWithPublicKey
    = ffi.Pointer<TWGroestlcoinAddress> Function(
  ffi.Pointer<TWPublicKey> publicKey,
  int prefix,
);

typedef _c_TWGroestlcoinAddressDelete = ffi.Void Function(
  ffi.Pointer<TWGroestlcoinAddress> address,
);

typedef _dart_TWGroestlcoinAddressDelete = void Function(
  ffi.Pointer<TWGroestlcoinAddress> address,
);

typedef _c_TWGroestlcoinAddressDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWGroestlcoinAddress> address,
);

typedef _dart_TWGroestlcoinAddressDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWGroestlcoinAddress> address,
);

typedef _c_TWMnemonicIsValid = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> mnemonic,
);

typedef _dart_TWMnemonicIsValid = int Function(
  ffi.Pointer<ffi.Void> mnemonic,
);

typedef _c_TWMnemonicIsValidWord = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> word,
);

typedef _dart_TWMnemonicIsValidWord = int Function(
  ffi.Pointer<ffi.Void> word,
);

typedef _c_TWMnemonicSuggest = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> prefix,
);

typedef _dart_TWMnemonicSuggest = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> prefix,
);

typedef _c_TWEthereumAbiFunctionCreateWithString
    = ffi.Pointer<TWEthereumAbiFunction> Function(
  ffi.Pointer<ffi.Void> name,
);

typedef _dart_TWEthereumAbiFunctionCreateWithString
    = ffi.Pointer<TWEthereumAbiFunction> Function(
  ffi.Pointer<ffi.Void> name,
);

typedef _c_TWEthereumAbiFunctionDelete = ffi.Void Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
);

typedef _dart_TWEthereumAbiFunctionDelete = void Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
);

typedef _c_TWEthereumAbiFunctionGetType = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
);

typedef _dart_TWEthereumAbiFunctionGetType = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
);

typedef _c_TWEthereumAbiFunctionAddParamUInt8 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Uint8 val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamUInt8 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamUInt16 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Uint16 val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamUInt16 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamUInt32 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Uint32 val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamUInt32 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamUInt64 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Uint64 val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamUInt64 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamUInt256 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Pointer<ffi.Void> val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamUInt256 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Pointer<ffi.Void> val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamUIntN = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 bits,
  ffi.Pointer<ffi.Void> val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamUIntN = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int bits,
  ffi.Pointer<ffi.Void> val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamInt8 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int8 val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamInt8 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamInt16 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int16 val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamInt16 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamInt32 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamInt32 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamInt64 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int64 val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamInt64 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamInt256 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Pointer<ffi.Void> val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamInt256 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Pointer<ffi.Void> val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamIntN = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 bits,
  ffi.Pointer<ffi.Void> val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamIntN = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int bits,
  ffi.Pointer<ffi.Void> val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamBool = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Uint8 val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamBool = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamString = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Pointer<ffi.Void> val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamString = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Pointer<ffi.Void> val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamAddress = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Pointer<ffi.Void> val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamAddress = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Pointer<ffi.Void> val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamBytes = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Pointer<ffi.Void> val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamBytes = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Pointer<ffi.Void> val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamBytesFix = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Uint64 size,
  ffi.Pointer<ffi.Void> val,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamBytesFix = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int size,
  ffi.Pointer<ffi.Void> val,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddParamArray = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionAddParamArray = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionGetParamUInt8 = ffi.Uint8 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 idx,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionGetParamUInt8 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int idx,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionGetParamUInt64 = ffi.Uint64 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 idx,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionGetParamUInt64 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int idx,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionGetParamUInt256 = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 idx,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionGetParamUInt256 = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int idx,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionGetParamBool = ffi.Uint8 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 idx,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionGetParamBool = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int idx,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionGetParamString = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 idx,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionGetParamString = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int idx,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionGetParamAddress = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 idx,
  ffi.Uint8 isOutput,
);

typedef _dart_TWEthereumAbiFunctionGetParamAddress = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int idx,
  int isOutput,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamUInt8 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Uint8 val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamUInt8 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  int val,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamUInt16 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Uint16 val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamUInt16 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  int val,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamUInt32 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Uint32 val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamUInt32 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  int val,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamUInt64 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Uint64 val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamUInt64 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  int val,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamUInt256 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Pointer<ffi.Void> val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamUInt256 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  ffi.Pointer<ffi.Void> val,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamUIntN = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Int32 bits,
  ffi.Pointer<ffi.Void> val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamUIntN = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  int bits,
  ffi.Pointer<ffi.Void> val,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamInt8 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Int8 val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamInt8 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  int val,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamInt16 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Int16 val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamInt16 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  int val,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamInt32 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Int32 val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamInt32 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  int val,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamInt64 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Int64 val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamInt64 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  int val,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamInt256 = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Pointer<ffi.Void> val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamInt256 = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  ffi.Pointer<ffi.Void> val,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamIntN = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Int32 bits,
  ffi.Pointer<ffi.Void> val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamIntN = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  int bits,
  ffi.Pointer<ffi.Void> val,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamBool = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Uint8 val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamBool = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  int val,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamString = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Pointer<ffi.Void> val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamString = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  ffi.Pointer<ffi.Void> val,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamAddress = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Pointer<ffi.Void> val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamAddress = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  ffi.Pointer<ffi.Void> val,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamBytes = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Pointer<ffi.Void> val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamBytes = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  ffi.Pointer<ffi.Void> val,
);

typedef _c_TWEthereumAbiFunctionAddInArrayParamBytesFix = ffi.Int32 Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  ffi.Int32 arrayIdx,
  ffi.Uint64 size,
  ffi.Pointer<ffi.Void> val,
);

typedef _dart_TWEthereumAbiFunctionAddInArrayParamBytesFix = int Function(
  ffi.Pointer<TWEthereumAbiFunction> fn,
  int arrayIdx,
  int size,
  ffi.Pointer<ffi.Void> val,
);

typedef _c_TWAESEncryptCBC = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> key,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> iv,
  ffi.Int32 mode,
);

typedef _dart_TWAESEncryptCBC = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> key,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> iv,
  int mode,
);

typedef _c_TWAESDecryptCBC = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> key,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> iv,
  ffi.Int32 mode,
);

typedef _dart_TWAESDecryptCBC = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> key,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> iv,
  int mode,
);

typedef _c_TWAESEncryptCTR = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> key,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> iv,
);

typedef _dart_TWAESEncryptCTR = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> key,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> iv,
);

typedef _c_TWAESDecryptCTR = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> key,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> iv,
);

typedef _dart_TWAESDecryptCTR = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> key,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> iv,
);

typedef _c_TWNEARAccountCreateWithString = ffi.Pointer<TWNEARAccount> Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWNEARAccountCreateWithString = ffi.Pointer<TWNEARAccount>
    Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWNEARAccountDelete = ffi.Void Function(
  ffi.Pointer<TWNEARAccount> account,
);

typedef _dart_TWNEARAccountDelete = void Function(
  ffi.Pointer<TWNEARAccount> account,
);

typedef _c_TWNEARAccountDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWNEARAccount> account,
);

typedef _dart_TWNEARAccountDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWNEARAccount> account,
);

typedef _c_TWAccountCreate = ffi.Pointer<TWAccount> Function(
  ffi.Pointer<ffi.Void> address,
  ffi.Int32 coin,
  ffi.Pointer<ffi.Void> derivationPath,
  ffi.Pointer<ffi.Void> extendedPublicKey,
);

typedef _dart_TWAccountCreate = ffi.Pointer<TWAccount> Function(
  ffi.Pointer<ffi.Void> address,
  int coin,
  ffi.Pointer<ffi.Void> derivationPath,
  ffi.Pointer<ffi.Void> extendedPublicKey,
);

typedef _c_TWAccountDelete = ffi.Void Function(
  ffi.Pointer<TWAccount> account,
);

typedef _dart_TWAccountDelete = void Function(
  ffi.Pointer<TWAccount> account,
);

typedef _c_TWAccountAddress = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWAccount> account,
);

typedef _dart_TWAccountAddress = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWAccount> account,
);

typedef _c_TWAccountDerivationPath = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWAccount> account,
);

typedef _dart_TWAccountDerivationPath = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWAccount> account,
);

typedef _c_TWAccountExtendedPublicKey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWAccount> account,
);

typedef _dart_TWAccountExtendedPublicKey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWAccount> account,
);

typedef _c_TWAccountCoin = ffi.Int32 Function(
  ffi.Pointer<TWAccount> account,
);

typedef _dart_TWAccountCoin = int Function(
  ffi.Pointer<TWAccount> account,
);

typedef _c_TWSolanaAddressCreateWithString = ffi.Pointer<TWSolanaAddress>
    Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWSolanaAddressCreateWithString = ffi.Pointer<TWSolanaAddress>
    Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWSolanaAddressDelete = ffi.Void Function(
  ffi.Pointer<TWSolanaAddress> address,
);

typedef _dart_TWSolanaAddressDelete = void Function(
  ffi.Pointer<TWSolanaAddress> address,
);

typedef _c_TWSolanaAddressDefaultTokenAddress = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWSolanaAddress> address,
  ffi.Pointer<ffi.Void> tokenMintAddress,
);

typedef _dart_TWSolanaAddressDefaultTokenAddress = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<TWSolanaAddress> address,
  ffi.Pointer<ffi.Void> tokenMintAddress,
);

typedef _c_TWSolanaAddressDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWSolanaAddress> address,
);

typedef _dart_TWSolanaAddressDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWSolanaAddress> address,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_3 = ffi.Void Function(
  ffi.Int32,
);
